{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1470838969000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1470838969000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1470838969000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1470838969000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1470838969000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1470838969000},{"_id":"source/_posts/type-safe-react-component-with-typescript.md","hash":"526f7e3ee4b7ad9e335034db4c47cc2ed117febe","modified":1470840828000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1470838969000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1470838969000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1470838969000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1470838969000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1470838969000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1470838969000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1470838969000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470838969000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470838969000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470838969000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1470838969000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470838969000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470838969000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470838969000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1470838969000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1470838969000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1470838969000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470838969000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1470838969000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1470838969000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470838969000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470838969000},{"_id":"public/archives/index.html","hash":"59fc7e581b283169d9b97d2381b12748a8bc079b","modified":1470841219610},{"_id":"public/archives/2016/index.html","hash":"813fd030bf29eebdec4496872ac7ed7b582f3fbf","modified":1470841219610},{"_id":"public/archives/2016/08/index.html","hash":"5c3f51c10bfb1f0eda300f022b021318bd6f2b05","modified":1470841219611},{"_id":"public/tags/javascript/index.html","hash":"dd89f7a1a23095d4bce4b8a165e2e5c94c52639a","modified":1470841219611},{"_id":"public/tags/typescript/index.html","hash":"8a8a20c0bb218ee2d3a07b3a064a48debd6d9dad","modified":1470841219611},{"_id":"public/tags/reactjs/index.html","hash":"fbe6fa3a229bf954d3761ae3f636aa2690f28bc0","modified":1470841219611},{"_id":"public/2016/08/10/type-safe-react-component-with-typescript/index.html","hash":"e5cea9a40ed32c1bcaf104844aa717fee3bd409a","modified":1470841219611},{"_id":"public/index.html","hash":"77f11d3d77988185aa6cb3f7067e1f66a8ab7783","modified":1470841219612},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470841219629},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470841219629},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470841219629},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470841219629},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470841219629},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470841219630},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470841219630},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470841219630},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470841219631},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470841219631},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470841220154},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470841220171},{"_id":"public/js/script.js","hash":"2556d90688a516ca9085e0d24ae51fe185df0608","modified":1470841220171},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470841220171},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470841220172},{"_id":"public/css/style.css","hash":"62d5f8a64c21b0b04c24a8a79109d16e2c13a0ca","modified":1470841220172},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470841220172},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470841220172},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470841220203},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470841220204},{"_id":"themes/apollo/_config.yml","hash":"9df87b558f1ba6aca262d269e487fed9f9f1f0a2","modified":1470839652000},{"_id":"themes/apollo/.gitignore","hash":"32c116ff3e11dbb01662ae3d8f53f557375d36be","modified":1470839652000},{"_id":"themes/apollo/README.md","hash":"597ba983d12898c84fa48031b20d58a21eb8d9f6","modified":1470839652000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1470839652000},{"_id":"themes/apollo/.git/config","hash":"e2bfd7164a8b1344ff2e9cbac5ed0ef75fcb9be3","modified":1470839652000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1470839648000},{"_id":"themes/apollo/.git/index","hash":"6ceb131187e886d84cdeaf79a036f15f658ad8c4","modified":1470839652000},{"_id":"themes/apollo/.git/packed-refs","hash":"fec5ecadbd8bfa9035a955f493aae580f3c679a5","modified":1470839652000},{"_id":"themes/apollo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470839652000},{"_id":"themes/apollo/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470839652000},{"_id":"themes/apollo/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470839652000},{"_id":"themes/apollo/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470839652000},{"_id":"themes/apollo/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470839652000},{"_id":"themes/apollo/layout/layout.ejs","hash":"57a1e3d2c675eb860e825f05aa394b25c4f53c61","modified":1470839652000},{"_id":"themes/apollo/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470839652000},{"_id":"themes/apollo/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470839652000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1470839648000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1470839648000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"0d55a3c31a4ac4f40525babf444de22aa6353aee","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/footer.ejs","hash":"ce1560944ef1fd99db5f04f572d6ef3f6b2cdd73","modified":1470841043000},{"_id":"themes/apollo/layout/_partial/after-footer.ejs","hash":"45770a2a60d6e29f91320ddc9f182d3fe9a86059","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/archive.ejs","hash":"ae4b72b6fc0fbcd77deae2e90bcfa87605d1bde9","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/article.ejs","hash":"b01b228f4ec70e567998e0d3cc10cbfae24f98da","modified":1470841005000},{"_id":"themes/apollo/layout/_partial/google-analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/head.ejs","hash":"253c73cf2d29c6d9590db1a33c3f16fd3407d307","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/header.ejs","hash":"7b892137daae1fa32b840bf8756f2b7d342d7dbc","modified":1470839652000},{"_id":"themes/apollo/source/css/style.styl","hash":"8ec96426fe09bdd4c907f1a4ed72fdecd609fe71","modified":1470840791000},{"_id":"themes/apollo/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470839652000},{"_id":"themes/apollo/source/js/script.js","hash":"2556d90688a516ca9085e0d24ae51fe185df0608","modified":1470839652000},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1470839652000},{"_id":"themes/apollo/.git/objects/pack/pack-86041d8bdb0ec65dc1a13b6e9526b4261984472b.idx","hash":"dba4d6b7838350969bb3f0df191eb56b9612e0de","modified":1470839652000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"7007bd2f6c9f4cb8b484a07c28ad2482c2888b3f","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/category.ejs","hash":"d346ed4160c07034371a389c894f7b3881947d60","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/date.ejs","hash":"5853090af0d8065e346f756729738d458282b452","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/gallery.ejs","hash":"36e8d8b320e4dfd429b12c9b91aed8642defc610","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/nav.ejs","hash":"563e66450b930e9ae58a37da0fa13970584001b3","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/variables.styl","hash":"e68e329f22f648651aba2c8f9bb40676678a0210","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/bass.styl","hash":"94d831c822cb229aa4336042417e4a7a68b3846b","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/title.ejs","hash":"6f54c13c84b14d85ea56ae7b6b39625f8de58354","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/syntax.styl","hash":"b5ced75d2167026f18a69780786d2b2349a9d22a","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article-gallery.styl","hash":"925ee764b23984d3d0751b623718341b07d9dff1","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/archive.styl","hash":"dbd8311765c39cab54baf672776bbc91a3638970","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article-nav.styl","hash":"d40a96d7df7f6c767410ea595166cee46a45a28c","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/header.styl","hash":"f890d392f452d89c76c2a0c73439c268b5f5ef88","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article.styl","hash":"55cdc8429d190f5af2f2953065f1dab7f11cee51","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/footer.styl","hash":"e0716e74d205052ca9e97a353321b385579df0e9","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/rwd.styl","hash":"86aaf66b48649cf78d07df242334dffc6008c91c","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470839652000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"0d55a3c31a4ac4f40525babf444de22aa6353aee","modified":1470839652000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470839652000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"0d55a3c31a4ac4f40525babf444de22aa6353aee","modified":1470839652000},{"_id":"themes/apollo/.git/objects/pack/pack-86041d8bdb0ec65dc1a13b6e9526b4261984472b.pack","hash":"b47756250a5bf29ba79a078eb0610c821cfaaaf6","modified":1470839652000},{"_id":"public/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1470841219631},{"_id":"themes/apollo/layout/_partial/social.ejs","hash":"453dc96825db627fb4eb7e266f2979b8e5466f89","modified":1470840886000},{"_id":"themes/apollo/source/css/_partial/social.styl","hash":"2e2ff58e79e3860c3a21ec34a357e3abf2274c66","modified":1470840837000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"TypeScript✕ReactJSで型安全なComponentを手に入れる","id":"type-safe-react-component-with-typescript","date":"2016-08-10T14:23:35.000Z","_content":"\nこの1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。\n\nReact.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。\nまた、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。\nさらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)\n型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。\n\nそこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。\n※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している\n\n## 導入方法\n\nまず、TypeScriptとReactをインストールする。\n※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。\n\n```bash\nnpm i -S typescript react typings\n```\n\n次にReactの型定義ファイルを取得します\n\n```bash\n$(npm bin)/typings install -S react\n# TypeScript@2の場合は npm install -D @types/react\n```\n\nこれで準備は完了。\n\n## コンポーネントの定義\n\nそれでは実際にコンポーネントを定義する。\nReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。\n\nReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。\nStatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。\nViewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。\n\nさて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。\n\n```typescript\n// ReactComponent\nclass Component<P, S> implements ComponentLifecycle<P, S> {\n  constructor(props?: P, context?: any);\n  setState(f: (prevState: S, props: P) => S, callback?: () => any): void;\n  setState(state: S, callback?: () => any): void;\n  forceUpdate(callBack?: () => any): void;\n  render(): ReactElement<any>;\n\n  props: P & { children?: ReactNode };\n  state: S;\n  context: {};\n  refs: {\n    [key: string]: ReactInstance\n  };\n}\n\n// StatelessComponent\ninterface StatelessComponent<P> {\n  (props?: P, context?: any): ReactElement<any>;\n  propTypes?: ValidationMap<P>;\n  contextTypes?: ValidationMap<any>;\n  defaultProps?: P;\n  displayName?: string;\n}\n```\n\nReactComponentは`P`,`S`、StatelessComponentは`P`という型変数を受け取ることに注目したい。\nこれはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。\n※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。\n\nつまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。\nこれによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。\n\n## 作例\n\nでは実際にコンポーネントの作例を書いてみたい。\n例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。\n\n```typescript\nimport { StatelessComponent, Component } from \"react\";\n\n// Propsの型を定義する\ninterface ITodo {\n  label: string;\n  isCompleted: boolean;\n}\n\ninterface ITodos {\n  todos: ITodo[];\n}\n\n// StatelessComponentの型引数に上で定義した型を渡す\nconst Todo: StatelessComponent<ITodos> = ({ label, isCompleted }) => (\n  <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n);\n\nconst Todos: StatelessComponent<ITodoProps> = ({ todos }) => (\n  <ul>\n    {todos.map(todo => <Todo { ...todo }/>)}\n  </ul>\n);\n\n// ReactComponentとして定義するなら...\nclass Todo extends Component<ITodos, void> {\n  render() {\n    const { label, isCompleted } = this.props;\n    return <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n  }\n}\n\nclass Todos extends Component<ITodos, void> {\n  render() {\n    const { todos } = this.props;\n    return (\n      <ul>\n        {todos.map(todo => <Todo { ...todo }/>)}\n      </ul>\n    )\n  }\n}\n```\n\nこの作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。\n※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう\n\n以上で型安全な子コンポーネントが作成できた。\nこれらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。\n\n```typescript\nexport class RootComponent extends Component<void, ITodos> {\n  componentWillMount() {\n    rootModel.subscribe(state => this.setState(state));\n  }\n\n  render() {\n    return <Todos { ...this.state } />;\n  }\n}\n```\n\n## まとめ\n\n以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。\n参考になればうれしい。","source":"_posts/type-safe-react-component-with-typescript.md","raw":"---\ntitle: TypeScript✕ReactJSで型安全なComponentを手に入れる\nid: type-safe-react-component-with-typescript\ndate: 2016-08-10 23:23:35\ntags:\n- javascript\n- typescript\n- reactjs\n---\n\nこの1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。\n\nReact.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。\nまた、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。\nさらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)\n型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。\n\nそこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。\n※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している\n\n## 導入方法\n\nまず、TypeScriptとReactをインストールする。\n※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。\n\n```bash\nnpm i -S typescript react typings\n```\n\n次にReactの型定義ファイルを取得します\n\n```bash\n$(npm bin)/typings install -S react\n# TypeScript@2の場合は npm install -D @types/react\n```\n\nこれで準備は完了。\n\n## コンポーネントの定義\n\nそれでは実際にコンポーネントを定義する。\nReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。\n\nReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。\nStatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。\nViewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。\n\nさて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。\n\n```typescript\n// ReactComponent\nclass Component<P, S> implements ComponentLifecycle<P, S> {\n  constructor(props?: P, context?: any);\n  setState(f: (prevState: S, props: P) => S, callback?: () => any): void;\n  setState(state: S, callback?: () => any): void;\n  forceUpdate(callBack?: () => any): void;\n  render(): ReactElement<any>;\n\n  props: P & { children?: ReactNode };\n  state: S;\n  context: {};\n  refs: {\n    [key: string]: ReactInstance\n  };\n}\n\n// StatelessComponent\ninterface StatelessComponent<P> {\n  (props?: P, context?: any): ReactElement<any>;\n  propTypes?: ValidationMap<P>;\n  contextTypes?: ValidationMap<any>;\n  defaultProps?: P;\n  displayName?: string;\n}\n```\n\nReactComponentは`P`,`S`、StatelessComponentは`P`という型変数を受け取ることに注目したい。\nこれはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。\n※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。\n\nつまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。\nこれによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。\n\n## 作例\n\nでは実際にコンポーネントの作例を書いてみたい。\n例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。\n\n```typescript\nimport { StatelessComponent, Component } from \"react\";\n\n// Propsの型を定義する\ninterface ITodo {\n  label: string;\n  isCompleted: boolean;\n}\n\ninterface ITodos {\n  todos: ITodo[];\n}\n\n// StatelessComponentの型引数に上で定義した型を渡す\nconst Todo: StatelessComponent<ITodos> = ({ label, isCompleted }) => (\n  <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n);\n\nconst Todos: StatelessComponent<ITodoProps> = ({ todos }) => (\n  <ul>\n    {todos.map(todo => <Todo { ...todo }/>)}\n  </ul>\n);\n\n// ReactComponentとして定義するなら...\nclass Todo extends Component<ITodos, void> {\n  render() {\n    const { label, isCompleted } = this.props;\n    return <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n  }\n}\n\nclass Todos extends Component<ITodos, void> {\n  render() {\n    const { todos } = this.props;\n    return (\n      <ul>\n        {todos.map(todo => <Todo { ...todo }/>)}\n      </ul>\n    )\n  }\n}\n```\n\nこの作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。\n※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう\n\n以上で型安全な子コンポーネントが作成できた。\nこれらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。\n\n```typescript\nexport class RootComponent extends Component<void, ITodos> {\n  componentWillMount() {\n    rootModel.subscribe(state => this.setState(state));\n  }\n\n  render() {\n    return <Todos { ...this.state } />;\n  }\n}\n```\n\n## まとめ\n\n以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。\n参考になればうれしい。","slug":"type-safe-react-component-with-typescript","published":1,"updated":"2016-08-11T00:23:17.000Z","_id":"cirozm3670000bjkqscwulre0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>この1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。</p>\n<p>React.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。<br>また、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。<br>さらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)<br>型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。</p>\n<p>そこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。<br>※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している</p>\n<h2 id=\"導入方法\"><a href=\"#導入方法\" class=\"headerlink\" title=\"導入方法\"></a>導入方法</h2><p>まず、TypeScriptとReactをインストールする。<br>※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S typescript react typings</div></pre></td></tr></table></figure>\n<p>次にReactの型定義ファイルを取得します</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(npm bin)/typings install -S react</div><div class=\"line\"><span class=\"comment\"># TypeScript@2の場合は npm install -D @types/react</span></div></pre></td></tr></table></figure>\n<p>これで準備は完了。</p>\n<h2 id=\"コンポーネントの定義\"><a href=\"#コンポーネントの定義\" class=\"headerlink\" title=\"コンポーネントの定義\"></a>コンポーネントの定義</h2><p>それでは実際にコンポーネントを定義する。<br>ReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。</p>\n<p>ReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。<br>StatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。<br>Viewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。</p>\n<p>さて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ReactComponent</span></div><div class=\"line\"><span class=\"keyword\">class</span> Component&lt;P, S&gt; <span class=\"keyword\">implements</span> ComponentLifecycle&lt;P, S&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props?: P, context?: any);</div><div class=\"line\">  setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): void;</div><div class=\"line\">  setState(state: S, callback?: () =&gt; any): void;</div><div class=\"line\">  forceUpdate(callBack?: () =&gt; any): void;</div><div class=\"line\">  render(): ReactElement&lt;any&gt;;</div><div class=\"line\"></div><div class=\"line\">  props: P &amp; &#123; children?: ReactNode &#125;;</div><div class=\"line\">  state: S;</div><div class=\"line\">  context: &#123;&#125;;</div><div class=\"line\">  refs: &#123;</div><div class=\"line\">    [key: <span class=\"built_in\">string</span>]: ReactInstance</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// StatelessComponent</span></div><div class=\"line\"><span class=\"keyword\">interface</span> StatelessComponent&lt;P&gt; &#123;</div><div class=\"line\">  (props?: P, context?: <span class=\"built_in\">any</span>): ReactElement&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  propTypes?: ValidationMap&lt;P&gt;;</div><div class=\"line\">  contextTypes?: ValidationMap&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  defaultProps?: P;</div><div class=\"line\">  displayName?: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReactComponentは<code>P</code>,<code>S</code>、StatelessComponentは<code>P</code>という型変数を受け取ることに注目したい。<br>これはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。<br>※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。</p>\n<p>つまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。<br>これによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。</p>\n<h2 id=\"作例\"><a href=\"#作例\" class=\"headerlink\" title=\"作例\"></a>作例</h2><p>では実際にコンポーネントの作例を書いてみたい。<br>例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; StatelessComponent, Component &#125; from \"react\";</div><div class=\"line\"></div><div class=\"line\">// Propsの型を定義する</div><div class=\"line\">interface ITodo &#123;</div><div class=\"line\">  label: string;</div><div class=\"line\">  isCompleted: boolean;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface ITodos &#123;</div><div class=\"line\">  todos: ITodo[];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// StatelessComponentの型引数に上で定義した型を渡す</div><div class=\"line\">const Todo: StatelessComponent&lt;ITodos&gt; = (&#123; label, isCompleted &#125;) =&gt; (</div><div class=\"line\">  &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">const Todos: StatelessComponent&lt;ITodoProps&gt; = (&#123; todos &#125;) =&gt; (</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// ReactComponentとして定義するなら...</div><div class=\"line\">class Todo extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; label, isCompleted &#125; = this.props;</div><div class=\"line\">    return &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Todos extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; todos &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>この作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。<br>※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう</p>\n<p>以上で型安全な子コンポーネントが作成できた。<br>これらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RootComponent extends Component&lt;<span class=\"built_in\">void</span>, ITodos&gt; &#123;</div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">    rootModel.subscribe(state =&gt; <span class=\"keyword\">this</span>.setState(state));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;Todos &#123; ...this.state &#125; /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。<br>参考になればうれしい。</p>\n","excerpt":"","more":"<p>この1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。</p>\n<p>React.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。<br>また、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。<br>さらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)<br>型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。</p>\n<p>そこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。<br>※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している</p>\n<h2 id=\"導入方法\"><a href=\"#導入方法\" class=\"headerlink\" title=\"導入方法\"></a>導入方法</h2><p>まず、TypeScriptとReactをインストールする。<br>※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S typescript react typings</div></pre></td></tr></table></figure>\n<p>次にReactの型定義ファイルを取得します</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(npm bin)/typings install -S react</div><div class=\"line\"><span class=\"comment\"># TypeScript@2の場合は npm install -D @types/react</span></div></pre></td></tr></table></figure>\n<p>これで準備は完了。</p>\n<h2 id=\"コンポーネントの定義\"><a href=\"#コンポーネントの定義\" class=\"headerlink\" title=\"コンポーネントの定義\"></a>コンポーネントの定義</h2><p>それでは実際にコンポーネントを定義する。<br>ReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。</p>\n<p>ReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。<br>StatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。<br>Viewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。</p>\n<p>さて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ReactComponent</span></div><div class=\"line\"><span class=\"keyword\">class</span> Component&lt;P, S&gt; <span class=\"keyword\">implements</span> ComponentLifecycle&lt;P, S&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props?: P, context?: any);</div><div class=\"line\">  setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): void;</div><div class=\"line\">  setState(state: S, callback?: () =&gt; any): void;</div><div class=\"line\">  forceUpdate(callBack?: () =&gt; any): void;</div><div class=\"line\">  render(): ReactElement&lt;any&gt;;</div><div class=\"line\"></div><div class=\"line\">  props: P &amp; &#123; children?: ReactNode &#125;;</div><div class=\"line\">  state: S;</div><div class=\"line\">  context: &#123;&#125;;</div><div class=\"line\">  refs: &#123;</div><div class=\"line\">    [key: <span class=\"built_in\">string</span>]: ReactInstance</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// StatelessComponent</span></div><div class=\"line\"><span class=\"keyword\">interface</span> StatelessComponent&lt;P&gt; &#123;</div><div class=\"line\">  (props?: P, context?: <span class=\"built_in\">any</span>): ReactElement&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  propTypes?: ValidationMap&lt;P&gt;;</div><div class=\"line\">  contextTypes?: ValidationMap&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  defaultProps?: P;</div><div class=\"line\">  displayName?: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReactComponentは<code>P</code>,<code>S</code>、StatelessComponentは<code>P</code>という型変数を受け取ることに注目したい。<br>これはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。<br>※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。</p>\n<p>つまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。<br>これによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。</p>\n<h2 id=\"作例\"><a href=\"#作例\" class=\"headerlink\" title=\"作例\"></a>作例</h2><p>では実際にコンポーネントの作例を書いてみたい。<br>例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; StatelessComponent, Component &#125; from \"react\";</div><div class=\"line\"></div><div class=\"line\">// Propsの型を定義する</div><div class=\"line\">interface ITodo &#123;</div><div class=\"line\">  label: string;</div><div class=\"line\">  isCompleted: boolean;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface ITodos &#123;</div><div class=\"line\">  todos: ITodo[];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// StatelessComponentの型引数に上で定義した型を渡す</div><div class=\"line\">const Todo: StatelessComponent&lt;ITodos&gt; = (&#123; label, isCompleted &#125;) =&gt; (</div><div class=\"line\">  &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">const Todos: StatelessComponent&lt;ITodoProps&gt; = (&#123; todos &#125;) =&gt; (</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// ReactComponentとして定義するなら...</div><div class=\"line\">class Todo extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; label, isCompleted &#125; = this.props;</div><div class=\"line\">    return &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Todos extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; todos &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>この作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。<br>※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう</p>\n<p>以上で型安全な子コンポーネントが作成できた。<br>これらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RootComponent extends Component&lt;<span class=\"built_in\">void</span>, ITodos&gt; &#123;</div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">    rootModel.subscribe(state =&gt; <span class=\"keyword\">this</span>.setState(state));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;Todos &#123; ...this.state &#125; /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。<br>参考になればうれしい。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cirozm3670000bjkqscwulre0","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirozm36p0004bjkqm17tutcy"},{"post_id":"cirozm3670000bjkqscwulre0","tag_id":"cirozm36k0002bjkq496i5rla","_id":"cirozm36q0005bjkq4c6zoj4h"},{"post_id":"cirozm3670000bjkqscwulre0","tag_id":"cirozm36m0003bjkq1trb8w6x","_id":"cirozm36q0006bjkqb7ijcn0q"}],"Tag":[{"name":"javascript","_id":"cirozm36g0001bjkqjyuzov74"},{"name":"typescript","_id":"cirozm36k0002bjkq496i5rla"},{"name":"reactjs","_id":"cirozm36m0003bjkq1trb8w6x"}]}}