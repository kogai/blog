{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1470838969000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1470838969000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1470838969000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1470838969000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1470838969000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1470838969000},{"_id":"source/_posts/type-safe-react-component-with-typescript.md","hash":"761c7c409e119529a592d26496c7f077150d99b1","modified":1470874997000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1470838969000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1470838969000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1470838969000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1470838969000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1470838969000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1470838969000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1470838969000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470838969000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470838969000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470838969000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1470838969000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470838969000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470838969000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470838969000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1470838969000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1470838969000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1470838969000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1470838969000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470838969000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1470838969000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1470838969000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1470838969000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1470838969000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470838969000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470838969000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470838969000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470838969000},{"_id":"public/archives/index.html","hash":"5fe96dce769e3cc4f9df0567995ede9783371c7e","modified":1470877311693},{"_id":"public/archives/2016/index.html","hash":"d298623515429caac8c2df7228513d0de30bbd33","modified":1470877312026},{"_id":"public/archives/2016/08/index.html","hash":"fd2d8cc6f7b0b19aa223b2b368c189875feaa3b3","modified":1470877312052},{"_id":"public/tags/javascript/index.html","hash":"dbabb4327cdec1420897b0a89959360507908c5a","modified":1470877312052},{"_id":"public/tags/typescript/index.html","hash":"527040feff378a38cd4be5981dfb6fe1f045c197","modified":1470877312052},{"_id":"public/tags/reactjs/index.html","hash":"2ed1d6dc1a20d9b241b1448168102533b715094e","modified":1470877312052},{"_id":"public/2016/08/10/type-safe-react-component-with-typescript/index.html","hash":"174455a02889b29bc7260eab8ba62bd201c5cc4c","modified":1470875709446},{"_id":"public/index.html","hash":"4bb8b7b4055e62ff78bd7294b735aa1039fab442","modified":1470877312052},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470841219629},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470841219629},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470841219629},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470841219629},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470841219629},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470841219630},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470841219630},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470841219630},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470841219631},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470841219631},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470841220154},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470841220171},{"_id":"public/js/script.js","hash":"2556d90688a516ca9085e0d24ae51fe185df0608","modified":1470841220171},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470841220171},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470841220172},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470841220172},{"_id":"public/css/style.css","hash":"62d5f8a64c21b0b04c24a8a79109d16e2c13a0ca","modified":1470841220172},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470841220172},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470841220172},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470841220203},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1470841220204},{"_id":"themes/apollo/_config.yml","hash":"9df87b558f1ba6aca262d269e487fed9f9f1f0a2","modified":1470839652000},{"_id":"themes/apollo/.gitignore","hash":"32c116ff3e11dbb01662ae3d8f53f557375d36be","modified":1470839652000},{"_id":"themes/apollo/README.md","hash":"597ba983d12898c84fa48031b20d58a21eb8d9f6","modified":1470839652000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1470839652000},{"_id":"themes/apollo/.git/config","hash":"e2bfd7164a8b1344ff2e9cbac5ed0ef75fcb9be3","modified":1470839652000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1470839648000},{"_id":"themes/apollo/.git/index","hash":"7cd7afd70b77aa8a279b8a7b159332d0dd39d520","modified":1470877348000},{"_id":"themes/apollo/.git/packed-refs","hash":"fec5ecadbd8bfa9035a955f493aae580f3c679a5","modified":1470839652000},{"_id":"themes/apollo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470839652000},{"_id":"themes/apollo/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470839652000},{"_id":"themes/apollo/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470839652000},{"_id":"themes/apollo/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470839652000},{"_id":"themes/apollo/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470839652000},{"_id":"themes/apollo/layout/layout.ejs","hash":"180f79316311bb0ecc9fbc8905e6261b0732b717","modified":1470875585000},{"_id":"themes/apollo/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470839652000},{"_id":"themes/apollo/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470839652000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1470839648000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1470839648000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1470839648000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"9092d7e4f797822bed8ed3efbf57d15c11761a8a","modified":1470877352000},{"_id":"themes/apollo/layout/_partial/footer.ejs","hash":"ce1560944ef1fd99db5f04f572d6ef3f6b2cdd73","modified":1470841043000},{"_id":"themes/apollo/layout/_partial/after-footer.ejs","hash":"45770a2a60d6e29f91320ddc9f182d3fe9a86059","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/archive.ejs","hash":"ae4b72b6fc0fbcd77deae2e90bcfa87605d1bde9","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/article.ejs","hash":"b01b228f4ec70e567998e0d3cc10cbfae24f98da","modified":1470841005000},{"_id":"themes/apollo/layout/_partial/google-analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/head.ejs","hash":"253c73cf2d29c6d9590db1a33c3f16fd3407d307","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/header.ejs","hash":"7b892137daae1fa32b840bf8756f2b7d342d7dbc","modified":1470839652000},{"_id":"themes/apollo/source/css/style.styl","hash":"8ec96426fe09bdd4c907f1a4ed72fdecd609fe71","modified":1470840791000},{"_id":"themes/apollo/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470839652000},{"_id":"themes/apollo/source/js/script.js","hash":"2556d90688a516ca9085e0d24ae51fe185df0608","modified":1470839652000},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1470839652000},{"_id":"themes/apollo/.git/objects/pack/pack-86041d8bdb0ec65dc1a13b6e9526b4261984472b.idx","hash":"dba4d6b7838350969bb3f0df191eb56b9612e0de","modified":1470839652000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"ebab0580e3b4f3f973095881781aa976a80522f2","modified":1470877352000},{"_id":"themes/apollo/layout/_partial/post/category.ejs","hash":"d346ed4160c07034371a389c894f7b3881947d60","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/date.ejs","hash":"5853090af0d8065e346f756729738d458282b452","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/gallery.ejs","hash":"36e8d8b320e4dfd429b12c9b91aed8642defc610","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/nav.ejs","hash":"563e66450b930e9ae58a37da0fa13970584001b3","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/variables.styl","hash":"e68e329f22f648651aba2c8f9bb40676678a0210","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/bass.styl","hash":"94d831c822cb229aa4336042417e4a7a68b3846b","modified":1470839652000},{"_id":"themes/apollo/layout/_partial/post/title.ejs","hash":"6f54c13c84b14d85ea56ae7b6b39625f8de58354","modified":1470839652000},{"_id":"themes/apollo/source/css/_bass/syntax.styl","hash":"b5ced75d2167026f18a69780786d2b2349a9d22a","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article-gallery.styl","hash":"925ee764b23984d3d0751b623718341b07d9dff1","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/archive.styl","hash":"dbd8311765c39cab54baf672776bbc91a3638970","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article-nav.styl","hash":"d40a96d7df7f6c767410ea595166cee46a45a28c","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/header.styl","hash":"f890d392f452d89c76c2a0c73439c268b5f5ef88","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/article.styl","hash":"55cdc8429d190f5af2f2953065f1dab7f11cee51","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/footer.styl","hash":"e0716e74d205052ca9e97a353321b385579df0e9","modified":1470839652000},{"_id":"themes/apollo/source/css/_partial/rwd.styl","hash":"86aaf66b48649cf78d07df242334dffc6008c91c","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470839652000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470839652000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"9092d7e4f797822bed8ed3efbf57d15c11761a8a","modified":1470877352000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1470839652000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470839652000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"0d55a3c31a4ac4f40525babf444de22aa6353aee","modified":1470839652000},{"_id":"themes/apollo/.git/objects/pack/pack-86041d8bdb0ec65dc1a13b6e9526b4261984472b.pack","hash":"b47756250a5bf29ba79a078eb0610c821cfaaaf6","modified":1470839652000},{"_id":"public/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1470841219631},{"_id":"themes/apollo/layout/_partial/social.ejs","hash":"453dc96825db627fb4eb7e266f2979b8e5466f89","modified":1470840886000},{"_id":"themes/apollo/source/css/_partial/social.styl","hash":"2e2ff58e79e3860c3a21ec34a357e3abf2274c66","modified":1470840837000},{"_id":"source/_posts/2014-08-22-map-with-gsi.md","hash":"4d5cf4959fc28cb52a7275b445f8295704dc1f1e","modified":1470876132000},{"_id":"source/_posts/2015-03-09-deploy-to-digital-ocean.md","hash":"5ff2f496b6951779a192c0b50cbd66bb00aff39f","modified":1470876151000},{"_id":"source/_posts/2015-03-09-irkitjs.md","hash":"ce350e8e9458f8dd0db31af98650f6f14325e42b","modified":1470876171000},{"_id":"source/_posts/2015-03-09-tails-about-published-grunt-plugin.md","hash":"d605e8125b2f984a7dba919c63deb985e37846c9","modified":1470876184000},{"_id":"source/_posts/2015-03-09-vuejs-plus-jquery-plugin.md","hash":"f1c66329b00af52af394cc7b2e3a8f87cda47490","modified":1470876196000},{"_id":"source/_posts/2015-03-10-pebble-irkit.md","hash":"c544e8d31accd984caa30373f2803a013aaecd4d","modified":1470876231000},{"_id":"source/_posts/2015-03-12-greeting.md","hash":"200580fa35640a1bfeef131602b08308e1ee0154","modified":1470876409000},{"_id":"source/_posts/2015-03-17-git-diff-and-archive.md","hash":"6fe4a60e54d0463542c4f9315c3803a515ea5c0c","modified":1470876243000},{"_id":"source/_posts/2015-03-19-modify-yml.md","hash":"cf2547e97c33b9348e24fee91370797431a9a9bd","modified":1470876308000},{"_id":"source/_posts/2015-03-23-kindlizeit.md","hash":"afb6eede6f1a1f3b28cf9978332acda30969c5dd","modified":1470876323000},{"_id":"source/_posts/2015-04-07-gulp-newer.md","hash":"15340cbe619f19c63953e6b4e013f79c39d28ee3","modified":1470876333000},{"_id":"source/_posts/2015-04-10-react-server-render.md","hash":"ca2ce2aab4435089e1bdbd7c69f99995a7663316","modified":1470876344000},{"_id":"source/_posts/2015-04-13-promise-or-defferd.md","hash":"ead694edf371fdd0501d4b793f541c4c064df9dc","modified":1470876353000},{"_id":"source/_posts/2015-04-15-private-npm.md","hash":"74117c64aecabd4b635b2b9d2f5b7b50954658c7","modified":1470876366000},{"_id":"source/_posts/2015-05-13-why-use-task-runner.md","hash":"662d06b82fe77567d3ee9fa93d39400464169b2d","modified":1470876384000},{"_id":"source/_posts/2015-06-04-behavior-of-object-assign.md","hash":"aff1842d527d9ed117793cd6747efe511eb9d367","modified":1470876397000},{"_id":"source/_posts/2016-08-10-type-safe-react-component-with-typescript.md","hash":"761c7c409e119529a592d26496c7f077150d99b1","modified":1470874997000},{"_id":"public/2015/06/04/2015-06-04-behavior-of-object-assign/index.html","hash":"5dc565463469d3e2c5ecce26252c3e14a77ad668","modified":1470877312066},{"_id":"public/2015/04/15/2015-04-15-private-npm/index.html","hash":"8faab28a13b5e924f70d90faae228f95318d7b7e","modified":1470877312066},{"_id":"public/2015/04/13/2015-04-13-promise-or-defferd/index.html","hash":"44c11ad87b673c97bb3582976a15a4eac02048bf","modified":1470877312066},{"_id":"public/2015/04/12/2015-04-07-gulp-newer/index.html","hash":"ac086f4929c5033c702604853f95c30ae8423198","modified":1470877312067},{"_id":"public/2015/04/10/2015-04-10-react-server-render/index.html","hash":"f626ba4e70b1c47e5ad4955b61bf0b342cf3ab75","modified":1470877312067},{"_id":"public/2015/03/30/2015-03-23-kindlizeit/index.html","hash":"fc3d6efa23673fc485a7e75f46aee4830e7405d8","modified":1470877312067},{"_id":"public/2015/03/19/2015-03-19-modify-yml/index.html","hash":"0ee998159f10b453f513b2347f8776eee26bcb26","modified":1470877312067},{"_id":"public/2015/03/17/2015-03-17-git-diff-and-archive/index.html","hash":"f7cefc7788d3fd26c12fdfb5f9173078ec93fd12","modified":1470877312067},{"_id":"public/2015/03/12/2015-03-12-greeting/index.html","hash":"13edd5736d84c51f1012a78f9cc7262744164334","modified":1470877312067},{"_id":"public/2015/03/09/2015-03-09-vuejs-plus-jquery-plugin/index.html","hash":"6b257bffd9376fd0d9c2557fdcef991b8f4b9c55","modified":1470877312067},{"_id":"public/2015/02/12/2015-03-09-tails-about-published-grunt-plugin/index.html","hash":"ceb741b5fd7cff3b0495bae10e33b9055c22f6fc","modified":1470877312067},{"_id":"public/2014/12/23/2015-03-09-deploy-to-digital-ocean/index.html","hash":"0e271847ef9c0c910f5dcdf66ab0cafee2225e61","modified":1470877312067},{"_id":"public/2014/09/25/2015-03-09-irkitjs/index.html","hash":"bf83abac1eae8fca8f6aa5df2f4fe16a6c28e325","modified":1470877312068},{"_id":"public/2014/08/28/2015-03-10-pebble-irkit/index.html","hash":"86467cebd6ef547be2e244b361a156afbcc95595","modified":1470877312068},{"_id":"public/archives/page/2/index.html","hash":"25d1c5bbfb26bd8b78efc5234a722231b19cd4ab","modified":1470877312068},{"_id":"public/archives/2014/index.html","hash":"2d5114d22e154378df649a3d1205f524cdf061c7","modified":1470877312068},{"_id":"public/archives/2014/08/index.html","hash":"0f56db42b6c14acf767eea5f623323bef23f4575","modified":1470877312068},{"_id":"public/archives/2014/09/index.html","hash":"0fd56de38046f0ea8e1834fe60f4a9faf0c02e6f","modified":1470877312068},{"_id":"public/archives/2014/12/index.html","hash":"b7d0a280f4545a1e2e640e360beaa4d575b77464","modified":1470877312068},{"_id":"public/archives/2015/index.html","hash":"a18d4a4b519a7b0064aeb368580cd464a6b1c1f1","modified":1470877312068},{"_id":"public/archives/2015/page/2/index.html","hash":"4b5dfded53a703d73137f4900cef6f946f8b6c5a","modified":1470877312068},{"_id":"public/archives/2015/02/index.html","hash":"8028de197fd7a64dff04df342d5880a72ef20225","modified":1470877312069},{"_id":"public/archives/2015/03/index.html","hash":"44cad274c137b4d6c044da183937b76d348e9a44","modified":1470877312069},{"_id":"public/archives/2015/04/index.html","hash":"61576b8a9cf8df149763ae2875bead707c761223","modified":1470877312069},{"_id":"public/archives/2015/05/index.html","hash":"a7e9a33b62cae8b744fb52f0a87a995cc301c801","modified":1470877312070},{"_id":"public/archives/2015/06/index.html","hash":"f07fc17d874c5cffb1e52c3cef135281948c8991","modified":1470877312070},{"_id":"public/tags/server/index.html","hash":"ec0d009fc700d5d5e4a1917b4de763f6d3f7196b","modified":1470877312071},{"_id":"public/tags/digitalocean/index.html","hash":"35c599ebe7f40d117b29dfd3bbfe6e70b8683112","modified":1470877312071},{"_id":"public/tags/git/index.html","hash":"e0a13c1d13939cd70751d79ca2305f0b10388ecb","modified":1470877312072},{"_id":"public/tags/node-js/index.html","hash":"ff1b4cf8d48a5d53cb80cc04b12770a792cf0d07","modified":1470877312072},{"_id":"public/tags/node-js/page/2/index.html","hash":"4a2099c0aa7658f5c43c3bb355002a60250f7f39","modified":1470877312073},{"_id":"public/tags/openlayers/index.html","hash":"b4981b55565e7bdf022113a8543cef5d857333b7","modified":1470877312073},{"_id":"public/tags/irkit/index.html","hash":"dccb9bd9bba34bc5a725409d0095b1049c3a0801","modified":1470877312073},{"_id":"public/tags/grunt/index.html","hash":"250afab42ee1213d0930d041e0b7fd6e1213326d","modified":1470877312073},{"_id":"public/tags/npm/index.html","hash":"e636ec12dd3b0480e76e46c6277fa1222a715acd","modified":1470877312073},{"_id":"public/tags/vue-js/index.html","hash":"fe4f7acd63fb061680a235a87c9d60b543972607","modified":1470877312073},{"_id":"public/tags/jQuery/index.html","hash":"f640558fcbb58fd7b3dcd1347506725cfefd5c4b","modified":1470877312073},{"_id":"public/tags/pebble/index.html","hash":"08bcaaa289011dac8789d0c9985c5e4450a77b66","modified":1470877312074},{"_id":"public/tags/pebble-js/index.html","hash":"6dada9b79ab4528fb3ad8f3093ac09156e995034","modified":1470877312074},{"_id":"public/tags/circleCI/index.html","hash":"ea1994844482357a05ed7cfb8fb7186d83ca9256","modified":1470877312074},{"_id":"public/tags/mongoDB/index.html","hash":"92264bb36ce9b8cfa2785d016c957b75fd7df9d9","modified":1470877312074},{"_id":"public/tags/angular-js/index.html","hash":"b73a84297fbc244fabe4fff4d3c74936d49849cc","modified":1470877312074},{"_id":"public/tags/express/index.html","hash":"67a50e6075eed80b5d23e48ae1aeb564623806c3","modified":1470877312074},{"_id":"public/tags/kindle/index.html","hash":"f19ca053c5e73837053c1f54f9add53d72be71aa","modified":1470877312074},{"_id":"public/tags/gulp/index.html","hash":"072814dc50c49abb4fb3526d6cb1e580cddde30d","modified":1470877312074},{"_id":"public/tags/browser/index.html","hash":"effa64a74f938f6a8596f1e793018367af0b4b40","modified":1470877312074},{"_id":"public/tags/coffeescript/index.html","hash":"dd5abb3e28070379f98013eb04edbb70e66245ad","modified":1470877312075},{"_id":"public/tags/react-js/index.html","hash":"99a045f24cf77529bfa089508128d87c47ba9f6a","modified":1470877312075},{"_id":"public/tags/promise/index.html","hash":"cf480eacacd353c0f52d721c65587cdeaec143c5","modified":1470877312075},{"_id":"public/tags/es6/index.html","hash":"06b965263856a42202de01e861e3206b5daab952","modified":1470877312075},{"_id":"public/tags/gulp-js/index.html","hash":"4efde917e13ab2ca3288f7d184c6acaa9b0e8c3a","modified":1470877312075},{"_id":"public/tags/grunt-js/index.html","hash":"da0341fecdb46ba7789e744767a040d8a27b1255","modified":1470877312075},{"_id":"public/tags/sass/index.html","hash":"fefa9c0f48269e48a99c84993c88ddd4f6f3c0e2","modified":1470877312075},{"_id":"public/tags/jade/index.html","hash":"5bc621c7a43410c785a737075e14d2d92ab4c839","modified":1470877312075},{"_id":"public/2016/08/10/2016-08-10-type-safe-react-component-with-typescript/index.html","hash":"78f363880739ecd074dd18e63e628494e5a3760a","modified":1470877312075},{"_id":"public/2015/05/13/2015-05-13-why-use-task-runner/index.html","hash":"9ecbed4bb3cfb8c404f6a69f5d39153b3e837732","modified":1470877312075},{"_id":"public/2014/08/22/2014-08-22-map-with-gsi/index.html","hash":"16d4560bdc644e8936f4ad6cc1c9fa59a0ef551e","modified":1470877312076},{"_id":"public/page/2/index.html","hash":"f4f59fd147e13ee02642c1094cc391be22ee6690","modified":1470877312076},{"_id":"themes/apollo/.git/COMMIT_EDITMSG","hash":"ff96c8b21a863cb54f3ef10a0de803f6db3fcdf1","modified":1470877352000},{"_id":"themes/apollo/.git/objects/1a/90b80e19fe629248eb52ccab862a5777cc85bb","hash":"352a4a129f02a874ceefbbf38bc1133fa6f65f16","modified":1470877345000},{"_id":"themes/apollo/.git/objects/67/069b6e805f17f01db44bad5eddf635b5fce1e8","hash":"9b72801cdd39accec3d0333c4c34a5c17e9b04fa","modified":1470877345000},{"_id":"themes/apollo/.git/objects/0f/d21160c56d4bb30cd230d0eaf8093df6a0e453","hash":"c2b1af6d599582968161f936e6012c191813df78","modified":1470877348000},{"_id":"themes/apollo/.git/objects/0d/0da527f7eeaeaddc54df27ae5146ea9d37036b","hash":"010e40b74c7ce5f6521a39951cb6f248c6c76c79","modified":1470877348000},{"_id":"themes/apollo/.git/objects/68/e9e626a34416660d37edaf8fdcd546f64fb4b7","hash":"7add7bdf0801b1c32fc35e22f2b020c667412652","modified":1470877345000},{"_id":"themes/apollo/.git/objects/99/8be17f4ddfe3e6c23123e86060654c0952be84","hash":"30f7d00eb50eef8270fdf4ab3a10415ef6698e9a","modified":1470877348000},{"_id":"themes/apollo/.git/objects/8d/9881dab9f5bedb9751123eb13fccc777d31fae","hash":"24873a33520d8049ddd0f3728361d35041bc6d40","modified":1470877348000},{"_id":"themes/apollo/.git/objects/a5/e0150bbf7e54bd4d859ab70e9c0317dec4dc6a","hash":"7c6d65fc0f32043e61ecec3161ad93050b2a28d2","modified":1470877352000},{"_id":"themes/apollo/.git/objects/a7/aabdfef0b60d7d32eaab67ca8d1f1c92218d51","hash":"0bac55c7c49ab03227fab0ea70e800bd1436e03f","modified":1470877348000},{"_id":"themes/apollo/.git/objects/b3/1316c9e7a3a7582bcffbceb244f49c96502846","hash":"15496ced9795454c3b5b7020dc26e3187421e6b1","modified":1470877345000},{"_id":"themes/apollo/.git/objects/ba/743e1aa61250267612d00b8a16dbaf1be20ad3","hash":"710a167d33bd600c1f7fab6096863cd6eb541fbb","modified":1470877345000},{"_id":"themes/apollo/.git/objects/d5/24a10a858d225de6d9dbf686c991c10281a144","hash":"8c442b43a0fe01a43d83cc7ba42294934dc665ed","modified":1470877348000},{"_id":"themes/apollo/.git/objects/d9/aecdd442a9e841434c22b6647c6ba974ad41a8","hash":"921a6d9fb207864e30a82c054c784e77f856091b","modified":1470877345000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"DigitalOceanでNode.jsのサーバーを立てる初期設定メモ","id":"deploy-to-digital-ocean","date":"2014-12-23T02:58:02.000Z","_content":"\n## ターミナルからログイン\n```shell\nssh root@IP\n```\n\n----------\n\n## Ubuntu版\n\n```shell\nsudo apt-get update\nsudo apt-get install nodejs\nsudo apt-get install npm\nsudo apt-get install git\nnpm install -g bower\n```\n\n----------\n\n## CentOS版\n\n```shell\nyum update\ncurl -sL https://rpm.nodesource.com/setup | bash -\nyum install -y nodejs\nyum install git\nnpm install -g bower\n```\n\n### gitデプロイつなぎ込み\n[解説記事](https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps)\n\n\n1. `/var/repo/site.git/` を作成して `git init —bare`\n2. `/var/repo/site.git/hooks/` へ移動\n3. `cat > post-receive` で`post-receive`ファイルを作成\n4. `vim`モードにするなどして以下記入`:x`で保存\n```bash\n#!/bin/sh\ngit --work-tree=/var/www/ディレクトリ名 --git-dir=/var/repo/site.git checkout -f\n```\n\n5. `chmod +x post-receive`\n\n6. ローカルレポジトリにgitパスをつなぎ込み\n```shell\ngit remote add product ssh://root@IP/var/repo/site.git\n```\n\n7. `SSHキー`の登録（新規アカウント作成時のみ）\n\n8. プッシュしてデプロイ\n\n### サーバー永続化\n`npm`の`pm2`をインストール\n`pm2 start app.js` でサーバー永続化\n","source":"_posts/2015-03-09-deploy-to-digital-ocean.md","raw":"---\ntitle: \"DigitalOceanでNode.jsのサーバーを立てる初期設定メモ\"\nid: deploy-to-digital-ocean\ndate: 2014-12-23 11:58:02 +0900\ntags:\n  - server\n  - digitalocean\n  - git\n  - node.js\n---\n\n## ターミナルからログイン\n```shell\nssh root@IP\n```\n\n----------\n\n## Ubuntu版\n\n```shell\nsudo apt-get update\nsudo apt-get install nodejs\nsudo apt-get install npm\nsudo apt-get install git\nnpm install -g bower\n```\n\n----------\n\n## CentOS版\n\n```shell\nyum update\ncurl -sL https://rpm.nodesource.com/setup | bash -\nyum install -y nodejs\nyum install git\nnpm install -g bower\n```\n\n### gitデプロイつなぎ込み\n[解説記事](https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps)\n\n\n1. `/var/repo/site.git/` を作成して `git init —bare`\n2. `/var/repo/site.git/hooks/` へ移動\n3. `cat > post-receive` で`post-receive`ファイルを作成\n4. `vim`モードにするなどして以下記入`:x`で保存\n```bash\n#!/bin/sh\ngit --work-tree=/var/www/ディレクトリ名 --git-dir=/var/repo/site.git checkout -f\n```\n\n5. `chmod +x post-receive`\n\n6. ローカルレポジトリにgitパスをつなぎ込み\n```shell\ngit remote add product ssh://root@IP/var/repo/site.git\n```\n\n7. `SSHキー`の登録（新規アカウント作成時のみ）\n\n8. プッシュしてデプロイ\n\n### サーバー永続化\n`npm`の`pm2`をインストール\n`pm2 start app.js` でサーバー永続化\n","slug":"2015-03-09-deploy-to-digital-ocean","published":1,"updated":"2016-08-11T00:42:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgib0000g3kqf06llxoz","content":"<h2 id=\"ターミナルからログイン\"><a href=\"#ターミナルからログイン\" class=\"headerlink\" title=\"ターミナルからログイン\"></a>ターミナルからログイン</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@IP</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Ubuntu版\"><a href=\"#Ubuntu版\" class=\"headerlink\" title=\"Ubuntu版\"></a>Ubuntu版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install nodejs</div><div class=\"line\">sudo apt-get install npm</div><div class=\"line\">sudo apt-get install git</div><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CentOS版\"><a href=\"#CentOS版\" class=\"headerlink\" title=\"CentOS版\"></a>CentOS版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update</div><div class=\"line\">curl -sL https://rpm.nodesource.com/setup | bash -</div><div class=\"line\">yum install -y nodejs</div><div class=\"line\">yum install git</div><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure>\n<h3 id=\"gitデプロイつなぎ込み\"><a href=\"#gitデプロイつなぎ込み\" class=\"headerlink\" title=\"gitデプロイつなぎ込み\"></a>gitデプロイつなぎ込み</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps\" target=\"_blank\" rel=\"external\">解説記事</a></p>\n<ol>\n<li><code>/var/repo/site.git/</code> を作成して <code>git init —bare</code></li>\n<li><code>/var/repo/site.git/hooks/</code> へ移動</li>\n<li><code>cat &gt; post-receive</code> で<code>post-receive</code>ファイルを作成</li>\n<li><p><code>vim</code>モードにするなどして以下記入<code>:x</code>で保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">git --work-tree=/var/www/ディレクトリ名 --git-dir=/var/repo/site.git checkout <span class=\"_\">-f</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>chmod +x post-receive</code></p>\n</li>\n<li><p>ローカルレポジトリにgitパスをつなぎ込み</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add product ssh://root@IP/var/repo/site.git</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>SSHキー</code>の登録（新規アカウント作成時のみ）</p>\n</li>\n<li><p>プッシュしてデプロイ</p>\n</li>\n</ol>\n<h3 id=\"サーバー永続化\"><a href=\"#サーバー永続化\" class=\"headerlink\" title=\"サーバー永続化\"></a>サーバー永続化</h3><p><code>npm</code>の<code>pm2</code>をインストール<br><code>pm2 start app.js</code> でサーバー永続化</p>\n","excerpt":"","more":"<h2 id=\"ターミナルからログイン\"><a href=\"#ターミナルからログイン\" class=\"headerlink\" title=\"ターミナルからログイン\"></a>ターミナルからログイン</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@IP</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Ubuntu版\"><a href=\"#Ubuntu版\" class=\"headerlink\" title=\"Ubuntu版\"></a>Ubuntu版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install nodejs</div><div class=\"line\">sudo apt-get install npm</div><div class=\"line\">sudo apt-get install git</div><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CentOS版\"><a href=\"#CentOS版\" class=\"headerlink\" title=\"CentOS版\"></a>CentOS版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update</div><div class=\"line\">curl -sL https://rpm.nodesource.com/setup | bash -</div><div class=\"line\">yum install -y nodejs</div><div class=\"line\">yum install git</div><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure>\n<h3 id=\"gitデプロイつなぎ込み\"><a href=\"#gitデプロイつなぎ込み\" class=\"headerlink\" title=\"gitデプロイつなぎ込み\"></a>gitデプロイつなぎ込み</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps\">解説記事</a></p>\n<ol>\n<li><code>/var/repo/site.git/</code> を作成して <code>git init —bare</code></li>\n<li><code>/var/repo/site.git/hooks/</code> へ移動</li>\n<li><code>cat &gt; post-receive</code> で<code>post-receive</code>ファイルを作成</li>\n<li><p><code>vim</code>モードにするなどして以下記入<code>:x</code>で保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">git --work-tree=/var/www/ディレクトリ名 --git-dir=/var/repo/site.git checkout <span class=\"_\">-f</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>chmod +x post-receive</code></p>\n</li>\n<li><p>ローカルレポジトリにgitパスをつなぎ込み</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add product ssh://root@IP/var/repo/site.git</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>SSHキー</code>の登録（新規アカウント作成時のみ）</p>\n</li>\n<li><p>プッシュしてデプロイ</p>\n</li>\n</ol>\n<h3 id=\"サーバー永続化\"><a href=\"#サーバー永続化\" class=\"headerlink\" title=\"サーバー永続化\"></a>サーバー永続化</h3><p><code>npm</code>の<code>pm2</code>をインストール<br><code>pm2 start app.js</code> でサーバー永続化</p>\n"},{"title":"Webデザイナーでも出来たGoogle Mapsを使わずに地図を表示させる方法","id":"map-with-gsi","date":"2014-08-22T05:01:04.000Z","_content":"\n##前置き\n1年ほど前に、政府がGoogle Mapsを使わないように要請したという事が話題になりました。\n[ハフィントン・ポスト「グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請」](http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html)\n\nクライアントが政府筋の案件で地図を使わなくてはいけないなんて時に、手軽なGoogle Mapsが利用出来ないのは困りますね。\nそんな時は[国土交通省-国土地理院](http://www.gsi.go.jp/)が提供している「地理院地図（電子国土Web.NEXT）」を使う事になるでしょう。\n\n以前はサイト内で詳細な作成例を提供していたのですが、2014年7月にバージョンアップが行われた際に、\nそこら辺のドキュメントもアーカイブされてしまったようです。\nアーカイブ化前に実装した経験をもとに、「地理院地図APIから地図タイルを取得して、任意の座標に画像を表示させる」方法をポストしたいと思います。\n\n------\n\n##手順\n\n1. OpenLayersライブラリを読み込む\n2. 「DenshiKokudo Web API for OpenLayers」を読み込む\n3. 背景地図レイヤーを作成\n4. 任意の座標に画像レイヤーを作成\n\n------\n\n##コード\n\n```html\n<script type=\"text/javascript\" src=\"http://portal.cyberjapan.jp/sys/OpenLayers-2.11/OpenLayers.js\" charset=\"UTF-8\"></script>\n<script type=\"text/javascript\" src=\"http://portal.cyberjapan.jp/sys/v4/webtis/webtis_v4.js\"></script>\n<script>\n  function init() {\n    var map = null; //地図インスタンス\n    initCX = 139; //初期の経度\n    initCY = 38.5; //初期の緯度\n    initZoomLv = 10; //初期のズームレベル\n    projection900913 = new OpenLayers.Projection(\"EPSG:900913\"); //真球メルカトル投影を定義\n    projection4326 = new OpenLayers.Projection(\"EPSG:4326\"); //等経緯度投影を定義\n    selectControl; //SelectFeature\n    maxExtent = new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508); //真球メルカトル投影のときの最大範囲(単位はm)\n    restrictedExtent = maxExtent.clone(); //真球メルカトル投影のときの最大範囲に範囲を制限\n    maxResolution = 156543.0339; //真球メルカトル投影のときの最大解像度\n    icon = '表示させる画像要素のパス';\n\n    //地図表示画面のオプション設定\n    var options = {\n      controls: [ //「controls」を設定することで、デフォルトのコントロールを破棄してコントロールを再設定\n        new OpenLayers.Control.Navigation({\n          mouseWheelOptions: {\n            interval: 100\n          }\n        }), //地図マウスイベントのハンドル設定。\n        new OpenLayers.Control.PanZoomBar(), //左上のパンズームバーを設定\n        new OpenLayers.Control.KeyboardDefaults(), //キーボードをデフォルトに設定\n        new OpenLayers.Control.Attribution() //国土地理院著作表示\n      ],\n      projection: projection900913, //背景地図の地理座標系\n      displayProjection: projection4326, //表示の地理座標系\n      units: \"m\", //背景地図の単位\n      maxResolution: maxResolution, //背景地図の最大解像度\n      maxExtent: maxExtent, //背景地図の最大範囲\n      restrictedExtent: restrictedExtent //背景地図の表示制限範囲\n    };\n\n    //OpenLayers APIのMapクラスからインスタンスを作成\n    map = new OpenLayers.Map('map', options);\n\n    //スケールバーコントロール表示(最大ピクセル150、下段単位無、EPSG:900913)\n    map.addControl(new OpenLayers.Control.ScaleLine({\n      maxWidth: 150,\n      bottomOutUnits: \"\",\n      bottomInUnits: \"\",\n      geodesic: true\n    }));\n\n    //電子国土WebシステムVer.4背景地図レイヤーインスタンスを作成。データセットは未指定で、デフォルトデータセットを利用\n    webtisMap = new webtis.Layer.BaseMap(\"webtismap\");\n\n    //背景地図レイヤーをMapに追加\n    map.addLayer(webtisMap);\n\n\n    //***ここからベクターレイヤーの記述***\n\n    //ベクターレイヤーの作成\n    myVectorLayer = new OpenLayers.Layer.Vector(\"layername\");\n\n    //ベクターレイヤーの座標を定義 (for文を回すと、複数の座標にアイコンを定義できます)\n    myVectorLayer.addFeatures([new OpenLayers.Feature.Vector(\n      new OpenLayers.Geometry.Point(initCX, initCY).transform(projection4326, projection900913)\n      // new OpenLayers.Geometry.Point(経度,緯度).transform(projection4326,projection900913)\n      // 緯度と経度を任意の数値に変えると、初期表示位置とは別の場所にアイコン画像を表示できる\n    )]);\n\n    vector_style = new OpenLayers.Style({\n      'externalGraphic': icon,\n      'pointRadius': 16\n    });\n\n    myVectorLayer.styleMap = new OpenLayers.StyleMap({\n      'default': vector_style\n    });\n\n    //ベクターレイヤーをMapに追加\n    map.addLayer(myVectorLayer);\n\n    //***ここまでベクターレイヤーの記述***\n\n\n    // MapにSelectFeatureコントロールを追加\n    selectControl = new OpenLayers.Control.SelectFeature(myVectorLayer);\n    map.addControl(selectControl);\n    selectControl.activate();\n\n    //初期の中心座標を指定（経緯度で入力して、内部的に真球メルカトル座標に変換して表示）\n    map.setCenter(new OpenLayers.LonLat(initCX, initCY).transform(projection4326, projection900913), initZoomLv);\n  }\n\n  init();\n</script>\n\n<div id=\"map\"></div>\n```\n","source":"_posts/2014-08-22-map-with-gsi.md","raw":"---\ntitle: \"Webデザイナーでも出来たGoogle Mapsを使わずに地図を表示させる方法\"\nid: map-with-gsi\ndate: 2014-08-22 14:01:04\ncategories:\ntags:\n  - javascript\n  - openlayers\n\n---\n\n##前置き\n1年ほど前に、政府がGoogle Mapsを使わないように要請したという事が話題になりました。\n[ハフィントン・ポスト「グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請」](http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html)\n\nクライアントが政府筋の案件で地図を使わなくてはいけないなんて時に、手軽なGoogle Mapsが利用出来ないのは困りますね。\nそんな時は[国土交通省-国土地理院](http://www.gsi.go.jp/)が提供している「地理院地図（電子国土Web.NEXT）」を使う事になるでしょう。\n\n以前はサイト内で詳細な作成例を提供していたのですが、2014年7月にバージョンアップが行われた際に、\nそこら辺のドキュメントもアーカイブされてしまったようです。\nアーカイブ化前に実装した経験をもとに、「地理院地図APIから地図タイルを取得して、任意の座標に画像を表示させる」方法をポストしたいと思います。\n\n------\n\n##手順\n\n1. OpenLayersライブラリを読み込む\n2. 「DenshiKokudo Web API for OpenLayers」を読み込む\n3. 背景地図レイヤーを作成\n4. 任意の座標に画像レイヤーを作成\n\n------\n\n##コード\n\n```html\n<script type=\"text/javascript\" src=\"http://portal.cyberjapan.jp/sys/OpenLayers-2.11/OpenLayers.js\" charset=\"UTF-8\"></script>\n<script type=\"text/javascript\" src=\"http://portal.cyberjapan.jp/sys/v4/webtis/webtis_v4.js\"></script>\n<script>\n  function init() {\n    var map = null; //地図インスタンス\n    initCX = 139; //初期の経度\n    initCY = 38.5; //初期の緯度\n    initZoomLv = 10; //初期のズームレベル\n    projection900913 = new OpenLayers.Projection(\"EPSG:900913\"); //真球メルカトル投影を定義\n    projection4326 = new OpenLayers.Projection(\"EPSG:4326\"); //等経緯度投影を定義\n    selectControl; //SelectFeature\n    maxExtent = new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508); //真球メルカトル投影のときの最大範囲(単位はm)\n    restrictedExtent = maxExtent.clone(); //真球メルカトル投影のときの最大範囲に範囲を制限\n    maxResolution = 156543.0339; //真球メルカトル投影のときの最大解像度\n    icon = '表示させる画像要素のパス';\n\n    //地図表示画面のオプション設定\n    var options = {\n      controls: [ //「controls」を設定することで、デフォルトのコントロールを破棄してコントロールを再設定\n        new OpenLayers.Control.Navigation({\n          mouseWheelOptions: {\n            interval: 100\n          }\n        }), //地図マウスイベントのハンドル設定。\n        new OpenLayers.Control.PanZoomBar(), //左上のパンズームバーを設定\n        new OpenLayers.Control.KeyboardDefaults(), //キーボードをデフォルトに設定\n        new OpenLayers.Control.Attribution() //国土地理院著作表示\n      ],\n      projection: projection900913, //背景地図の地理座標系\n      displayProjection: projection4326, //表示の地理座標系\n      units: \"m\", //背景地図の単位\n      maxResolution: maxResolution, //背景地図の最大解像度\n      maxExtent: maxExtent, //背景地図の最大範囲\n      restrictedExtent: restrictedExtent //背景地図の表示制限範囲\n    };\n\n    //OpenLayers APIのMapクラスからインスタンスを作成\n    map = new OpenLayers.Map('map', options);\n\n    //スケールバーコントロール表示(最大ピクセル150、下段単位無、EPSG:900913)\n    map.addControl(new OpenLayers.Control.ScaleLine({\n      maxWidth: 150,\n      bottomOutUnits: \"\",\n      bottomInUnits: \"\",\n      geodesic: true\n    }));\n\n    //電子国土WebシステムVer.4背景地図レイヤーインスタンスを作成。データセットは未指定で、デフォルトデータセットを利用\n    webtisMap = new webtis.Layer.BaseMap(\"webtismap\");\n\n    //背景地図レイヤーをMapに追加\n    map.addLayer(webtisMap);\n\n\n    //***ここからベクターレイヤーの記述***\n\n    //ベクターレイヤーの作成\n    myVectorLayer = new OpenLayers.Layer.Vector(\"layername\");\n\n    //ベクターレイヤーの座標を定義 (for文を回すと、複数の座標にアイコンを定義できます)\n    myVectorLayer.addFeatures([new OpenLayers.Feature.Vector(\n      new OpenLayers.Geometry.Point(initCX, initCY).transform(projection4326, projection900913)\n      // new OpenLayers.Geometry.Point(経度,緯度).transform(projection4326,projection900913)\n      // 緯度と経度を任意の数値に変えると、初期表示位置とは別の場所にアイコン画像を表示できる\n    )]);\n\n    vector_style = new OpenLayers.Style({\n      'externalGraphic': icon,\n      'pointRadius': 16\n    });\n\n    myVectorLayer.styleMap = new OpenLayers.StyleMap({\n      'default': vector_style\n    });\n\n    //ベクターレイヤーをMapに追加\n    map.addLayer(myVectorLayer);\n\n    //***ここまでベクターレイヤーの記述***\n\n\n    // MapにSelectFeatureコントロールを追加\n    selectControl = new OpenLayers.Control.SelectFeature(myVectorLayer);\n    map.addControl(selectControl);\n    selectControl.activate();\n\n    //初期の中心座標を指定（経緯度で入力して、内部的に真球メルカトル座標に変換して表示）\n    map.setCenter(new OpenLayers.LonLat(initCX, initCY).transform(projection4326, projection900913), initZoomLv);\n  }\n\n  init();\n</script>\n\n<div id=\"map\"></div>\n```\n","slug":"2014-08-22-map-with-gsi","published":1,"updated":"2016-08-11T00:42:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgig0001g3kqupsvqr53","content":"<p>##前置き<br>1年ほど前に、政府がGoogle Mapsを使わないように要請したという事が話題になりました。<br><a href=\"http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html\" target=\"_blank\" rel=\"external\">ハフィントン・ポスト「グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請」</a></p>\n<p>クライアントが政府筋の案件で地図を使わなくてはいけないなんて時に、手軽なGoogle Mapsが利用出来ないのは困りますね。<br>そんな時は<a href=\"http://www.gsi.go.jp/\" target=\"_blank\" rel=\"external\">国土交通省-国土地理院</a>が提供している「地理院地図（電子国土Web.NEXT）」を使う事になるでしょう。</p>\n<p>以前はサイト内で詳細な作成例を提供していたのですが、2014年7月にバージョンアップが行われた際に、<br>そこら辺のドキュメントもアーカイブされてしまったようです。<br>アーカイブ化前に実装した経験をもとに、「地理院地図APIから地図タイルを取得して、任意の座標に画像を表示させる」方法をポストしたいと思います。</p>\n<hr>\n<p>##手順</p>\n<ol>\n<li>OpenLayersライブラリを読み込む</li>\n<li>「DenshiKokudo Web API for OpenLayers」を読み込む</li>\n<li>背景地図レイヤーを作成</li>\n<li>任意の座標に画像レイヤーを作成</li>\n</ol>\n<hr>\n<p>##コード</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://portal.cyberjapan.jp/sys/OpenLayers-2.11/OpenLayers.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://portal.cyberjapan.jp/sys/v4/webtis/webtis_v4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">  function init() &#123;</div><div class=\"line\">    var map = null; //地図インスタンス</div><div class=\"line\">    initCX = 139; //初期の経度</div><div class=\"line\">    initCY = 38.5; //初期の緯度</div><div class=\"line\">    initZoomLv = 10; //初期のズームレベル</div><div class=\"line\">    projection900913 = new OpenLayers.Projection(\"EPSG:900913\"); //真球メルカトル投影を定義</div><div class=\"line\">    projection4326 = new OpenLayers.Projection(\"EPSG:4326\"); //等経緯度投影を定義</div><div class=\"line\">    selectControl; //SelectFeature</div><div class=\"line\">    maxExtent = new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508); //真球メルカトル投影のときの最大範囲(単位はm)</div><div class=\"line\">    restrictedExtent = maxExtent.clone(); //真球メルカトル投影のときの最大範囲に範囲を制限</div><div class=\"line\">    maxResolution = 156543.0339; //真球メルカトル投影のときの最大解像度</div><div class=\"line\">    icon = '表示させる画像要素のパス';</div><div class=\"line\"></div><div class=\"line\">    //地図表示画面のオプション設定</div><div class=\"line\">    var options = &#123;</div><div class=\"line\">      controls: [ //「controls」を設定することで、デフォルトのコントロールを破棄してコントロールを再設定</div><div class=\"line\">        new OpenLayers.Control.Navigation(&#123;</div><div class=\"line\">          mouseWheelOptions: &#123;</div><div class=\"line\">            interval: 100</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;), //地図マウスイベントのハンドル設定。</div><div class=\"line\">        new OpenLayers.Control.PanZoomBar(), //左上のパンズームバーを設定</div><div class=\"line\">        new OpenLayers.Control.KeyboardDefaults(), //キーボードをデフォルトに設定</div><div class=\"line\">        new OpenLayers.Control.Attribution() //国土地理院著作表示</div><div class=\"line\">      ],</div><div class=\"line\">      projection: projection900913, //背景地図の地理座標系</div><div class=\"line\">      displayProjection: projection4326, //表示の地理座標系</div><div class=\"line\">      units: \"m\", //背景地図の単位</div><div class=\"line\">      maxResolution: maxResolution, //背景地図の最大解像度</div><div class=\"line\">      maxExtent: maxExtent, //背景地図の最大範囲</div><div class=\"line\">      restrictedExtent: restrictedExtent //背景地図の表示制限範囲</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //OpenLayers APIのMapクラスからインスタンスを作成</div><div class=\"line\">    map = new OpenLayers.Map('map', options);</div><div class=\"line\"></div><div class=\"line\">    //スケールバーコントロール表示(最大ピクセル150、下段単位無、EPSG:900913)</div><div class=\"line\">    map.addControl(new OpenLayers.Control.ScaleLine(&#123;</div><div class=\"line\">      maxWidth: 150,</div><div class=\"line\">      bottomOutUnits: \"\",</div><div class=\"line\">      bottomInUnits: \"\",</div><div class=\"line\">      geodesic: true</div><div class=\"line\">    &#125;));</div><div class=\"line\"></div><div class=\"line\">    //電子国土WebシステムVer.4背景地図レイヤーインスタンスを作成。データセットは未指定で、デフォルトデータセットを利用</div><div class=\"line\">    webtisMap = new webtis.Layer.BaseMap(\"webtismap\");</div><div class=\"line\"></div><div class=\"line\">    //背景地図レイヤーをMapに追加</div><div class=\"line\">    map.addLayer(webtisMap);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //***ここからベクターレイヤーの記述***</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーの作成</div><div class=\"line\">    myVectorLayer = new OpenLayers.Layer.Vector(\"layername\");</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーの座標を定義 (for文を回すと、複数の座標にアイコンを定義できます)</div><div class=\"line\">    myVectorLayer.addFeatures([new OpenLayers.Feature.Vector(</div><div class=\"line\">      new OpenLayers.Geometry.Point(initCX, initCY).transform(projection4326, projection900913)</div><div class=\"line\">      // new OpenLayers.Geometry.Point(経度,緯度).transform(projection4326,projection900913)</div><div class=\"line\">      // 緯度と経度を任意の数値に変えると、初期表示位置とは別の場所にアイコン画像を表示できる</div><div class=\"line\">    )]);</div><div class=\"line\"></div><div class=\"line\">    vector_style = new OpenLayers.Style(&#123;</div><div class=\"line\">      'externalGraphic': icon,</div><div class=\"line\">      'pointRadius': 16</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    myVectorLayer.styleMap = new OpenLayers.StyleMap(&#123;</div><div class=\"line\">      'default': vector_style</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーをMapに追加</div><div class=\"line\">    map.addLayer(myVectorLayer);</div><div class=\"line\"></div><div class=\"line\">    //***ここまでベクターレイヤーの記述***</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // MapにSelectFeatureコントロールを追加</div><div class=\"line\">    selectControl = new OpenLayers.Control.SelectFeature(myVectorLayer);</div><div class=\"line\">    map.addControl(selectControl);</div><div class=\"line\">    selectControl.activate();</div><div class=\"line\"></div><div class=\"line\">    //初期の中心座標を指定（経緯度で入力して、内部的に真球メルカトル座標に変換して表示）</div><div class=\"line\">    map.setCenter(new OpenLayers.LonLat(initCX, initCY).transform(projection4326, projection900913), initZoomLv);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  init();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"map\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>##前置き<br>1年ほど前に、政府がGoogle Mapsを使わないように要請したという事が話題になりました。<br><a href=\"http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html\">ハフィントン・ポスト「グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請」</a></p>\n<p>クライアントが政府筋の案件で地図を使わなくてはいけないなんて時に、手軽なGoogle Mapsが利用出来ないのは困りますね。<br>そんな時は<a href=\"http://www.gsi.go.jp/\">国土交通省-国土地理院</a>が提供している「地理院地図（電子国土Web.NEXT）」を使う事になるでしょう。</p>\n<p>以前はサイト内で詳細な作成例を提供していたのですが、2014年7月にバージョンアップが行われた際に、<br>そこら辺のドキュメントもアーカイブされてしまったようです。<br>アーカイブ化前に実装した経験をもとに、「地理院地図APIから地図タイルを取得して、任意の座標に画像を表示させる」方法をポストしたいと思います。</p>\n<hr>\n<p>##手順</p>\n<ol>\n<li>OpenLayersライブラリを読み込む</li>\n<li>「DenshiKokudo Web API for OpenLayers」を読み込む</li>\n<li>背景地図レイヤーを作成</li>\n<li>任意の座標に画像レイヤーを作成</li>\n</ol>\n<hr>\n<p>##コード</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://portal.cyberjapan.jp/sys/OpenLayers-2.11/OpenLayers.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://portal.cyberjapan.jp/sys/v4/webtis/webtis_v4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">  function init() &#123;</div><div class=\"line\">    var map = null; //地図インスタンス</div><div class=\"line\">    initCX = 139; //初期の経度</div><div class=\"line\">    initCY = 38.5; //初期の緯度</div><div class=\"line\">    initZoomLv = 10; //初期のズームレベル</div><div class=\"line\">    projection900913 = new OpenLayers.Projection(\"EPSG:900913\"); //真球メルカトル投影を定義</div><div class=\"line\">    projection4326 = new OpenLayers.Projection(\"EPSG:4326\"); //等経緯度投影を定義</div><div class=\"line\">    selectControl; //SelectFeature</div><div class=\"line\">    maxExtent = new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508); //真球メルカトル投影のときの最大範囲(単位はm)</div><div class=\"line\">    restrictedExtent = maxExtent.clone(); //真球メルカトル投影のときの最大範囲に範囲を制限</div><div class=\"line\">    maxResolution = 156543.0339; //真球メルカトル投影のときの最大解像度</div><div class=\"line\">    icon = '表示させる画像要素のパス';</div><div class=\"line\"></div><div class=\"line\">    //地図表示画面のオプション設定</div><div class=\"line\">    var options = &#123;</div><div class=\"line\">      controls: [ //「controls」を設定することで、デフォルトのコントロールを破棄してコントロールを再設定</div><div class=\"line\">        new OpenLayers.Control.Navigation(&#123;</div><div class=\"line\">          mouseWheelOptions: &#123;</div><div class=\"line\">            interval: 100</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;), //地図マウスイベントのハンドル設定。</div><div class=\"line\">        new OpenLayers.Control.PanZoomBar(), //左上のパンズームバーを設定</div><div class=\"line\">        new OpenLayers.Control.KeyboardDefaults(), //キーボードをデフォルトに設定</div><div class=\"line\">        new OpenLayers.Control.Attribution() //国土地理院著作表示</div><div class=\"line\">      ],</div><div class=\"line\">      projection: projection900913, //背景地図の地理座標系</div><div class=\"line\">      displayProjection: projection4326, //表示の地理座標系</div><div class=\"line\">      units: \"m\", //背景地図の単位</div><div class=\"line\">      maxResolution: maxResolution, //背景地図の最大解像度</div><div class=\"line\">      maxExtent: maxExtent, //背景地図の最大範囲</div><div class=\"line\">      restrictedExtent: restrictedExtent //背景地図の表示制限範囲</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //OpenLayers APIのMapクラスからインスタンスを作成</div><div class=\"line\">    map = new OpenLayers.Map('map', options);</div><div class=\"line\"></div><div class=\"line\">    //スケールバーコントロール表示(最大ピクセル150、下段単位無、EPSG:900913)</div><div class=\"line\">    map.addControl(new OpenLayers.Control.ScaleLine(&#123;</div><div class=\"line\">      maxWidth: 150,</div><div class=\"line\">      bottomOutUnits: \"\",</div><div class=\"line\">      bottomInUnits: \"\",</div><div class=\"line\">      geodesic: true</div><div class=\"line\">    &#125;));</div><div class=\"line\"></div><div class=\"line\">    //電子国土WebシステムVer.4背景地図レイヤーインスタンスを作成。データセットは未指定で、デフォルトデータセットを利用</div><div class=\"line\">    webtisMap = new webtis.Layer.BaseMap(\"webtismap\");</div><div class=\"line\"></div><div class=\"line\">    //背景地図レイヤーをMapに追加</div><div class=\"line\">    map.addLayer(webtisMap);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //***ここからベクターレイヤーの記述***</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーの作成</div><div class=\"line\">    myVectorLayer = new OpenLayers.Layer.Vector(\"layername\");</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーの座標を定義 (for文を回すと、複数の座標にアイコンを定義できます)</div><div class=\"line\">    myVectorLayer.addFeatures([new OpenLayers.Feature.Vector(</div><div class=\"line\">      new OpenLayers.Geometry.Point(initCX, initCY).transform(projection4326, projection900913)</div><div class=\"line\">      // new OpenLayers.Geometry.Point(経度,緯度).transform(projection4326,projection900913)</div><div class=\"line\">      // 緯度と経度を任意の数値に変えると、初期表示位置とは別の場所にアイコン画像を表示できる</div><div class=\"line\">    )]);</div><div class=\"line\"></div><div class=\"line\">    vector_style = new OpenLayers.Style(&#123;</div><div class=\"line\">      'externalGraphic': icon,</div><div class=\"line\">      'pointRadius': 16</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    myVectorLayer.styleMap = new OpenLayers.StyleMap(&#123;</div><div class=\"line\">      'default': vector_style</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    //ベクターレイヤーをMapに追加</div><div class=\"line\">    map.addLayer(myVectorLayer);</div><div class=\"line\"></div><div class=\"line\">    //***ここまでベクターレイヤーの記述***</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    // MapにSelectFeatureコントロールを追加</div><div class=\"line\">    selectControl = new OpenLayers.Control.SelectFeature(myVectorLayer);</div><div class=\"line\">    map.addControl(selectControl);</div><div class=\"line\">    selectControl.activate();</div><div class=\"line\"></div><div class=\"line\">    //初期の中心座標を指定（経緯度で入力して、内部的に真球メルカトル座標に変換して表示）</div><div class=\"line\">    map.setCenter(new OpenLayers.LonLat(initCX, initCY).transform(projection4326, projection900913), initZoomLv);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  init();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"map\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"IRKitをAndroidでも初期設定・操作が出来るWebアプリ「IRKitjs」を作った","id":"create-irkijs","date":"2014-09-25T04:54:59.000Z","_content":"\n##IRKitとは\n\nIRKitは、WiFi機能の付いたオープンソースな赤外線リモコンデバイス。\n家庭のエアコンやテレビ、ライトなど、赤外線で操作できる家電を、WiFiをとおして、\niPhoneやiPadなどから操作できるようにするものです。\n\n- [公式サイト](http://getirkit.com/)\n- [IRKitjsのURL](https://irkitjs.herokuapp.com)\n\n##使い方\n\n###初期設定\n1. 画面の指示に従ってメールアドレスを登録\n2. 受信したメールに記載されたapikeyを、コピーしてきてペーストする\n3. 端末のWi-FiをIRKitに変更する\n4. 普段使っているWi-Fiルーターのセキュリティ、SSID、パスワードを入力する\n5. IRKit機器と普段使っているWi-Fiルーターを紐付けるために使用します。\n6. ルーターの情報をIRKit機器以外の外部に送信することはありません。\n7. 設定完了。 普段使っているWi-Fiルーターに繋ぎ直す。\n\n###リモコンボタン登録\n\n1. 「ボタン追加」をタップ\n2. ボタンの名前を登録\n3. IRKitに向けてリモコンのボタンを押す\n\n###リモコンボタン送信\n- ボタンをタップ-\\>リモコン命令送信\n- ボタンを右にスワイプ-\\>ボタンの順番をソート\n- ボタンを左にスワイプ-\\>ボタンの編集・削除\n\n###初期化\n\n- その他＞全てのデータを初期化をタップ\n- リモコンデータ・メールアドレスをはじめとする初期設定データを全て削除します。\n\n###その他\n\n全てのデータはお使いのブラウザ(のlocalStorage)に直接保存されます。\nソースコードは[GitHub](https://github.com/kogai/irkitjs)で公開しています。\n\n------\n\njQueryであれこれ工夫して作ったのですが、フレームワークとか使ったほうが良かったのかも知れません。\nアプリを作るのは初めてなので不具合だらけかと思いますが、試しに使ってみて頂けたらありがたいです。\n\n- [公式サイト](http://getirkit.com/)\n- [IRKitjs](https://irkitjs.herokuapp.com/)\n- [GitHub](https://github.com/kogai/irkitjs)\n","source":"_posts/2015-03-09-irkitjs.md","raw":"---\ntitle: \"IRKitをAndroidでも初期設定・操作が出来るWebアプリ「IRKitjs」を作った\"\nid: create-irkijs\ndate: 2014-09-25 13:54:59 +0900\ntags:\n  - irkit\n  - node.js\n  - javascript\n---\n\n##IRKitとは\n\nIRKitは、WiFi機能の付いたオープンソースな赤外線リモコンデバイス。\n家庭のエアコンやテレビ、ライトなど、赤外線で操作できる家電を、WiFiをとおして、\niPhoneやiPadなどから操作できるようにするものです。\n\n- [公式サイト](http://getirkit.com/)\n- [IRKitjsのURL](https://irkitjs.herokuapp.com)\n\n##使い方\n\n###初期設定\n1. 画面の指示に従ってメールアドレスを登録\n2. 受信したメールに記載されたapikeyを、コピーしてきてペーストする\n3. 端末のWi-FiをIRKitに変更する\n4. 普段使っているWi-Fiルーターのセキュリティ、SSID、パスワードを入力する\n5. IRKit機器と普段使っているWi-Fiルーターを紐付けるために使用します。\n6. ルーターの情報をIRKit機器以外の外部に送信することはありません。\n7. 設定完了。 普段使っているWi-Fiルーターに繋ぎ直す。\n\n###リモコンボタン登録\n\n1. 「ボタン追加」をタップ\n2. ボタンの名前を登録\n3. IRKitに向けてリモコンのボタンを押す\n\n###リモコンボタン送信\n- ボタンをタップ-\\>リモコン命令送信\n- ボタンを右にスワイプ-\\>ボタンの順番をソート\n- ボタンを左にスワイプ-\\>ボタンの編集・削除\n\n###初期化\n\n- その他＞全てのデータを初期化をタップ\n- リモコンデータ・メールアドレスをはじめとする初期設定データを全て削除します。\n\n###その他\n\n全てのデータはお使いのブラウザ(のlocalStorage)に直接保存されます。\nソースコードは[GitHub](https://github.com/kogai/irkitjs)で公開しています。\n\n------\n\njQueryであれこれ工夫して作ったのですが、フレームワークとか使ったほうが良かったのかも知れません。\nアプリを作るのは初めてなので不具合だらけかと思いますが、試しに使ってみて頂けたらありがたいです。\n\n- [公式サイト](http://getirkit.com/)\n- [IRKitjs](https://irkitjs.herokuapp.com/)\n- [GitHub](https://github.com/kogai/irkitjs)\n","slug":"2015-03-09-irkitjs","published":1,"updated":"2016-08-11T00:42:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgiq0003g3kqysi4r9sz","content":"<p>##IRKitとは</p>\n<p>IRKitは、WiFi機能の付いたオープンソースな赤外線リモコンデバイス。<br>家庭のエアコンやテレビ、ライトなど、赤外線で操作できる家電を、WiFiをとおして、<br>iPhoneやiPadなどから操作できるようにするものです。</p>\n<ul>\n<li><a href=\"http://getirkit.com/\" target=\"_blank\" rel=\"external\">公式サイト</a></li>\n<li><a href=\"https://irkitjs.herokuapp.com\" target=\"_blank\" rel=\"external\">IRKitjsのURL</a></li>\n</ul>\n<p>##使い方</p>\n<p>###初期設定</p>\n<ol>\n<li>画面の指示に従ってメールアドレスを登録</li>\n<li>受信したメールに記載されたapikeyを、コピーしてきてペーストする</li>\n<li>端末のWi-FiをIRKitに変更する</li>\n<li>普段使っているWi-Fiルーターのセキュリティ、SSID、パスワードを入力する</li>\n<li>IRKit機器と普段使っているWi-Fiルーターを紐付けるために使用します。</li>\n<li>ルーターの情報をIRKit機器以外の外部に送信することはありません。</li>\n<li>設定完了。 普段使っているWi-Fiルーターに繋ぎ直す。</li>\n</ol>\n<p>###リモコンボタン登録</p>\n<ol>\n<li>「ボタン追加」をタップ</li>\n<li>ボタンの名前を登録</li>\n<li>IRKitに向けてリモコンのボタンを押す</li>\n</ol>\n<p>###リモコンボタン送信</p>\n<ul>\n<li>ボタンをタップ->リモコン命令送信</li>\n<li>ボタンを右にスワイプ->ボタンの順番をソート</li>\n<li>ボタンを左にスワイプ->ボタンの編集・削除</li>\n</ul>\n<p>###初期化</p>\n<ul>\n<li>その他＞全てのデータを初期化をタップ</li>\n<li>リモコンデータ・メールアドレスをはじめとする初期設定データを全て削除します。</li>\n</ul>\n<p>###その他</p>\n<p>全てのデータはお使いのブラウザ(のlocalStorage)に直接保存されます。<br>ソースコードは<a href=\"https://github.com/kogai/irkitjs\" target=\"_blank\" rel=\"external\">GitHub</a>で公開しています。</p>\n<hr>\n<p>jQueryであれこれ工夫して作ったのですが、フレームワークとか使ったほうが良かったのかも知れません。<br>アプリを作るのは初めてなので不具合だらけかと思いますが、試しに使ってみて頂けたらありがたいです。</p>\n<ul>\n<li><a href=\"http://getirkit.com/\" target=\"_blank\" rel=\"external\">公式サイト</a></li>\n<li><a href=\"https://irkitjs.herokuapp.com/\" target=\"_blank\" rel=\"external\">IRKitjs</a></li>\n<li><a href=\"https://github.com/kogai/irkitjs\" target=\"_blank\" rel=\"external\">GitHub</a></li>\n</ul>\n","excerpt":"","more":"<p>##IRKitとは</p>\n<p>IRKitは、WiFi機能の付いたオープンソースな赤外線リモコンデバイス。<br>家庭のエアコンやテレビ、ライトなど、赤外線で操作できる家電を、WiFiをとおして、<br>iPhoneやiPadなどから操作できるようにするものです。</p>\n<ul>\n<li><a href=\"http://getirkit.com/\">公式サイト</a></li>\n<li><a href=\"https://irkitjs.herokuapp.com\">IRKitjsのURL</a></li>\n</ul>\n<p>##使い方</p>\n<p>###初期設定</p>\n<ol>\n<li>画面の指示に従ってメールアドレスを登録</li>\n<li>受信したメールに記載されたapikeyを、コピーしてきてペーストする</li>\n<li>端末のWi-FiをIRKitに変更する</li>\n<li>普段使っているWi-Fiルーターのセキュリティ、SSID、パスワードを入力する</li>\n<li>IRKit機器と普段使っているWi-Fiルーターを紐付けるために使用します。</li>\n<li>ルーターの情報をIRKit機器以外の外部に送信することはありません。</li>\n<li>設定完了。 普段使っているWi-Fiルーターに繋ぎ直す。</li>\n</ol>\n<p>###リモコンボタン登録</p>\n<ol>\n<li>「ボタン追加」をタップ</li>\n<li>ボタンの名前を登録</li>\n<li>IRKitに向けてリモコンのボタンを押す</li>\n</ol>\n<p>###リモコンボタン送信</p>\n<ul>\n<li>ボタンをタップ->リモコン命令送信</li>\n<li>ボタンを右にスワイプ->ボタンの順番をソート</li>\n<li>ボタンを左にスワイプ->ボタンの編集・削除</li>\n</ul>\n<p>###初期化</p>\n<ul>\n<li>その他＞全てのデータを初期化をタップ</li>\n<li>リモコンデータ・メールアドレスをはじめとする初期設定データを全て削除します。</li>\n</ul>\n<p>###その他</p>\n<p>全てのデータはお使いのブラウザ(のlocalStorage)に直接保存されます。<br>ソースコードは<a href=\"https://github.com/kogai/irkitjs\">GitHub</a>で公開しています。</p>\n<hr>\n<p>jQueryであれこれ工夫して作ったのですが、フレームワークとか使ったほうが良かったのかも知れません。<br>アプリを作るのは初めてなので不具合だらけかと思いますが、試しに使ってみて頂けたらありがたいです。</p>\n<ul>\n<li><a href=\"http://getirkit.com/\">公式サイト</a></li>\n<li><a href=\"https://irkitjs.herokuapp.com/\">IRKitjs</a></li>\n<li><a href=\"https://github.com/kogai/irkitjs\">GitHub</a></li>\n</ul>\n"},{"title":"Gruntのプラグインを作って公開してみた","id":"create-grunt-plugin","date":"2015-02-12T04:43:41.000Z","_content":"\n現在担当している業務で、ちょっとしたタスクが出てきた。\nあるJSONファイルのデータを元に、別のJSONファイルを生成するというものだ。\n\nイメージはこんな感じ。\n\n`元のJSONファイルの内容(src.json)`\n\n~~~js\n[\n  {\n    \"foo\": \"bar\"\n  }\n]\n~~~\n\n`生成したJSONファイルの内容(dest.json)`\n\n~~~js\n[\n{\n\"foo\": \"bar\",\n\"baz\": \"foobar\"\n}\n]\n~~~\n\n元のJSONファイルを編集するたびに生成先のJSONを編集するとかやってられないので、gruntプラグインで目的に合致しているものがないか探したがなかった。（このプラグインで出来るよというのあったら教えて下さい！）\n\nそこでnode.jsのfsモジュールを使ってJSONファイル(`dest.json`)を生成するコードを書いて、grunt-shellで逐次実行するようにした。\n\nしばらくそれで問題なかったが、よくよく考えるとshellで逐次実行しなくても、gruntプラグインとして直接実行できるのでは？と気付いた。\n調べてみると、使っていたnode.jsのコードをちょっと変えるだけでgruntプラグインとして公開出来そうだったので、試してみた。\n\nQiitaのこの記事を参考にした。\n[grunt-pluginの作り方と解剖](http://qiita.com/fnobi/items/5590e7e92b4f2bd81d04)\n\n作ったものがこちら\n[grunt-json-extend](https://www.npmjs.com/package/grunt-json-extend)\n\n自分以外に使う人はいなかろう、と思いつつ公開したが、日に数回程はダウンロードされている模様。\nダウンロード結果の解析は見れないっぽいのでどういう目的で使われているのか全然わからないが、誰かの役に立っているのなら嬉しいな。\n使ったことある人、もしこのブログを見ていたらどんな使い方をしているか教えて下さい。\n\nちなみにこのプラグインを公開したちょっと後にgulpを初めて使ってみて`gulpfile.js`の短さに感動してしまったので、\n今後の新規案件では`gulp`でタスク処理するようになると思います。\n","source":"_posts/2015-03-09-tails-about-published-grunt-plugin.md","raw":"---\ntitle: \"Gruntのプラグインを作って公開してみた\"\nid: create-grunt-plugin\ndate: 2015-02-12 13:43:41 +0900\ntags:\n  - node.js\n  - grunt\n  - npm\n---\n\n現在担当している業務で、ちょっとしたタスクが出てきた。\nあるJSONファイルのデータを元に、別のJSONファイルを生成するというものだ。\n\nイメージはこんな感じ。\n\n`元のJSONファイルの内容(src.json)`\n\n~~~js\n[\n  {\n    \"foo\": \"bar\"\n  }\n]\n~~~\n\n`生成したJSONファイルの内容(dest.json)`\n\n~~~js\n[\n{\n\"foo\": \"bar\",\n\"baz\": \"foobar\"\n}\n]\n~~~\n\n元のJSONファイルを編集するたびに生成先のJSONを編集するとかやってられないので、gruntプラグインで目的に合致しているものがないか探したがなかった。（このプラグインで出来るよというのあったら教えて下さい！）\n\nそこでnode.jsのfsモジュールを使ってJSONファイル(`dest.json`)を生成するコードを書いて、grunt-shellで逐次実行するようにした。\n\nしばらくそれで問題なかったが、よくよく考えるとshellで逐次実行しなくても、gruntプラグインとして直接実行できるのでは？と気付いた。\n調べてみると、使っていたnode.jsのコードをちょっと変えるだけでgruntプラグインとして公開出来そうだったので、試してみた。\n\nQiitaのこの記事を参考にした。\n[grunt-pluginの作り方と解剖](http://qiita.com/fnobi/items/5590e7e92b4f2bd81d04)\n\n作ったものがこちら\n[grunt-json-extend](https://www.npmjs.com/package/grunt-json-extend)\n\n自分以外に使う人はいなかろう、と思いつつ公開したが、日に数回程はダウンロードされている模様。\nダウンロード結果の解析は見れないっぽいのでどういう目的で使われているのか全然わからないが、誰かの役に立っているのなら嬉しいな。\n使ったことある人、もしこのブログを見ていたらどんな使い方をしているか教えて下さい。\n\nちなみにこのプラグインを公開したちょっと後にgulpを初めて使ってみて`gulpfile.js`の短さに感動してしまったので、\n今後の新規案件では`gulp`でタスク処理するようになると思います。\n","slug":"2015-03-09-tails-about-published-grunt-plugin","published":1,"updated":"2016-08-11T00:43:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgiu0004g3kqfa8kqefw","content":"<p>現在担当している業務で、ちょっとしたタスクが出てきた。<br>あるJSONファイルのデータを元に、別のJSONファイルを生成するというものだ。</p>\n<p>イメージはこんな感じ。</p>\n<p><code>元のJSONファイルの内容(src.json)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p><code>生成したJSONファイルの内容(dest.json)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\"><span class=\"string\">\"baz\"</span>: <span class=\"string\">\"foobar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>元のJSONファイルを編集するたびに生成先のJSONを編集するとかやってられないので、gruntプラグインで目的に合致しているものがないか探したがなかった。（このプラグインで出来るよというのあったら教えて下さい！）</p>\n<p>そこでnode.jsのfsモジュールを使ってJSONファイル(<code>dest.json</code>)を生成するコードを書いて、grunt-shellで逐次実行するようにした。</p>\n<p>しばらくそれで問題なかったが、よくよく考えるとshellで逐次実行しなくても、gruntプラグインとして直接実行できるのでは？と気付いた。<br>調べてみると、使っていたnode.jsのコードをちょっと変えるだけでgruntプラグインとして公開出来そうだったので、試してみた。</p>\n<p>Qiitaのこの記事を参考にした。<br><a href=\"http://qiita.com/fnobi/items/5590e7e92b4f2bd81d04\" target=\"_blank\" rel=\"external\">grunt-pluginの作り方と解剖</a></p>\n<p>作ったものがこちら<br><a href=\"https://www.npmjs.com/package/grunt-json-extend\" target=\"_blank\" rel=\"external\">grunt-json-extend</a></p>\n<p>自分以外に使う人はいなかろう、と思いつつ公開したが、日に数回程はダウンロードされている模様。<br>ダウンロード結果の解析は見れないっぽいのでどういう目的で使われているのか全然わからないが、誰かの役に立っているのなら嬉しいな。<br>使ったことある人、もしこのブログを見ていたらどんな使い方をしているか教えて下さい。</p>\n<p>ちなみにこのプラグインを公開したちょっと後にgulpを初めて使ってみて<code>gulpfile.js</code>の短さに感動してしまったので、<br>今後の新規案件では<code>gulp</code>でタスク処理するようになると思います。</p>\n","excerpt":"","more":"<p>現在担当している業務で、ちょっとしたタスクが出てきた。<br>あるJSONファイルのデータを元に、別のJSONファイルを生成するというものだ。</p>\n<p>イメージはこんな感じ。</p>\n<p><code>元のJSONファイルの内容(src.json)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p><code>生成したJSONファイルの内容(dest.json)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\"><span class=\"string\">\"baz\"</span>: <span class=\"string\">\"foobar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>元のJSONファイルを編集するたびに生成先のJSONを編集するとかやってられないので、gruntプラグインで目的に合致しているものがないか探したがなかった。（このプラグインで出来るよというのあったら教えて下さい！）</p>\n<p>そこでnode.jsのfsモジュールを使ってJSONファイル(<code>dest.json</code>)を生成するコードを書いて、grunt-shellで逐次実行するようにした。</p>\n<p>しばらくそれで問題なかったが、よくよく考えるとshellで逐次実行しなくても、gruntプラグインとして直接実行できるのでは？と気付いた。<br>調べてみると、使っていたnode.jsのコードをちょっと変えるだけでgruntプラグインとして公開出来そうだったので、試してみた。</p>\n<p>Qiitaのこの記事を参考にした。<br><a href=\"http://qiita.com/fnobi/items/5590e7e92b4f2bd81d04\">grunt-pluginの作り方と解剖</a></p>\n<p>作ったものがこちら<br><a href=\"https://www.npmjs.com/package/grunt-json-extend\">grunt-json-extend</a></p>\n<p>自分以外に使う人はいなかろう、と思いつつ公開したが、日に数回程はダウンロードされている模様。<br>ダウンロード結果の解析は見れないっぽいのでどういう目的で使われているのか全然わからないが、誰かの役に立っているのなら嬉しいな。<br>使ったことある人、もしこのブログを見ていたらどんな使い方をしているか教えて下さい。</p>\n<p>ちなみにこのプラグインを公開したちょっと後にgulpを初めて使ってみて<code>gulpfile.js</code>の短さに感動してしまったので、<br>今後の新規案件では<code>gulp</code>でタスク処理するようになると思います。</p>\n"},{"title":"vue.jsでjqueryのpluginを使ってみる","id":"vuejs-with-jquery","date":"2015-03-09T04:51:56.000Z","_content":"\n業務でIE9〜の案件が降ってきたので、vue.jsを使ってみた。\nよくあるスライド切替をvue.js + jQuery + jQuery.bxSliderで。\n\n#### スライド画像が繰り返される部分に`v-repeat`を設定\n\n```jade\nul(id='slide')\n  li(v-repeat='photos')\n    img(src=\"{{photo}}\", alt=\"{{title}}\")\n```\n\n#### `vue.js`で要素を描画してからjQueryプラグインを適用\n\n~~~js\nvar slide = new Vue({\n  el: '#slide',\n  data: {\n    photos: [\n      {\n        \"photo\": \"画像1のパス\",\n        \"title\": \"画像1の名前\"\n      },\n      {\n        \"photo\": \"画像2のパス\",\n        \"title\": \"画像2の名前\"\n      }\n    ]\n  }\n});\njQuery(\"#slide\").bxSlider();\n~~~\n\nこれで行けました。\n","source":"_posts/2015-03-09-vuejs-plus-jquery-plugin.md","raw":"---\ntitle: \"vue.jsでjqueryのpluginを使ってみる\"\nid: vuejs-with-jquery\ndate: 2015-03-09 13:51:56 +0900\ntags:\n  - vue.js\n  - javascript\n  - jQuery\n---\n\n業務でIE9〜の案件が降ってきたので、vue.jsを使ってみた。\nよくあるスライド切替をvue.js + jQuery + jQuery.bxSliderで。\n\n#### スライド画像が繰り返される部分に`v-repeat`を設定\n\n```jade\nul(id='slide')\n  li(v-repeat='photos')\n    img(src=\"{{photo}}\", alt=\"{{title}}\")\n```\n\n#### `vue.js`で要素を描画してからjQueryプラグインを適用\n\n~~~js\nvar slide = new Vue({\n  el: '#slide',\n  data: {\n    photos: [\n      {\n        \"photo\": \"画像1のパス\",\n        \"title\": \"画像1の名前\"\n      },\n      {\n        \"photo\": \"画像2のパス\",\n        \"title\": \"画像2の名前\"\n      }\n    ]\n  }\n});\njQuery(\"#slide\").bxSlider();\n~~~\n\nこれで行けました。\n","slug":"2015-03-09-vuejs-plus-jquery-plugin","published":1,"updated":"2016-08-11T00:43:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgix0006g3kqx672a5em","content":"<p>業務でIE9〜の案件が降ってきたので、vue.jsを使ってみた。<br>よくあるスライド切替をvue.js + jQuery + jQuery.bxSliderで。</p>\n<h4 id=\"スライド画像が繰り返される部分にv-repeatを設定\"><a href=\"#スライド画像が繰り返される部分にv-repeatを設定\" class=\"headerlink\" title=\"スライド画像が繰り返される部分にv-repeatを設定\"></a>スライド画像が繰り返される部分に<code>v-repeat</code>を設定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ul(id=&apos;slide&apos;)</div><div class=\"line\">  li(v-repeat=&apos;photos&apos;)</div><div class=\"line\">    img(src=&quot;&#123;&#123;photo&#125;&#125;&quot;, alt=&quot;&#123;&#123;title&#125;&#125;&quot;)</div></pre></td></tr></table></figure>\n<h4 id=\"vue-jsで要素を描画してからjQueryプラグインを適用\"><a href=\"#vue-jsで要素を描画してからjQueryプラグインを適用\" class=\"headerlink\" title=\"vue.jsで要素を描画してからjQueryプラグインを適用\"></a><code>vue.js</code>で要素を描画してからjQueryプラグインを適用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> slide = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#slide'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    photos: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"photo\"</span>: <span class=\"string\">\"画像1のパス\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"画像1の名前\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"photo\"</span>: <span class=\"string\">\"画像2のパス\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"画像2の名前\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">jQuery(<span class=\"string\">\"#slide\"</span>).bxSlider();</div></pre></td></tr></table></figure>\n<p>これで行けました。</p>\n","excerpt":"","more":"<p>業務でIE9〜の案件が降ってきたので、vue.jsを使ってみた。<br>よくあるスライド切替をvue.js + jQuery + jQuery.bxSliderで。</p>\n<h4 id=\"スライド画像が繰り返される部分にv-repeatを設定\"><a href=\"#スライド画像が繰り返される部分にv-repeatを設定\" class=\"headerlink\" title=\"スライド画像が繰り返される部分にv-repeatを設定\"></a>スライド画像が繰り返される部分に<code>v-repeat</code>を設定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ul(id=&apos;slide&apos;)</div><div class=\"line\">  li(v-repeat=&apos;photos&apos;)</div><div class=\"line\">    img(src=&quot;&#123;&#123;photo&#125;&#125;&quot;, alt=&quot;&#123;&#123;title&#125;&#125;&quot;)</div></pre></td></tr></table></figure>\n<h4 id=\"vue-jsで要素を描画してからjQueryプラグインを適用\"><a href=\"#vue-jsで要素を描画してからjQueryプラグインを適用\" class=\"headerlink\" title=\"vue.jsで要素を描画してからjQueryプラグインを適用\"></a><code>vue.js</code>で要素を描画してからjQueryプラグインを適用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> slide = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#slide'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    photos: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"photo\"</span>: <span class=\"string\">\"画像1のパス\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"画像1の名前\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"photo\"</span>: <span class=\"string\">\"画像2のパス\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"画像2の名前\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">jQuery(<span class=\"string\">\"#slide\"</span>).bxSlider();</div></pre></td></tr></table></figure>\n<p>これで行けました。</p>\n"},{"title":"PebbleからIRKitを操作するアプリを作った","id":"pebble-with-irkit","date":"2014-08-28T01:57:43.000Z","_content":"\nスマートウォッチのPebbleからWi-FiスマートリモコンのIRKitに家中のリモコン家電をON/OFFにする命令を送れるようにしました。  \n\n### 手順\n1. 「 IRKitを使ってJavaScriptから家電を操作。外出先でも！」を参考に、clienttokenを取得してdeviceidとclientkey を取得する\n2. Pebbleアプリの「Simply.js」 をインストール\n3. 実行するjavascriptファイルを書く\n\n[gist url](https://gist.github.com/kogai/4ab760b8f7fd2da66423)\n※ globalDefineとremoteCommandの中の数値はユーザー毎に適宜設定する\n\n赤外線送信を一度に行うと、干渉するのか配列内のいずれかの命令しか実行されないっぽかったので、setTimeoutでディレイをかけています。\n手首を一振りしてテレビやエアコンが一斉にOFFになっていく光景はちょっとSFチックで素敵です。\n\n### 動作サンプル\n[instagram url](http://instagram.com/p/rhJ2B8hBy8/)\n","source":"_posts/2015-03-10-pebble-irkit.md","raw":"---\ntitle: \"PebbleからIRKitを操作するアプリを作った\"\nid: pebble-with-irkit\ndate: 2014-08-28 10:57:43 +0900\ntags:\n  - pebble\n  - pebble.js\n  - node.js\n  - javascript\n---\n\nスマートウォッチのPebbleからWi-FiスマートリモコンのIRKitに家中のリモコン家電をON/OFFにする命令を送れるようにしました。  \n\n### 手順\n1. 「 IRKitを使ってJavaScriptから家電を操作。外出先でも！」を参考に、clienttokenを取得してdeviceidとclientkey を取得する\n2. Pebbleアプリの「Simply.js」 をインストール\n3. 実行するjavascriptファイルを書く\n\n[gist url](https://gist.github.com/kogai/4ab760b8f7fd2da66423)\n※ globalDefineとremoteCommandの中の数値はユーザー毎に適宜設定する\n\n赤外線送信を一度に行うと、干渉するのか配列内のいずれかの命令しか実行されないっぽかったので、setTimeoutでディレイをかけています。\n手首を一振りしてテレビやエアコンが一斉にOFFになっていく光景はちょっとSFチックで素敵です。\n\n### 動作サンプル\n[instagram url](http://instagram.com/p/rhJ2B8hBy8/)\n","slug":"2015-03-10-pebble-irkit","published":1,"updated":"2016-08-11T00:43:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgiz0007g3kqj5uvcmst","content":"<p>スマートウォッチのPebbleからWi-FiスマートリモコンのIRKitに家中のリモコン家電をON/OFFにする命令を送れるようにしました。  </p>\n<h3 id=\"手順\"><a href=\"#手順\" class=\"headerlink\" title=\"手順\"></a>手順</h3><ol>\n<li>「 IRKitを使ってJavaScriptから家電を操作。外出先でも！」を参考に、clienttokenを取得してdeviceidとclientkey を取得する</li>\n<li>Pebbleアプリの「Simply.js」 をインストール</li>\n<li>実行するjavascriptファイルを書く</li>\n</ol>\n<p><a href=\"https://gist.github.com/kogai/4ab760b8f7fd2da66423\" target=\"_blank\" rel=\"external\">gist url</a><br>※ globalDefineとremoteCommandの中の数値はユーザー毎に適宜設定する</p>\n<p>赤外線送信を一度に行うと、干渉するのか配列内のいずれかの命令しか実行されないっぽかったので、setTimeoutでディレイをかけています。<br>手首を一振りしてテレビやエアコンが一斉にOFFになっていく光景はちょっとSFチックで素敵です。</p>\n<h3 id=\"動作サンプル\"><a href=\"#動作サンプル\" class=\"headerlink\" title=\"動作サンプル\"></a>動作サンプル</h3><p><a href=\"http://instagram.com/p/rhJ2B8hBy8/\" target=\"_blank\" rel=\"external\">instagram url</a></p>\n","excerpt":"","more":"<p>スマートウォッチのPebbleからWi-FiスマートリモコンのIRKitに家中のリモコン家電をON/OFFにする命令を送れるようにしました。  </p>\n<h3 id=\"手順\"><a href=\"#手順\" class=\"headerlink\" title=\"手順\"></a>手順</h3><ol>\n<li>「 IRKitを使ってJavaScriptから家電を操作。外出先でも！」を参考に、clienttokenを取得してdeviceidとclientkey を取得する</li>\n<li>Pebbleアプリの「Simply.js」 をインストール</li>\n<li>実行するjavascriptファイルを書く</li>\n</ol>\n<p><a href=\"https://gist.github.com/kogai/4ab760b8f7fd2da66423\">gist url</a><br>※ globalDefineとremoteCommandの中の数値はユーザー毎に適宜設定する</p>\n<p>赤外線送信を一度に行うと、干渉するのか配列内のいずれかの命令しか実行されないっぽかったので、setTimeoutでディレイをかけています。<br>手首を一振りしてテレビやエアコンが一斉にOFFになっていく光景はちょっとSFチックで素敵です。</p>\n<h3 id=\"動作サンプル\"><a href=\"#動作サンプル\" class=\"headerlink\" title=\"動作サンプル\"></a>動作サンプル</h3><p><a href=\"http://instagram.com/p/rhJ2B8hBy8/\">instagram url</a></p>\n"},{"title":"HEXOに移行することにした","id":"greeting","date":"2015-03-11T15:00:00.000Z","_content":"\n今までブログとして使っていた[postach.io](http://postach.io/site)が無償版を停止することにしたらしい。\nEverNoteから投稿出来るのが気に入って使っていたけど、[月額9$](http://postach.io/site/pricing)は高いな〜\nということで、ブログを移行することにした。\n\n`markdown`で書けて、無料で使えるという条件で、`Octopress`と`Hexo`を試してみた。\n`Hexo`は`node.js`ベースなのでこちらを選びました。\n\n```js\n  console.log('hello, world!');\n```\n\n```html\n  <h1>hello, world!</h1>\n```\n\nとても使いやすそう。\n","source":"_posts/2015-03-12-greeting.md","raw":"---\ntitle: HEXOに移行することにした\nid: greeting\ndate: 2015-03-12\ntags:\n---\n\n今までブログとして使っていた[postach.io](http://postach.io/site)が無償版を停止することにしたらしい。\nEverNoteから投稿出来るのが気に入って使っていたけど、[月額9$](http://postach.io/site/pricing)は高いな〜\nということで、ブログを移行することにした。\n\n`markdown`で書けて、無料で使えるという条件で、`Octopress`と`Hexo`を試してみた。\n`Hexo`は`node.js`ベースなのでこちらを選びました。\n\n```js\n  console.log('hello, world!');\n```\n\n```html\n  <h1>hello, world!</h1>\n```\n\nとても使いやすそう。\n","slug":"2015-03-12-greeting","published":1,"updated":"2016-08-11T00:46:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgj20008g3kqvmcfq2by","content":"<p>今までブログとして使っていた<a href=\"http://postach.io/site\" target=\"_blank\" rel=\"external\">postach.io</a>が無償版を停止することにしたらしい。<br>EverNoteから投稿出来るのが気に入って使っていたけど、<a href=\"http://postach.io/site/pricing\" target=\"_blank\" rel=\"external\">月額9$</a>は高いな〜<br>ということで、ブログを移行することにした。</p>\n<p><code>markdown</code>で書けて、無料で使えるという条件で、<code>Octopress</code>と<code>Hexo</code>を試してみた。<br><code>Hexo</code>は<code>node.js</code>ベースなのでこちらを選びました。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, world!'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>とても使いやすそう。</p>\n","excerpt":"","more":"<p>今までブログとして使っていた<a href=\"http://postach.io/site\">postach.io</a>が無償版を停止することにしたらしい。<br>EverNoteから投稿出来るのが気に入って使っていたけど、<a href=\"http://postach.io/site/pricing\">月額9$</a>は高いな〜<br>ということで、ブログを移行することにした。</p>\n<p><code>markdown</code>で書けて、無料で使えるという条件で、<code>Octopress</code>と<code>Hexo</code>を試してみた。<br><code>Hexo</code>は<code>node.js</code>ベースなのでこちらを選びました。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, world!'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>とても使いやすそう。</p>\n"},{"title":"git-diffで差分ファイルのみをarchive.zipにする","id":"git-diff-to-zip","date":"2015-03-16T15:00:00.000Z","_content":"\n## やりたいこと\n- クライアント案件で、本番サーバーへのアクセス権がない。\n- 更新作業の際には差分ファイルのみを納品するように要求されている。\n\n## git archiveで差分抽出\n`git archive`コマンドで、前回納品時との`diff`を抽出して`zip`化する\n\n```shell\ngit archive --format=zip HEAD `git diff master --name-only` -o archive.zip\n\n```\n`git diff`で`master`ブランチ(前回納品時の状態を想定)との差分ファイルリストを取得して、`git archive`に渡してあげる。\nこれでアーカイブ化できました。\n\n## --diff-filterを使う\n上記の手法だと差分の中に削除したファイルも含まれてしまい、以下のエラーメッセージが出ます。\n\n```shell\nfatal: pathspec 'path/to/not/exist/file' did not match any files\n\n```\n\n削除したファイルは`git archive`対象のリストに渡らないようにすれば良さそうです。\n[公式ドキュメントのgit-diffのページ](http://git-scm.com/docs/git-diff)を見ると、`--diff-filter`というオプションがありました。\n\n> Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R)\n\nこのオプションを使って追加したファイル(A)と編集したファイル(M)だけにフィルタリングされたリストが作れそうです。\n\n```shell\ngit archive --format=zip HEAD `git diff master --name-only --diff-filter=AM` -o archive.zip\n```\n\nこれでOK。\n困ったときは公式ドキュメントに限りますね。\n","source":"_posts/2015-03-17-git-diff-and-archive.md","raw":"---\ntitle: \"git-diffで差分ファイルのみをarchive.zipにする\"\nid: git-diff-to-zip\ndate: 2015-03-17\ntags:\n  - git\n---\n\n## やりたいこと\n- クライアント案件で、本番サーバーへのアクセス権がない。\n- 更新作業の際には差分ファイルのみを納品するように要求されている。\n\n## git archiveで差分抽出\n`git archive`コマンドで、前回納品時との`diff`を抽出して`zip`化する\n\n```shell\ngit archive --format=zip HEAD `git diff master --name-only` -o archive.zip\n\n```\n`git diff`で`master`ブランチ(前回納品時の状態を想定)との差分ファイルリストを取得して、`git archive`に渡してあげる。\nこれでアーカイブ化できました。\n\n## --diff-filterを使う\n上記の手法だと差分の中に削除したファイルも含まれてしまい、以下のエラーメッセージが出ます。\n\n```shell\nfatal: pathspec 'path/to/not/exist/file' did not match any files\n\n```\n\n削除したファイルは`git archive`対象のリストに渡らないようにすれば良さそうです。\n[公式ドキュメントのgit-diffのページ](http://git-scm.com/docs/git-diff)を見ると、`--diff-filter`というオプションがありました。\n\n> Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R)\n\nこのオプションを使って追加したファイル(A)と編集したファイル(M)だけにフィルタリングされたリストが作れそうです。\n\n```shell\ngit archive --format=zip HEAD `git diff master --name-only --diff-filter=AM` -o archive.zip\n```\n\nこれでOK。\n困ったときは公式ドキュメントに限りますね。\n","slug":"2015-03-17-git-diff-and-archive","published":1,"updated":"2016-08-11T00:44:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgj5000ag3kqil1wjkzz","content":"<h2 id=\"やりたいこと\"><a href=\"#やりたいこと\" class=\"headerlink\" title=\"やりたいこと\"></a>やりたいこと</h2><ul>\n<li>クライアント案件で、本番サーバーへのアクセス権がない。</li>\n<li>更新作業の際には差分ファイルのみを納品するように要求されている。</li>\n</ul>\n<h2 id=\"git-archiveで差分抽出\"><a href=\"#git-archiveで差分抽出\" class=\"headerlink\" title=\"git archiveで差分抽出\"></a>git archiveで差分抽出</h2><p><code>git archive</code>コマンドで、前回納品時との<code>diff</code>を抽出して<code>zip</code>化する</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git archive --format=zip HEAD `git diff master --name-only` -o archive.zip</div></pre></td></tr></table></figure>\n<p><code>git diff</code>で<code>master</code>ブランチ(前回納品時の状態を想定)との差分ファイルリストを取得して、<code>git archive</code>に渡してあげる。<br>これでアーカイブ化できました。</p>\n<h2 id=\"–diff-filterを使う\"><a href=\"#–diff-filterを使う\" class=\"headerlink\" title=\"–diff-filterを使う\"></a>–diff-filterを使う</h2><p>上記の手法だと差分の中に削除したファイルも含まれてしまい、以下のエラーメッセージが出ます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal: pathspec &apos;path/to/not/exist/file&apos; did not match any files</div></pre></td></tr></table></figure>\n<p>削除したファイルは<code>git archive</code>対象のリストに渡らないようにすれば良さそうです。<br><a href=\"http://git-scm.com/docs/git-diff\" target=\"_blank\" rel=\"external\">公式ドキュメントのgit-diffのページ</a>を見ると、<code>--diff-filter</code>というオプションがありました。</p>\n<blockquote>\n<p>Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R)</p>\n</blockquote>\n<p>このオプションを使って追加したファイル(A)と編集したファイル(M)だけにフィルタリングされたリストが作れそうです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git archive --format=zip HEAD `git diff master --name-only --diff-filter=AM` -o archive.zip</div></pre></td></tr></table></figure>\n<p>これでOK。<br>困ったときは公式ドキュメントに限りますね。</p>\n","excerpt":"","more":"<h2 id=\"やりたいこと\"><a href=\"#やりたいこと\" class=\"headerlink\" title=\"やりたいこと\"></a>やりたいこと</h2><ul>\n<li>クライアント案件で、本番サーバーへのアクセス権がない。</li>\n<li>更新作業の際には差分ファイルのみを納品するように要求されている。</li>\n</ul>\n<h2 id=\"git-archiveで差分抽出\"><a href=\"#git-archiveで差分抽出\" class=\"headerlink\" title=\"git archiveで差分抽出\"></a>git archiveで差分抽出</h2><p><code>git archive</code>コマンドで、前回納品時との<code>diff</code>を抽出して<code>zip</code>化する</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git archive --format=zip HEAD `git diff master --name-only` -o archive.zip</div></pre></td></tr></table></figure>\n<p><code>git diff</code>で<code>master</code>ブランチ(前回納品時の状態を想定)との差分ファイルリストを取得して、<code>git archive</code>に渡してあげる。<br>これでアーカイブ化できました。</p>\n<h2 id=\"–diff-filterを使う\"><a href=\"#–diff-filterを使う\" class=\"headerlink\" title=\"–diff-filterを使う\"></a>–diff-filterを使う</h2><p>上記の手法だと差分の中に削除したファイルも含まれてしまい、以下のエラーメッセージが出ます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fatal: pathspec &apos;path/to/not/exist/file&apos; did not match any files</div></pre></td></tr></table></figure>\n<p>削除したファイルは<code>git archive</code>対象のリストに渡らないようにすれば良さそうです。<br><a href=\"http://git-scm.com/docs/git-diff\">公式ドキュメントのgit-diffのページ</a>を見ると、<code>--diff-filter</code>というオプションがありました。</p>\n<blockquote>\n<p>Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R)</p>\n</blockquote>\n<p>このオプションを使って追加したファイル(A)と編集したファイル(M)だけにフィルタリングされたリストが作れそうです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git archive --format=zip HEAD `git diff master --name-only --diff-filter=AM` -o archive.zip</div></pre></td></tr></table></figure>\n<p>これでOK。<br>困ったときは公式ドキュメントに限りますね。</p>\n"},{"title":"circleCIのテストがnodev0.12で失敗する","id":"modify-yaml","date":"2015-03-18T15:00:00.000Z","_content":"\n`nodejs`の`v0.12`を使ってるプロジェクトでcircleCIのテストが通りませんでした。\n手元のテストは成功しているのですが。。。\n\n####こんな感じのエラー\n```sh\n   Uncaught Error: Module did not self-register.\n      at Error (native)\n      at Module.load (module.js:355:32)\n      at Function.Module._load (module.js:310:12)\n      at Module.require (module.js:365:17)\n      at require (module.js:384:17)\n```\n\n#### 困ったときのStackOverflow\n[Uncaught Error: Module did not self-register](http://stackoverflow.com/questions/28486891/uncaught-error-module-did-not-self-register)\n\n事前に\n```sh\nnpm rebuild\n```\nすれば良いみたい。\n\n`circle.yml`をこんな感じにして解決。\n```yml\ndependencies:\n  override:\n    - npm install\n    - npm rebuild\n```\n\nローカルマシンでも同様のエラーを吐く時があるけど、\n同じように\n```sh\nnpm rebuild\n```\nしてあげれば解決するっぽいです。\n","source":"_posts/2015-03-19-modify-yml.md","raw":"---\ntitle: \"circleCIのテストがnodev0.12で失敗する\"\nid: modify-yaml\ndate: 2015-03-19\ntags:\n  - circleCI\n  - node.js\n  - npm\n---\n\n`nodejs`の`v0.12`を使ってるプロジェクトでcircleCIのテストが通りませんでした。\n手元のテストは成功しているのですが。。。\n\n####こんな感じのエラー\n```sh\n   Uncaught Error: Module did not self-register.\n      at Error (native)\n      at Module.load (module.js:355:32)\n      at Function.Module._load (module.js:310:12)\n      at Module.require (module.js:365:17)\n      at require (module.js:384:17)\n```\n\n#### 困ったときのStackOverflow\n[Uncaught Error: Module did not self-register](http://stackoverflow.com/questions/28486891/uncaught-error-module-did-not-self-register)\n\n事前に\n```sh\nnpm rebuild\n```\nすれば良いみたい。\n\n`circle.yml`をこんな感じにして解決。\n```yml\ndependencies:\n  override:\n    - npm install\n    - npm rebuild\n```\n\nローカルマシンでも同様のエラーを吐く時があるけど、\n同じように\n```sh\nnpm rebuild\n```\nしてあげれば解決するっぽいです。\n","slug":"2015-03-19-modify-yml","published":1,"updated":"2016-08-11T00:45:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgj7000bg3kqvsv9ymd3","content":"<p><code>nodejs</code>の<code>v0.12</code>を使ってるプロジェクトでcircleCIのテストが通りませんでした。<br>手元のテストは成功しているのですが。。。</p>\n<p>####こんな感じのエラー<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uncaught Error: Module did not self-register.</div><div class=\"line\">   at Error (native)</div><div class=\"line\">   at Module.load (module.js:355:32)</div><div class=\"line\">   at Function.Module._load (module.js:310:12)</div><div class=\"line\">   at Module.require (module.js:365:17)</div><div class=\"line\">   at require (module.js:384:17)</div></pre></td></tr></table></figure></p>\n<h4 id=\"困ったときのStackOverflow\"><a href=\"#困ったときのStackOverflow\" class=\"headerlink\" title=\"困ったときのStackOverflow\"></a>困ったときのStackOverflow</h4><p><a href=\"http://stackoverflow.com/questions/28486891/uncaught-error-module-did-not-self-register\" target=\"_blank\" rel=\"external\">Uncaught Error: Module did not self-register</a></p>\n<p>事前に<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm rebuild</div></pre></td></tr></table></figure></p>\n<p>すれば良いみたい。</p>\n<p><code>circle.yml</code>をこんな感じにして解決。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  override:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> npm install</div><div class=\"line\"><span class=\"bullet\">    -</span> npm rebuild</div></pre></td></tr></table></figure></p>\n<p>ローカルマシンでも同様のエラーを吐く時があるけど、<br>同じように<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm rebuild</div></pre></td></tr></table></figure></p>\n<p>してあげれば解決するっぽいです。</p>\n","excerpt":"","more":"<p><code>nodejs</code>の<code>v0.12</code>を使ってるプロジェクトでcircleCIのテストが通りませんでした。<br>手元のテストは成功しているのですが。。。</p>\n<p>####こんな感じのエラー<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uncaught Error: Module did not self-register.</div><div class=\"line\">   at Error (native)</div><div class=\"line\">   at Module.load (module.js:355:32)</div><div class=\"line\">   at Function.Module._load (module.js:310:12)</div><div class=\"line\">   at Module.require (module.js:365:17)</div><div class=\"line\">   at require (module.js:384:17)</div></pre></td></tr></table></figure></p>\n<h4 id=\"困ったときのStackOverflow\"><a href=\"#困ったときのStackOverflow\" class=\"headerlink\" title=\"困ったときのStackOverflow\"></a>困ったときのStackOverflow</h4><p><a href=\"http://stackoverflow.com/questions/28486891/uncaught-error-module-did-not-self-register\">Uncaught Error: Module did not self-register</a></p>\n<p>事前に<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm rebuild</div></pre></td></tr></table></figure></p>\n<p>すれば良いみたい。</p>\n<p><code>circle.yml</code>をこんな感じにして解決。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  override:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> npm install</div><div class=\"line\"><span class=\"bullet\">    -</span> npm rebuild</div></pre></td></tr></table></figure></p>\n<p>ローカルマシンでも同様のエラーを吐く時があるけど、<br>同じように<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm rebuild</div></pre></td></tr></table></figure></p>\n<p>してあげれば解決するっぽいです。</p>\n"},{"title":"kindlie化された書籍の通知サービスを作った","id":"create-kindlize-it","date":"2015-03-29T15:00:00.000Z","_content":"\n##概要\n[kindlize.it](http://kindlize.it)\n\nAmazonで書籍を買おうとした時に、kindle化されていない時がままあります。\n電子書籍の普及は進んできたとは言え、多くの書籍は電子化されていないというのが現状です。\nまたシリーズものなどで、\"最新刊の一つ前の刊まで\"の条件付けでしか電子化しない出版社もあります。(集英社よ、君のことだぞ)\n\nそんなわけで、kindle化を待っている本が山ほどあるという人も多いのではないでしょうか。\n私は今までkindle化されていない書籍を欲しいものリストに入れおいて『あの本はkindle化されたかな〜』と定期的に見に行くということをしていました。\n実に面倒くさい。\n\nそこで目当ての本がkindle化されたらメール通知を送ってくれるサービスを作りました。\nアカウントを作成して、目当ての書籍を検索&登録しておくとkindle化された時にメールが来ます。\n\n##使ったもの\n特に意識してたわけではないのですが、自分が使えるものから選んでいったら自然とMEANスタックになってました。\n他のスタックが出来ないとも言います。\n- Node.js\n- Express\n- MongoDB\n- Angular.js\n- DigitalOcean\n\n##これから\n今は登録した書籍のkindle化通知しかしてくれないので、いずれは過去に登録した書籍の新刊が出たら通知するようにしたいです。\n\n###反省\n検証している時に読みたいkindle本をたくさん見つけてしまい、結構買ってしまった…。\n自分で自分の首を絞めるサービスになっている気がしないでもないです。\n\nそんなわけで、よかったら使ってみて下さい。\n\n[kindlize.it](http://kindlize.it)\n","source":"_posts/2015-03-23-kindlizeit.md","raw":"---\ntitle: \"kindlie化された書籍の通知サービスを作った\"\nid: create-kindlize-it\ndate: 2015-03-30\ntags:\n - node.js\n - mongoDB\n - angular.js\n - express\n - kindle\n---\n\n##概要\n[kindlize.it](http://kindlize.it)\n\nAmazonで書籍を買おうとした時に、kindle化されていない時がままあります。\n電子書籍の普及は進んできたとは言え、多くの書籍は電子化されていないというのが現状です。\nまたシリーズものなどで、\"最新刊の一つ前の刊まで\"の条件付けでしか電子化しない出版社もあります。(集英社よ、君のことだぞ)\n\nそんなわけで、kindle化を待っている本が山ほどあるという人も多いのではないでしょうか。\n私は今までkindle化されていない書籍を欲しいものリストに入れおいて『あの本はkindle化されたかな〜』と定期的に見に行くということをしていました。\n実に面倒くさい。\n\nそこで目当ての本がkindle化されたらメール通知を送ってくれるサービスを作りました。\nアカウントを作成して、目当ての書籍を検索&登録しておくとkindle化された時にメールが来ます。\n\n##使ったもの\n特に意識してたわけではないのですが、自分が使えるものから選んでいったら自然とMEANスタックになってました。\n他のスタックが出来ないとも言います。\n- Node.js\n- Express\n- MongoDB\n- Angular.js\n- DigitalOcean\n\n##これから\n今は登録した書籍のkindle化通知しかしてくれないので、いずれは過去に登録した書籍の新刊が出たら通知するようにしたいです。\n\n###反省\n検証している時に読みたいkindle本をたくさん見つけてしまい、結構買ってしまった…。\n自分で自分の首を絞めるサービスになっている気がしないでもないです。\n\nそんなわけで、よかったら使ってみて下さい。\n\n[kindlize.it](http://kindlize.it)\n","slug":"2015-03-23-kindlizeit","published":1,"updated":"2016-08-11T00:45:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgjd000eg3kqc2iu9hi2","content":"<p>##概要<br><a href=\"http://kindlize.it\" target=\"_blank\" rel=\"external\">kindlize.it</a></p>\n<p>Amazonで書籍を買おうとした時に、kindle化されていない時がままあります。<br>電子書籍の普及は進んできたとは言え、多くの書籍は電子化されていないというのが現状です。<br>またシリーズものなどで、”最新刊の一つ前の刊まで”の条件付けでしか電子化しない出版社もあります。(集英社よ、君のことだぞ)</p>\n<p>そんなわけで、kindle化を待っている本が山ほどあるという人も多いのではないでしょうか。<br>私は今までkindle化されていない書籍を欲しいものリストに入れおいて『あの本はkindle化されたかな〜』と定期的に見に行くということをしていました。<br>実に面倒くさい。</p>\n<p>そこで目当ての本がkindle化されたらメール通知を送ってくれるサービスを作りました。<br>アカウントを作成して、目当ての書籍を検索&amp;登録しておくとkindle化された時にメールが来ます。</p>\n<p>##使ったもの<br>特に意識してたわけではないのですが、自分が使えるものから選んでいったら自然とMEANスタックになってました。<br>他のスタックが出来ないとも言います。</p>\n<ul>\n<li>Node.js</li>\n<li>Express</li>\n<li>MongoDB</li>\n<li>Angular.js</li>\n<li>DigitalOcean</li>\n</ul>\n<p>##これから<br>今は登録した書籍のkindle化通知しかしてくれないので、いずれは過去に登録した書籍の新刊が出たら通知するようにしたいです。</p>\n<p>###反省<br>検証している時に読みたいkindle本をたくさん見つけてしまい、結構買ってしまった…。<br>自分で自分の首を絞めるサービスになっている気がしないでもないです。</p>\n<p>そんなわけで、よかったら使ってみて下さい。</p>\n<p><a href=\"http://kindlize.it\" target=\"_blank\" rel=\"external\">kindlize.it</a></p>\n","excerpt":"","more":"<p>##概要<br><a href=\"http://kindlize.it\">kindlize.it</a></p>\n<p>Amazonで書籍を買おうとした時に、kindle化されていない時がままあります。<br>電子書籍の普及は進んできたとは言え、多くの書籍は電子化されていないというのが現状です。<br>またシリーズものなどで、”最新刊の一つ前の刊まで”の条件付けでしか電子化しない出版社もあります。(集英社よ、君のことだぞ)</p>\n<p>そんなわけで、kindle化を待っている本が山ほどあるという人も多いのではないでしょうか。<br>私は今までkindle化されていない書籍を欲しいものリストに入れおいて『あの本はkindle化されたかな〜』と定期的に見に行くということをしていました。<br>実に面倒くさい。</p>\n<p>そこで目当ての本がkindle化されたらメール通知を送ってくれるサービスを作りました。<br>アカウントを作成して、目当ての書籍を検索&amp;登録しておくとkindle化された時にメールが来ます。</p>\n<p>##使ったもの<br>特に意識してたわけではないのですが、自分が使えるものから選んでいったら自然とMEANスタックになってました。<br>他のスタックが出来ないとも言います。</p>\n<ul>\n<li>Node.js</li>\n<li>Express</li>\n<li>MongoDB</li>\n<li>Angular.js</li>\n<li>DigitalOcean</li>\n</ul>\n<p>##これから<br>今は登録した書籍のkindle化通知しかしてくれないので、いずれは過去に登録した書籍の新刊が出たら通知するようにしたいです。</p>\n<p>###反省<br>検証している時に読みたいkindle本をたくさん見つけてしまい、結構買ってしまった…。<br>自分で自分の首を絞めるサービスになっている気がしないでもないです。</p>\n<p>そんなわけで、よかったら使ってみて下さい。</p>\n<p><a href=\"http://kindlize.it\">kindlize.it</a></p>\n"},{"title":"gulp:開発/本番環境でタスクの内容を調整して幸せになる","id":"gulp-newer","date":"2015-04-12T11:00:00.000Z","_content":"\n###更新したファイルだけをタスクの対象に\n\ngulpでファイルの自動生成をする時、対象ファイルの数が増えてくると生成に時間がかかってツラい感じになってきます。\n`gulp-newer`を使えば更新した差分ファイルのみをタスクの対象にしてくれるので幸せな感じになれます。\n\n``` coffee\ngulp = require 'gulp'\nnewer = require 'gulp-newer'\njade = require 'gulp-jade'\n\ngulp.task 'sampleTask', ->\n  # 更新差分の基準になるファイル\n  criterionFiles = './dest/html'\n\n\tgulp.src([\n\t\t'./src/jade/!(_)*.jade'\n\t])\n\t.pipe(newer(criterionFiles))\n\t.pipe(jade())\n\t.pipe(gulp.dest(dest))\n\ngulp.task 'default', [\n  'sampleTask'\n]\n```\n\n###本番環境用ファイルを生成する時\n本番環境用のファイルを作る時は、生成漏れがあったら困るので更新差分にはしたくありません。\nそこで`production`環境の変数を作ってあげて、更新差分の基準ファイルを振り分けするようにしました。\n\n``` coffee\nconfig =\n\tproduction: false\n\ngulp.task 'setProduction', ->\n  config.production = true\n\ngulp.task 'sampleTask', ->\n\n  if( config.production )\n\t   criterionFiles = ''\n  else\n\t   criterionFiles = './dest/html'\n\n\tgulp.src([\n\t\t'./src/jade/!(_)*.jade'\n\t])\n\t.pipe(newer(criterionFiles))\n\t.pipe(jade())\n\t.pipe(gulp.dest(dest))\n\ngulp.task 'default', [\n\t'sampleTask'\n]\n\ngulp.task 'build', [\n\t'setProduction'\n\t'default'\n]\n\n```\n\n###まとめ\n静的サイトのジェネレータとしてgulpを使う事が多いので、100枚以上あるhtmlファイルの生成とか画像ファイルの生成にかかる時間が劇的に減りました。\n※ちなみに、gruntにも同様のプラグイン(grunt-newer)があります。\n\n参考\n[gulp-newer](https://www.npmjs.com/package/gulp-newer)\n[How to handle development and production assets with gulp?](http://laravel.io/forum/04-03-2014-how-to-handle-development-and-production-assets-with-gulp)\n","source":"_posts/2015-04-07-gulp-newer.md","raw":"---\ntitle: \"gulp:開発/本番環境でタスクの内容を調整して幸せになる\"\nid: gulp-newer\ndate: 2015-04-12 20:00:00\ncategories:\ntags:\n  - gulp\n  - browser\n  - javascript\n  - coffeescript\n  - npm\n  - node.js\n---\n\n###更新したファイルだけをタスクの対象に\n\ngulpでファイルの自動生成をする時、対象ファイルの数が増えてくると生成に時間がかかってツラい感じになってきます。\n`gulp-newer`を使えば更新した差分ファイルのみをタスクの対象にしてくれるので幸せな感じになれます。\n\n``` coffee\ngulp = require 'gulp'\nnewer = require 'gulp-newer'\njade = require 'gulp-jade'\n\ngulp.task 'sampleTask', ->\n  # 更新差分の基準になるファイル\n  criterionFiles = './dest/html'\n\n\tgulp.src([\n\t\t'./src/jade/!(_)*.jade'\n\t])\n\t.pipe(newer(criterionFiles))\n\t.pipe(jade())\n\t.pipe(gulp.dest(dest))\n\ngulp.task 'default', [\n  'sampleTask'\n]\n```\n\n###本番環境用ファイルを生成する時\n本番環境用のファイルを作る時は、生成漏れがあったら困るので更新差分にはしたくありません。\nそこで`production`環境の変数を作ってあげて、更新差分の基準ファイルを振り分けするようにしました。\n\n``` coffee\nconfig =\n\tproduction: false\n\ngulp.task 'setProduction', ->\n  config.production = true\n\ngulp.task 'sampleTask', ->\n\n  if( config.production )\n\t   criterionFiles = ''\n  else\n\t   criterionFiles = './dest/html'\n\n\tgulp.src([\n\t\t'./src/jade/!(_)*.jade'\n\t])\n\t.pipe(newer(criterionFiles))\n\t.pipe(jade())\n\t.pipe(gulp.dest(dest))\n\ngulp.task 'default', [\n\t'sampleTask'\n]\n\ngulp.task 'build', [\n\t'setProduction'\n\t'default'\n]\n\n```\n\n###まとめ\n静的サイトのジェネレータとしてgulpを使う事が多いので、100枚以上あるhtmlファイルの生成とか画像ファイルの生成にかかる時間が劇的に減りました。\n※ちなみに、gruntにも同様のプラグイン(grunt-newer)があります。\n\n参考\n[gulp-newer](https://www.npmjs.com/package/gulp-newer)\n[How to handle development and production assets with gulp?](http://laravel.io/forum/04-03-2014-how-to-handle-development-and-production-assets-with-gulp)\n","slug":"2015-04-07-gulp-newer","published":1,"updated":"2016-08-11T00:45:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgjg000fg3kqao9gww6y","content":"<p>###更新したファイルだけをタスクの対象に</p>\n<p>gulpでファイルの自動生成をする時、対象ファイルの数が増えてくると生成に時間がかかってツラい感じになってきます。<br><code>gulp-newer</code>を使えば更新した差分ファイルのみをタスクの対象にしてくれるので幸せな感じになれます。</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp = <span class=\"built_in\">require</span> <span class=\"string\">'gulp'</span></div><div class=\"line\">newer = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-newer'</span></div><div class=\"line\">jade = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-jade'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'sampleTask'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">  <span class=\"comment\"># 更新差分の基準になるファイル</span></div><div class=\"line\">  criterionFiles = <span class=\"string\">'./dest/html'</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\t<span class=\"string\">'./src/jade/!(_)*.jade'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(newer(criterionFiles))</div><div class=\"line\">\t.pipe(jade())</div><div class=\"line\">\t.pipe(gulp.dest(dest))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">  <span class=\"string\">'sampleTask'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###本番環境用ファイルを生成する時<br>本番環境用のファイルを作る時は、生成漏れがあったら困るので更新差分にはしたくありません。<br>そこで<code>production</code>環境の変数を作ってあげて、更新差分の基準ファイルを振り分けするようにしました。</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">config =</div><div class=\"line\">\tproduction: <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'setProduction'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">  config.production = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'sampleTask'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( config.production )</div><div class=\"line\">\t   criterionFiles = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">\t   criterionFiles = <span class=\"string\">'./dest/html'</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\t<span class=\"string\">'./src/jade/!(_)*.jade'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(newer(criterionFiles))</div><div class=\"line\">\t.pipe(jade())</div><div class=\"line\">\t.pipe(gulp.dest(dest))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">\t<span class=\"string\">'sampleTask'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'build'</span>, [</div><div class=\"line\">\t<span class=\"string\">'setProduction'</span></div><div class=\"line\">\t<span class=\"string\">'default'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###まとめ<br>静的サイトのジェネレータとしてgulpを使う事が多いので、100枚以上あるhtmlファイルの生成とか画像ファイルの生成にかかる時間が劇的に減りました。<br>※ちなみに、gruntにも同様のプラグイン(grunt-newer)があります。</p>\n<p>参考<br><a href=\"https://www.npmjs.com/package/gulp-newer\" target=\"_blank\" rel=\"external\">gulp-newer</a><br><a href=\"http://laravel.io/forum/04-03-2014-how-to-handle-development-and-production-assets-with-gulp\" target=\"_blank\" rel=\"external\">How to handle development and production assets with gulp?</a></p>\n","excerpt":"","more":"<p>###更新したファイルだけをタスクの対象に</p>\n<p>gulpでファイルの自動生成をする時、対象ファイルの数が増えてくると生成に時間がかかってツラい感じになってきます。<br><code>gulp-newer</code>を使えば更新した差分ファイルのみをタスクの対象にしてくれるので幸せな感じになれます。</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp = <span class=\"built_in\">require</span> <span class=\"string\">'gulp'</span></div><div class=\"line\">newer = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-newer'</span></div><div class=\"line\">jade = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-jade'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'sampleTask'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">  <span class=\"comment\"># 更新差分の基準になるファイル</span></div><div class=\"line\">  criterionFiles = <span class=\"string\">'./dest/html'</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\t<span class=\"string\">'./src/jade/!(_)*.jade'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(newer(criterionFiles))</div><div class=\"line\">\t.pipe(jade())</div><div class=\"line\">\t.pipe(gulp.dest(dest))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">  <span class=\"string\">'sampleTask'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###本番環境用ファイルを生成する時<br>本番環境用のファイルを作る時は、生成漏れがあったら困るので更新差分にはしたくありません。<br>そこで<code>production</code>環境の変数を作ってあげて、更新差分の基準ファイルを振り分けするようにしました。</p>\n<figure class=\"highlight coffee\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">config =</div><div class=\"line\">\tproduction: <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'setProduction'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">  config.production = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'sampleTask'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( config.production )</div><div class=\"line\">\t   criterionFiles = <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">\t   criterionFiles = <span class=\"string\">'./dest/html'</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\t<span class=\"string\">'./src/jade/!(_)*.jade'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(newer(criterionFiles))</div><div class=\"line\">\t.pipe(jade())</div><div class=\"line\">\t.pipe(gulp.dest(dest))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">\t<span class=\"string\">'sampleTask'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'build'</span>, [</div><div class=\"line\">\t<span class=\"string\">'setProduction'</span></div><div class=\"line\">\t<span class=\"string\">'default'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###まとめ<br>静的サイトのジェネレータとしてgulpを使う事が多いので、100枚以上あるhtmlファイルの生成とか画像ファイルの生成にかかる時間が劇的に減りました。<br>※ちなみに、gruntにも同様のプラグイン(grunt-newer)があります。</p>\n<p>参考<br><a href=\"https://www.npmjs.com/package/gulp-newer\">gulp-newer</a><br><a href=\"http://laravel.io/forum/04-03-2014-how-to-handle-development-and-production-assets-with-gulp\">How to handle development and production assets with gulp?</a></p>\n"},{"title":"Node.jsでReact.jsのサーバーサイドレンダリング","id":"React-Server-side-rendering","date":"2015-04-09T15:00:00.000Z","_content":"\nReact.jsでwebアプリケーションを作る時に良いことの一つには、\nサーバーサイドレンダリングが自然な感じで出来るということがあるかと思います。\n\n基本的に違いは2つだけみたいです。\n- renderメソッドの代わりにrenderToString(特殊な状況ではrenderToStaticMarkUp)を使う\n- 描画対象のDOMノードは指定しない\n\nこんな感じで試してみました。\n```javascript\nvar React = require('react');\n\nvar ServerSide = React.createClass({\n  render: function () {\n    'use strict';\n    return (\n      <h1>Hello! React-Server-Side-Rendering.</h1>\n    );\n  }\n});\n\nmodule.exports = React.renderToString(<ServerSide />);\n\n// クライアントサイドだとこんな感じでDOMノードを指定してrenderしている\n// React.render(<ServerSide />, document.body);\n```\n\n###gulp\njsxで書いていたら、jsにコンパイルしてあげる必要があります。\n上のファイルを、例えばgulpでこんな感じにコンパイルしてあげます。\n\n```javascript\ngulp.task('default', function(){\n  return gulp.src('エントリーポイントへのパス')\n  .pipe(react())\n  .pipe(gulp.dest('生成先のディレクトリ'));\n});\n\n```\n\n###サーバー側\n[Hapi](http://hapijs.com/)を使ってサーバーを立てています。\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server();\nvar ServerSide = require('gulpで生成したファイルへのパス');\n\nserver.connection({\n  host: 'localhost',\n  port: 3000\n});\n\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: function ( req, reply ) {\n    // React.renderToStringで生成したDOMノードをレスポンスとして返します。\n    reply(ServerSide);\n  }\n});\n\nserver.start();\n```\n\nこれならクライアントサイドの延長で記述できそうで素敵です。\n","source":"_posts/2015-04-10-react-server-render.md","raw":"---\ntitle: \"Node.jsでReact.jsのサーバーサイドレンダリング\"\nid: React-Server-side-rendering\ndate: 2015-04-10\ntags:\n  - node.js\n  - server\n  - browser\n  - react.js\n  - javascript\n---\n\nReact.jsでwebアプリケーションを作る時に良いことの一つには、\nサーバーサイドレンダリングが自然な感じで出来るということがあるかと思います。\n\n基本的に違いは2つだけみたいです。\n- renderメソッドの代わりにrenderToString(特殊な状況ではrenderToStaticMarkUp)を使う\n- 描画対象のDOMノードは指定しない\n\nこんな感じで試してみました。\n```javascript\nvar React = require('react');\n\nvar ServerSide = React.createClass({\n  render: function () {\n    'use strict';\n    return (\n      <h1>Hello! React-Server-Side-Rendering.</h1>\n    );\n  }\n});\n\nmodule.exports = React.renderToString(<ServerSide />);\n\n// クライアントサイドだとこんな感じでDOMノードを指定してrenderしている\n// React.render(<ServerSide />, document.body);\n```\n\n###gulp\njsxで書いていたら、jsにコンパイルしてあげる必要があります。\n上のファイルを、例えばgulpでこんな感じにコンパイルしてあげます。\n\n```javascript\ngulp.task('default', function(){\n  return gulp.src('エントリーポイントへのパス')\n  .pipe(react())\n  .pipe(gulp.dest('生成先のディレクトリ'));\n});\n\n```\n\n###サーバー側\n[Hapi](http://hapijs.com/)を使ってサーバーを立てています。\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server();\nvar ServerSide = require('gulpで生成したファイルへのパス');\n\nserver.connection({\n  host: 'localhost',\n  port: 3000\n});\n\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: function ( req, reply ) {\n    // React.renderToStringで生成したDOMノードをレスポンスとして返します。\n    reply(ServerSide);\n  }\n});\n\nserver.start();\n```\n\nこれならクライアントサイドの延長で記述できそうで素敵です。\n","slug":"2015-04-10-react-server-render","published":1,"updated":"2016-08-11T00:45:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgjm000hg3kqiypilnzj","content":"<p>React.jsでwebアプリケーションを作る時に良いことの一つには、<br>サーバーサイドレンダリングが自然な感じで出来るということがあるかと思います。</p>\n<p>基本的に違いは2つだけみたいです。</p>\n<ul>\n<li>renderメソッドの代わりにrenderToString(特殊な状況ではrenderToStaticMarkUp)を使う</li>\n<li>描画対象のDOMノードは指定しない</li>\n</ul>\n<p>こんな感じで試してみました。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ServerSide = React.createClass(&#123;</div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello! React-Server-Side-Rendering.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = React.renderToString(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ServerSide</span> /&gt;</span>);</span></div><div class=\"line\"></div><div class=\"line\">// クライアントサイドだとこんな感じでDOMノードを指定してrenderしている</div><div class=\"line\">// React.render(<span class=\"tag\">&lt;<span class=\"name\">ServerSide</span> /&gt;</span>, document.body);</div></pre></td></tr></table></figure></p>\n<p>###gulp<br>jsxで書いていたら、jsにコンパイルしてあげる必要があります。<br>上のファイルを、例えばgulpでこんな感じにコンパイルしてあげます。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'エントリーポイントへのパス'</span>)</div><div class=\"line\">  .pipe(react())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'生成先のディレクトリ'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>###サーバー側<br><a href=\"http://hapijs.com/\" target=\"_blank\" rel=\"external\">Hapi</a>を使ってサーバーを立てています。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Hapi = <span class=\"built_in\">require</span>(<span class=\"string\">'hapi'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> Hapi.Server();</div><div class=\"line\"><span class=\"keyword\">var</span> ServerSide = <span class=\"built_in\">require</span>(<span class=\"string\">'gulpで生成したファイルへのパス'</span>);</div><div class=\"line\"></div><div class=\"line\">server.connection(&#123;</div><div class=\"line\">  host: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">  port: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.route(&#123;</div><div class=\"line\">  method: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  path: <span class=\"string\">'/'</span>,</div><div class=\"line\">  handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> req, reply </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// React.renderToStringで生成したDOMノードをレスポンスとして返します。</span></div><div class=\"line\">    reply(ServerSide);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.start();</div></pre></td></tr></table></figure>\n<p>これならクライアントサイドの延長で記述できそうで素敵です。</p>\n","excerpt":"","more":"<p>React.jsでwebアプリケーションを作る時に良いことの一つには、<br>サーバーサイドレンダリングが自然な感じで出来るということがあるかと思います。</p>\n<p>基本的に違いは2つだけみたいです。</p>\n<ul>\n<li>renderメソッドの代わりにrenderToString(特殊な状況ではrenderToStaticMarkUp)を使う</li>\n<li>描画対象のDOMノードは指定しない</li>\n</ul>\n<p>こんな感じで試してみました。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ServerSide = React.createClass(&#123;</div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello! React-Server-Side-Rendering.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = React.renderToString(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ServerSide</span> /&gt;</span>);</div><div class=\"line\"></div><div class=\"line\">// クライアントサイドだとこんな感じでDOMノードを指定してrenderしている</div><div class=\"line\">// React.render(<span class=\"tag\">&lt;<span class=\"name\">ServerSide</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure></p>\n<p>###gulp<br>jsxで書いていたら、jsにコンパイルしてあげる必要があります。<br>上のファイルを、例えばgulpでこんな感じにコンパイルしてあげます。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'エントリーポイントへのパス'</span>)</div><div class=\"line\">  .pipe(react())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'生成先のディレクトリ'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>###サーバー側<br><a href=\"http://hapijs.com/\">Hapi</a>を使ってサーバーを立てています。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Hapi = <span class=\"built_in\">require</span>(<span class=\"string\">'hapi'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> Hapi.Server();</div><div class=\"line\"><span class=\"keyword\">var</span> ServerSide = <span class=\"built_in\">require</span>(<span class=\"string\">'gulpで生成したファイルへのパス'</span>);</div><div class=\"line\"></div><div class=\"line\">server.connection(&#123;</div><div class=\"line\">  host: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">  port: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.route(&#123;</div><div class=\"line\">  method: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  path: <span class=\"string\">'/'</span>,</div><div class=\"line\">  handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> req, reply </span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// React.renderToStringで生成したDOMノードをレスポンスとして返します。</span></div><div class=\"line\">    reply(ServerSide);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.start();</div></pre></td></tr></table></figure>\n<p>これならクライアントサイドの延長で記述できそうで素敵です。</p>\n"},{"title":"Promiseで非同期処理をするメモ","id":"promise-of-defferd","date":"2015-04-13T10:20:20.000Z","_content":"\n非同期処理の書き方色々\n\nmyAsync.js\n```javascript\n  'use strict';\n\n  // Promiseオブジェクトをそのまま返す\n  let readAsync = new Promise(function (resolve, reject) {\n      fs.readFile('./README.md', function (err, data) {\n        resolve(data);\n      })\n    });\n\n  // Promiseオブジェクトを返す関数\n  let writeAsync = function (data) {\n    return new Promise(function (resolve, reject) {\n      fs.writeFile('./README-copy.md', data, function (err) {\n        resolve();\n      });\n    });\n  }\n\n  // Defferedオブジェクトのpromiseを返す\n  let renameAsync = function () {\n    var d = Promise.defer();\n    fs.rename('./README-copy.md', './README-copy-modified.md', function (err) {\n      d.resolve();\n    });\n    return d.promise;\n  };\n\n  // Generator\n  let AppendAsync = function* (){\n    fs.appendFile('./README-copy-modified.md', 'this string is appended.');\n    yield;\n  };\n\n  readAsync\n  .then(writeAsync)\n  .then(renameAsync)\n  .then(function () {\n    AppendAsync().next();\n  });\n```\n\n実行してみる\n```sh\nbabel-node myAsync.js\n```\n","source":"_posts/2015-04-13-promise-or-defferd.md","raw":"---\ntitle: \"Promiseで非同期処理をするメモ\"\nid: promise-of-defferd\ndate: 2015-04-13 19:20:20\ncategories:\ntags:\n  - node.js\n  - promise\n  - javascript\n  - es6\n---\n\n非同期処理の書き方色々\n\nmyAsync.js\n```javascript\n  'use strict';\n\n  // Promiseオブジェクトをそのまま返す\n  let readAsync = new Promise(function (resolve, reject) {\n      fs.readFile('./README.md', function (err, data) {\n        resolve(data);\n      })\n    });\n\n  // Promiseオブジェクトを返す関数\n  let writeAsync = function (data) {\n    return new Promise(function (resolve, reject) {\n      fs.writeFile('./README-copy.md', data, function (err) {\n        resolve();\n      });\n    });\n  }\n\n  // Defferedオブジェクトのpromiseを返す\n  let renameAsync = function () {\n    var d = Promise.defer();\n    fs.rename('./README-copy.md', './README-copy-modified.md', function (err) {\n      d.resolve();\n    });\n    return d.promise;\n  };\n\n  // Generator\n  let AppendAsync = function* (){\n    fs.appendFile('./README-copy-modified.md', 'this string is appended.');\n    yield;\n  };\n\n  readAsync\n  .then(writeAsync)\n  .then(renameAsync)\n  .then(function () {\n    AppendAsync().next();\n  });\n```\n\n実行してみる\n```sh\nbabel-node myAsync.js\n```\n","slug":"2015-04-13-promise-or-defferd","published":1,"updated":"2016-08-11T00:45:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgjv000jg3kqjrayl9y9","content":"<p>非同期処理の書き方色々</p>\n<p>myAsync.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promiseオブジェクトをそのまま返す</span></div><div class=\"line\"><span class=\"keyword\">let</span> readAsync = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(<span class=\"string\">'./README.md'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promiseオブジェクトを返す関数</span></div><div class=\"line\"><span class=\"keyword\">let</span> writeAsync = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.writeFile(<span class=\"string\">'./README-copy.md'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      resolve();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Defferedオブジェクトのpromiseを返す</span></div><div class=\"line\"><span class=\"keyword\">let</span> renameAsync = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"built_in\">Promise</span>.defer();</div><div class=\"line\">  fs.rename(<span class=\"string\">'./README-copy.md'</span>, <span class=\"string\">'./README-copy-modified.md'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    d.resolve();</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> d.promise;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Generator</span></div><div class=\"line\"><span class=\"keyword\">let</span> AppendAsync = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  fs.appendFile(<span class=\"string\">'./README-copy-modified.md'</span>, <span class=\"string\">'this string is appended.'</span>);</div><div class=\"line\">  <span class=\"keyword\">yield</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">readAsync</div><div class=\"line\">.then(writeAsync)</div><div class=\"line\">.then(renameAsync)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  AppendAsync().next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>実行してみる<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel-node myAsync.js</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>非同期処理の書き方色々</p>\n<p>myAsync.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promiseオブジェクトをそのまま返す</span></div><div class=\"line\"><span class=\"keyword\">let</span> readAsync = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(<span class=\"string\">'./README.md'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promiseオブジェクトを返す関数</span></div><div class=\"line\"><span class=\"keyword\">let</span> writeAsync = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.writeFile(<span class=\"string\">'./README-copy.md'</span>, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      resolve();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Defferedオブジェクトのpromiseを返す</span></div><div class=\"line\"><span class=\"keyword\">let</span> renameAsync = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"built_in\">Promise</span>.defer();</div><div class=\"line\">  fs.rename(<span class=\"string\">'./README-copy.md'</span>, <span class=\"string\">'./README-copy-modified.md'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    d.resolve();</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> d.promise;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Generator</span></div><div class=\"line\"><span class=\"keyword\">let</span> AppendAsync = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  fs.appendFile(<span class=\"string\">'./README-copy-modified.md'</span>, <span class=\"string\">'this string is appended.'</span>);</div><div class=\"line\">  <span class=\"keyword\">yield</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">readAsync</div><div class=\"line\">.then(writeAsync)</div><div class=\"line\">.then(renameAsync)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  AppendAsync().next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>実行してみる<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel-node myAsync.js</div></pre></td></tr></table></figure></p>\n"},{"title":"private npmを試してみた","id":"try-private-npm","date":"2015-04-15T08:03:25.000Z","_content":"\n以前より話が出ていた、npmのプライベートモジュールが公開されていました。\n[private-modules](https://www.npmjs.com/private-modules)\n![](https://www.evernote.com/shard/s168/sh/241a329b-f2a3-4a33-ad08-4b7fc59d573c/6ec829c5154bd20530db0c9b20b7fffc/deep/0/npm.png)\n\n##機能\n\n>- create and share unlimited private modules for $7/month\n>- Host as many private packages as you want\n>- Give read access or read-write access for those packages to any other paid user\n>- Install and use any packages that other paid users have given you read access to\n>- Collaborate on any packages that other paid users have given you write access to\n\n要旨としては\n\n- 月額7ドルでモジュールをプライベート公開に出来る\n- 任意の課金済みユーザーに読み書き権限の発行ができる\n\nということのようです。\n\n>Currently, private packages are only available for individual users, but support for organization accounts is coming soon. Feel free to create a user for your organization in the meantime, and we can upgrade it to an organization when support is here.\n\n企業(組織)アカウント向けの対応はこれからのようです。\n\n\n##導入の仕方\n\n1. [npmjs](https://www.npmjs.com)にサインアップして課金しておきます。\n※クレジットカード払いのみのようです。\n\n2. 任意のnpmの`package.json`の`name`プロパティに自分のユーザーアカウント名を入れます\n```json\n  public\n  \"name\": \"modulename\"\n\n  private\n  \"name\": \"@username/modulename\"\n```\n\n3. `npm publish`で公開します。\n\n\n説明が必要なほどの手順はないですね。。。\n既にnpmを公開したことがある人なら、ほぼやることはありません。\n課金して、モジュールの名前にユーザー名を入れるだけ。\n\nロードマップにあるという、企業アカウント向けの対応が始まったらnpmの使い方が変わってくるかも知れません。\n","source":"_posts/2015-04-15-private-npm.md","raw":"---\ntitle: \"private npmを試してみた\"\nid: try-private-npm\ndate: 2015-04-15 17:03:25\ncategories:\ntags:\n  - npm\n  - node.js\n---\n\n以前より話が出ていた、npmのプライベートモジュールが公開されていました。\n[private-modules](https://www.npmjs.com/private-modules)\n![](https://www.evernote.com/shard/s168/sh/241a329b-f2a3-4a33-ad08-4b7fc59d573c/6ec829c5154bd20530db0c9b20b7fffc/deep/0/npm.png)\n\n##機能\n\n>- create and share unlimited private modules for $7/month\n>- Host as many private packages as you want\n>- Give read access or read-write access for those packages to any other paid user\n>- Install and use any packages that other paid users have given you read access to\n>- Collaborate on any packages that other paid users have given you write access to\n\n要旨としては\n\n- 月額7ドルでモジュールをプライベート公開に出来る\n- 任意の課金済みユーザーに読み書き権限の発行ができる\n\nということのようです。\n\n>Currently, private packages are only available for individual users, but support for organization accounts is coming soon. Feel free to create a user for your organization in the meantime, and we can upgrade it to an organization when support is here.\n\n企業(組織)アカウント向けの対応はこれからのようです。\n\n\n##導入の仕方\n\n1. [npmjs](https://www.npmjs.com)にサインアップして課金しておきます。\n※クレジットカード払いのみのようです。\n\n2. 任意のnpmの`package.json`の`name`プロパティに自分のユーザーアカウント名を入れます\n```json\n  public\n  \"name\": \"modulename\"\n\n  private\n  \"name\": \"@username/modulename\"\n```\n\n3. `npm publish`で公開します。\n\n\n説明が必要なほどの手順はないですね。。。\n既にnpmを公開したことがある人なら、ほぼやることはありません。\n課金して、モジュールの名前にユーザー名を入れるだけ。\n\nロードマップにあるという、企業アカウント向けの対応が始まったらnpmの使い方が変わってくるかも知れません。\n","slug":"2015-04-15-private-npm","published":1,"updated":"2016-08-11T00:46:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgk9000mg3kqafmzx573","content":"<p>以前より話が出ていた、npmのプライベートモジュールが公開されていました。<br><a href=\"https://www.npmjs.com/private-modules\" target=\"_blank\" rel=\"external\">private-modules</a><br><img src=\"https://www.evernote.com/shard/s168/sh/241a329b-f2a3-4a33-ad08-4b7fc59d573c/6ec829c5154bd20530db0c9b20b7fffc/deep/0/npm.png\" alt=\"\"></p>\n<p>##機能</p>\n<blockquote>\n<ul>\n<li>create and share unlimited private modules for $7/month</li>\n<li>Host as many private packages as you want</li>\n<li>Give read access or read-write access for those packages to any other paid user</li>\n<li>Install and use any packages that other paid users have given you read access to</li>\n<li>Collaborate on any packages that other paid users have given you write access to</li>\n</ul>\n</blockquote>\n<p>要旨としては</p>\n<ul>\n<li>月額7ドルでモジュールをプライベート公開に出来る</li>\n<li>任意の課金済みユーザーに読み書き権限の発行ができる</li>\n</ul>\n<p>ということのようです。</p>\n<blockquote>\n<p>Currently, private packages are only available for individual users, but support for organization accounts is coming soon. Feel free to create a user for your organization in the meantime, and we can upgrade it to an organization when support is here.</p>\n</blockquote>\n<p>企業(組織)アカウント向けの対応はこれからのようです。</p>\n<p>##導入の仕方</p>\n<ol>\n<li><p><a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"external\">npmjs</a>にサインアップして課金しておきます。<br>※クレジットカード払いのみのようです。</p>\n</li>\n<li><p>任意のnpmの<code>package.json</code>の<code>name</code>プロパティに自分のユーザーアカウント名を入れます</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public</div><div class=\"line\">\"name\": \"modulename\"</div><div class=\"line\"></div><div class=\"line\">private</div><div class=\"line\">\"name\": \"@username/modulename\"</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>npm publish</code>で公開します。</p>\n</li>\n</ol>\n<p>説明が必要なほどの手順はないですね。。。<br>既にnpmを公開したことがある人なら、ほぼやることはありません。<br>課金して、モジュールの名前にユーザー名を入れるだけ。</p>\n<p>ロードマップにあるという、企業アカウント向けの対応が始まったらnpmの使い方が変わってくるかも知れません。</p>\n","excerpt":"","more":"<p>以前より話が出ていた、npmのプライベートモジュールが公開されていました。<br><a href=\"https://www.npmjs.com/private-modules\">private-modules</a><br><img src=\"https://www.evernote.com/shard/s168/sh/241a329b-f2a3-4a33-ad08-4b7fc59d573c/6ec829c5154bd20530db0c9b20b7fffc/deep/0/npm.png\" alt=\"\"></p>\n<p>##機能</p>\n<blockquote>\n<ul>\n<li>create and share unlimited private modules for $7/month</li>\n<li>Host as many private packages as you want</li>\n<li>Give read access or read-write access for those packages to any other paid user</li>\n<li>Install and use any packages that other paid users have given you read access to</li>\n<li>Collaborate on any packages that other paid users have given you write access to</li>\n</ul>\n</blockquote>\n<p>要旨としては</p>\n<ul>\n<li>月額7ドルでモジュールをプライベート公開に出来る</li>\n<li>任意の課金済みユーザーに読み書き権限の発行ができる</li>\n</ul>\n<p>ということのようです。</p>\n<blockquote>\n<p>Currently, private packages are only available for individual users, but support for organization accounts is coming soon. Feel free to create a user for your organization in the meantime, and we can upgrade it to an organization when support is here.</p>\n</blockquote>\n<p>企業(組織)アカウント向けの対応はこれからのようです。</p>\n<p>##導入の仕方</p>\n<ol>\n<li><p><a href=\"https://www.npmjs.com\">npmjs</a>にサインアップして課金しておきます。<br>※クレジットカード払いのみのようです。</p>\n</li>\n<li><p>任意のnpmの<code>package.json</code>の<code>name</code>プロパティに自分のユーザーアカウント名を入れます</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public</div><div class=\"line\">\"name\": \"modulename\"</div><div class=\"line\"></div><div class=\"line\">private</div><div class=\"line\">\"name\": \"@username/modulename\"</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>npm publish</code>で公開します。</p>\n</li>\n</ol>\n<p>説明が必要なほどの手順はないですね。。。<br>既にnpmを公開したことがある人なら、ほぼやることはありません。<br>課金して、モジュールの名前にユーザー名を入れるだけ。</p>\n<p>ロードマップにあるという、企業アカウント向けの対応が始まったらnpmの使い方が変わってくるかも知れません。</p>\n"},{"title":"なぜタスクランナーを使ったほうがいいのかをデザイナーに伝えるためにまとめた","id":"why-you-should-use-task-runner","date":"2015-05-13T10:54:03.000Z","_content":"\n近年のフロントエンド制作現場では`grunt`, `gulp` などのタスクランナーや、\n`browserify`, `webpack`などのビルドツールを使用するのが半ば常識となっています。\nなぜこういったツールを使うのか、社内のデザイナーに伝えるためにまとめてみました。\n\n##タスクランナーとは?\n現在要求されるレベルで成果物のクオリティを担保するためには、以下のような多岐にわたる処理が必要になります。\n\n*必要になる処理の例*\n- テンプレートエンジンによるHTMLファイルの生成\n- CSSプリプロセッサによるCSSの生成&圧縮\n- CSSスプライトの作成\n- JavaScriptファイルの依存関係解決&圧縮\n- Alt-JSファイルの変換\n- 各種画像の最適化\n- 他多数...\n\nこれら全てを手作業で行うのは、非現実的な選択肢と言えます。\nそこで、こういったタスクを全て自動化するためのツールが`grunt`/`gulp`に代表される、タスクランナーと呼ばれるツールです。\n\n###ビルドツール\n極々小規模なプロジェクト(数十行で完結する程度のもの)を除いて、`browserify`, `webpack`などのビルドツールを用いて\n`JavaScript`ファイルを生成する事が、スタンダードになってきています。\n\nこれには以下のような理由があります。\n- `CoffeeScript`や`TypeScript`など、`AltJS`の普及によって、実行用の`JavaScript`ファイルへの変換が必要になった\n- 既存の`JavaScript`にはモジュール機構が存在しないため、全ての関数がグローバルになってしまう問題があった(※2015年夏頃より勧告されるES6では`import`文によるモジュール機構が実装される)\n- モジュール機構が存在しないため、サードパーティ製ライブラリに対する依存状態が管理できず、運用が進むにつれてライブラリの要・不要が判別できなくなることが多かった\n- モジュール機構が存在しないため、手作業によるライブラリの読み込みの設定を余儀なくされた。そのため読み込み順によっては動作しないコードが出てくる問題があった\n\nこういった問題を解決するために、`browserify`, `webpack`に代表される、ビルドツールが用いられるようになりました。\nビルドツールによるビルド処理も、タスクランナーを用いて行われます。\n\n##導入\n`grunt`, `gulp`は共に、`node.js`というサーバーサイド`JavaScript`実行環境(PCで直接`JavaScript`を実行出来るようになるソフトウェア、と考えれば大体正しいです)を用いて実装されています。\n`grunt`, `gulp`のどちらも、使い方や導入方法、出来ることに大きな差はありません。\n各タスクの処理の仕方の差で、`gulp`の方が動作が速いので、新規のプロジェクトであれば`gulp`を使うのをお勧めします。\n\n詳しい導入方法を説明した記事は無数にあるので、`grunt 導入`とか`grunt how to use`などでググって下さい。\n\n以下なんかはわりと詳しく載っていてお勧めです。\n[Web デザイナーさん向け Grunt を使った コーディング作業の効率化、はじめの一歩](http://hyper-text.org/archives/2014/01/grunt_quick_start_for_web_designer.shtml)\n\n###大体の手順\n1. `node.js`をインストール  \n2. `grunt-cli`(Gruntコマンドラインクライアント)をインストール\n3. 各プロジェクトでGruntタスクを実行可能に\n\n一応これで伝わるかな。。。\nついでに普段使ってる`gulpfile.js`の雛形も置いておきます\n\n```coffeescript\ngulp = require 'gulp'\nbrowserSync = require 'browser-sync'\nreload = browserSync.reload\ndata = require 'gulp-data'\nutil = require('gulp-util')\ndebug = require 'gulp-debug'\nnewer = require 'gulp-newer'\ncompass = require 'gulp-compass'\nsourcemaps = require 'gulp-sourcemaps'\nminify = require 'gulp-minify-css'\ndel = require('del')\n\n# browserify\nbrowserify = require 'browserify'\ndebowerify = require 'debowerify'\nlicensify = require 'licensify'\nsource = require 'vinyl-source-stream'\nstreamify = require 'gulp-streamify'\nuglify = require 'gulp-uglify'\nbuffer = require 'vinyl-buffer'\n\n# jade\njade = require 'gulp-jade'\n\n# images\npngmin = require 'gulp-pngmin'\nimagemin = require 'gulp-imagemin'\njpegtran = require 'imagemin-jpegtran'\n\n# watch\nwatch = require 'gulp-watch'\n\n# deploy\nscp = require 'scp'\n\nsrc =\n\tjs : './src/javascript'\n\tcss : './src/sass'\n\thtml : './src/jade'\n\timage : './src/image'\n\tcopy : './src/copy'\n\nbuild =\n\tjs : './build/public'\n\tcss : './build/public'\n\thtml : './build'\n\timage : './build/public/image'\n\nenv =\n\tisProduct : false\n\tdeployToProduct : false\n\trootDev: '/path/to/staging'\n\trootPro: '/path/to/production'\n\ngulp.task 'deploy', ->\n\tdest = env.rootDev\n\n\tif env.deployToProduct\n\t\tdest = env.rootPro\n\telse\n\t\tdest = env.rootDev\n\n\tscp.send(\n\t\tfile : './deploy/*'\n\t\thost : 'hostname'\n\t\tuser : 'username'\n\t\tpath : dest\n\t, (e) ->\n\t\tutil.beep()\n\t\tconsole.log e\n\t)\n\ngulp.task 'changeEnv', ->\n\tenv.isProduct = true\n\tbuild =\n\t\tjs : './deploy/public'\n\t\tcss : './deploy/public'\n\t\thtml : './deploy'\n\t\timage : './deploy/public/image'\n\ngulp.task 'changeDeployEnv', ->\n\tenv.deployToProduct = true\n\ngulp.task 'css', ->\n\tif env.isProduct\n\t\tgulp.src(src.css + '/*.sass')\n\t\t.pipe compass(\n\t\t\tcss : build.css\n\t\t\tsass : src.css\n\t\t)\n\t\t.pipe minify()\n\t\t.pipe gulp.dest(build.css)\n\telse\n\t\tgulp.src(src.css + '/*.sass')\n\t\t.pipe sourcemaps.init()\n\t\t.pipe compass(\n\t\t\tcss : build.css\n\t\t\tsass : src.css\n\t\t)\n\t\t.pipe sourcemaps.write('./')\n\t\t.pipe gulp.dest(build.css)\n\ngulp.task 'html', ->\n\tif env.isProduct\n\t\topt = pretty : false\n\telse\n\t\topt = pretty : true\n\n\tgulp.src(src.html + '/*.jade')\n\t.pipe data (file) ->\n\t\treturn require src.html + '/index.json'\n\t.pipe(jade(opt))\n\t.pipe gulp.dest(build.html)\n\t.on 'error', (e) ->\n\t\tutil.beep();\n\t\tconsole.log e\n\treturn\n\ngulp.task 'js', ->\n\tif env.isProduct\n\t\tbrowserify\n\t\t\tentries : [src.js + '/index.coffee']\n\t\t\textensions : ['.coffee', '.js']\n\t\t.plugin licensify\n\t\t.transform 'coffeeify'\n\t\t.transform 'debowerify'\n\t\t.bundle()\n\t\t.pipe source('bundle.min.js')\n\t\t.pipe buffer()\n\t\t.pipe streamify uglify()\n\t\t.pipe gulp.dest(build.js)\n\telse\n\t\tbrowserify\n\t\t\tentries : [src.js + '/index.coffee']\n\t\t\textensions : ['.coffee', '.js']\n\t\t.plugin licensify\n\t\t.transform 'coffeeify'\n\t\t.transform 'debowerify'\n\t\t.bundle()\n\t\t.pipe source('bundle.min.js')\n\t\t.pipe buffer()\n\t\t.pipe sourcemaps.init\n\t\t\tloadMaps : true\n\t\t.pipe streamify uglify()\n\t\t.pipe sourcemaps.write('./')\n\t\t.pipe gulp.dest(build.js)\n\ngulp.task 'pngmin', ->\n\tgulp.src([\n\t\tsrc.image + '/*.png'\n\t\tsrc.image + '/**/*.png'\n\t])\n\t.pipe newer build.image\n\t.pipe pngmin()\n\t.pipe gulp.dest build.image\n\ngulp.task 'jpgmin', ->\n\tgulp.src([\n\t\tsrc.image + '/*.jpg'\n\t\tsrc.image + '/**/*.jpg'\n\t])\n\t.pipe imagemin(\n\t\tprpgressive : true\n\t\tsvgoPlugins : [{removeViewBox : false}]\n\t\tuse : [jpegtran()]\n\t)\n\t.pipe gulp.dest build.image\n\ngulp.task 'copy-dir', ->\n\tgulp.src([\n\t\tsrc.copy + \"/*\"\n\t\tsrc.copy + \"/**/*\"\n\t\tsrc.copy + \"/**/**/*\"\n\t])\n\t.pipe(gulp.dest(build.html))\n\ngulp.task 'copy-img', ->\n\tgulp.src([\n\t\tsrc.image + '/*.gif'\n\t\tsrc.image + '/**/*.gif'\n\t\tsrc.image + '/**/**/*.gif'\n\t])\n\t.pipe(gulp.dest(build.image))\n\ngulp.task 'img', [\n\t'pngmin'\n\t'jpgmin'\n\t'copy-img'\n]\n\ngulp.task 'browser', ->\n\tbrowserSync server :\n\t\tbaseDir : 'build'\n\t\tdirectory : true\n\treturn\n\ngulp.task 'clean', (cb) ->\n\tdel([\n\t\t'deploy/'\n\t], cb)\n\ngulp.task 'watch', ->\n\tgulp.watch([\n\t\t\tsrc.js + '/*.coffee'\n\t\t\tsrc.js + '/**/*.coffee'\n\t\t], [\n\t\t\t'js'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.html + '/*.jade'\n\t\t\tsrc.html + '/**/*.jade'\n\t\t], [\n\t\t\t'html'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.css + '/*.sass'\n\t\t\tsrc.css + '/**/*.sass'\n\t\t], [\n\t\t\t'css'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.image + '/*'\n\t\t\tsrc.image + '/**/*'\n\t\t], [\n\t\t\t'img'\n\t\t\treload\n\t])\n\treturn\n\ngulp.task 'default', [\n\t'css'\n\t'js'\n\t'html'\n\t'img'\n\t'copy-dir'\n]\n\ngulp.task 'server', [\n\t'default'\n\t'browser'\n\t'watch'\n]\n\ngulp.task 'build', [\n\t'clean'\n\t'changeEnv'\n], ->\n\tgulp.run 'default'\n\ngulp.task 'staging', [\n\t'deploy'\n]\n\ngulp.task 'production', [\n\t'changeDeployEnv'\n\t'deploy'\n]\n\n```\n","source":"_posts/2015-05-13-why-use-task-runner.md","raw":"---\ntitle: \"なぜタスクランナーを使ったほうがいいのかをデザイナーに伝えるためにまとめた\"\nid: why-you-should-use-task-runner\ndate: 2015-05-13 19:54:03\ncategories:\ntags:\n\t- gulp.js\n\t- grunt.js\n\t- sass\n\t- jade\n\t- javascript\n---\n\n近年のフロントエンド制作現場では`grunt`, `gulp` などのタスクランナーや、\n`browserify`, `webpack`などのビルドツールを使用するのが半ば常識となっています。\nなぜこういったツールを使うのか、社内のデザイナーに伝えるためにまとめてみました。\n\n##タスクランナーとは?\n現在要求されるレベルで成果物のクオリティを担保するためには、以下のような多岐にわたる処理が必要になります。\n\n*必要になる処理の例*\n- テンプレートエンジンによるHTMLファイルの生成\n- CSSプリプロセッサによるCSSの生成&圧縮\n- CSSスプライトの作成\n- JavaScriptファイルの依存関係解決&圧縮\n- Alt-JSファイルの変換\n- 各種画像の最適化\n- 他多数...\n\nこれら全てを手作業で行うのは、非現実的な選択肢と言えます。\nそこで、こういったタスクを全て自動化するためのツールが`grunt`/`gulp`に代表される、タスクランナーと呼ばれるツールです。\n\n###ビルドツール\n極々小規模なプロジェクト(数十行で完結する程度のもの)を除いて、`browserify`, `webpack`などのビルドツールを用いて\n`JavaScript`ファイルを生成する事が、スタンダードになってきています。\n\nこれには以下のような理由があります。\n- `CoffeeScript`や`TypeScript`など、`AltJS`の普及によって、実行用の`JavaScript`ファイルへの変換が必要になった\n- 既存の`JavaScript`にはモジュール機構が存在しないため、全ての関数がグローバルになってしまう問題があった(※2015年夏頃より勧告されるES6では`import`文によるモジュール機構が実装される)\n- モジュール機構が存在しないため、サードパーティ製ライブラリに対する依存状態が管理できず、運用が進むにつれてライブラリの要・不要が判別できなくなることが多かった\n- モジュール機構が存在しないため、手作業によるライブラリの読み込みの設定を余儀なくされた。そのため読み込み順によっては動作しないコードが出てくる問題があった\n\nこういった問題を解決するために、`browserify`, `webpack`に代表される、ビルドツールが用いられるようになりました。\nビルドツールによるビルド処理も、タスクランナーを用いて行われます。\n\n##導入\n`grunt`, `gulp`は共に、`node.js`というサーバーサイド`JavaScript`実行環境(PCで直接`JavaScript`を実行出来るようになるソフトウェア、と考えれば大体正しいです)を用いて実装されています。\n`grunt`, `gulp`のどちらも、使い方や導入方法、出来ることに大きな差はありません。\n各タスクの処理の仕方の差で、`gulp`の方が動作が速いので、新規のプロジェクトであれば`gulp`を使うのをお勧めします。\n\n詳しい導入方法を説明した記事は無数にあるので、`grunt 導入`とか`grunt how to use`などでググって下さい。\n\n以下なんかはわりと詳しく載っていてお勧めです。\n[Web デザイナーさん向け Grunt を使った コーディング作業の効率化、はじめの一歩](http://hyper-text.org/archives/2014/01/grunt_quick_start_for_web_designer.shtml)\n\n###大体の手順\n1. `node.js`をインストール  \n2. `grunt-cli`(Gruntコマンドラインクライアント)をインストール\n3. 各プロジェクトでGruntタスクを実行可能に\n\n一応これで伝わるかな。。。\nついでに普段使ってる`gulpfile.js`の雛形も置いておきます\n\n```coffeescript\ngulp = require 'gulp'\nbrowserSync = require 'browser-sync'\nreload = browserSync.reload\ndata = require 'gulp-data'\nutil = require('gulp-util')\ndebug = require 'gulp-debug'\nnewer = require 'gulp-newer'\ncompass = require 'gulp-compass'\nsourcemaps = require 'gulp-sourcemaps'\nminify = require 'gulp-minify-css'\ndel = require('del')\n\n# browserify\nbrowserify = require 'browserify'\ndebowerify = require 'debowerify'\nlicensify = require 'licensify'\nsource = require 'vinyl-source-stream'\nstreamify = require 'gulp-streamify'\nuglify = require 'gulp-uglify'\nbuffer = require 'vinyl-buffer'\n\n# jade\njade = require 'gulp-jade'\n\n# images\npngmin = require 'gulp-pngmin'\nimagemin = require 'gulp-imagemin'\njpegtran = require 'imagemin-jpegtran'\n\n# watch\nwatch = require 'gulp-watch'\n\n# deploy\nscp = require 'scp'\n\nsrc =\n\tjs : './src/javascript'\n\tcss : './src/sass'\n\thtml : './src/jade'\n\timage : './src/image'\n\tcopy : './src/copy'\n\nbuild =\n\tjs : './build/public'\n\tcss : './build/public'\n\thtml : './build'\n\timage : './build/public/image'\n\nenv =\n\tisProduct : false\n\tdeployToProduct : false\n\trootDev: '/path/to/staging'\n\trootPro: '/path/to/production'\n\ngulp.task 'deploy', ->\n\tdest = env.rootDev\n\n\tif env.deployToProduct\n\t\tdest = env.rootPro\n\telse\n\t\tdest = env.rootDev\n\n\tscp.send(\n\t\tfile : './deploy/*'\n\t\thost : 'hostname'\n\t\tuser : 'username'\n\t\tpath : dest\n\t, (e) ->\n\t\tutil.beep()\n\t\tconsole.log e\n\t)\n\ngulp.task 'changeEnv', ->\n\tenv.isProduct = true\n\tbuild =\n\t\tjs : './deploy/public'\n\t\tcss : './deploy/public'\n\t\thtml : './deploy'\n\t\timage : './deploy/public/image'\n\ngulp.task 'changeDeployEnv', ->\n\tenv.deployToProduct = true\n\ngulp.task 'css', ->\n\tif env.isProduct\n\t\tgulp.src(src.css + '/*.sass')\n\t\t.pipe compass(\n\t\t\tcss : build.css\n\t\t\tsass : src.css\n\t\t)\n\t\t.pipe minify()\n\t\t.pipe gulp.dest(build.css)\n\telse\n\t\tgulp.src(src.css + '/*.sass')\n\t\t.pipe sourcemaps.init()\n\t\t.pipe compass(\n\t\t\tcss : build.css\n\t\t\tsass : src.css\n\t\t)\n\t\t.pipe sourcemaps.write('./')\n\t\t.pipe gulp.dest(build.css)\n\ngulp.task 'html', ->\n\tif env.isProduct\n\t\topt = pretty : false\n\telse\n\t\topt = pretty : true\n\n\tgulp.src(src.html + '/*.jade')\n\t.pipe data (file) ->\n\t\treturn require src.html + '/index.json'\n\t.pipe(jade(opt))\n\t.pipe gulp.dest(build.html)\n\t.on 'error', (e) ->\n\t\tutil.beep();\n\t\tconsole.log e\n\treturn\n\ngulp.task 'js', ->\n\tif env.isProduct\n\t\tbrowserify\n\t\t\tentries : [src.js + '/index.coffee']\n\t\t\textensions : ['.coffee', '.js']\n\t\t.plugin licensify\n\t\t.transform 'coffeeify'\n\t\t.transform 'debowerify'\n\t\t.bundle()\n\t\t.pipe source('bundle.min.js')\n\t\t.pipe buffer()\n\t\t.pipe streamify uglify()\n\t\t.pipe gulp.dest(build.js)\n\telse\n\t\tbrowserify\n\t\t\tentries : [src.js + '/index.coffee']\n\t\t\textensions : ['.coffee', '.js']\n\t\t.plugin licensify\n\t\t.transform 'coffeeify'\n\t\t.transform 'debowerify'\n\t\t.bundle()\n\t\t.pipe source('bundle.min.js')\n\t\t.pipe buffer()\n\t\t.pipe sourcemaps.init\n\t\t\tloadMaps : true\n\t\t.pipe streamify uglify()\n\t\t.pipe sourcemaps.write('./')\n\t\t.pipe gulp.dest(build.js)\n\ngulp.task 'pngmin', ->\n\tgulp.src([\n\t\tsrc.image + '/*.png'\n\t\tsrc.image + '/**/*.png'\n\t])\n\t.pipe newer build.image\n\t.pipe pngmin()\n\t.pipe gulp.dest build.image\n\ngulp.task 'jpgmin', ->\n\tgulp.src([\n\t\tsrc.image + '/*.jpg'\n\t\tsrc.image + '/**/*.jpg'\n\t])\n\t.pipe imagemin(\n\t\tprpgressive : true\n\t\tsvgoPlugins : [{removeViewBox : false}]\n\t\tuse : [jpegtran()]\n\t)\n\t.pipe gulp.dest build.image\n\ngulp.task 'copy-dir', ->\n\tgulp.src([\n\t\tsrc.copy + \"/*\"\n\t\tsrc.copy + \"/**/*\"\n\t\tsrc.copy + \"/**/**/*\"\n\t])\n\t.pipe(gulp.dest(build.html))\n\ngulp.task 'copy-img', ->\n\tgulp.src([\n\t\tsrc.image + '/*.gif'\n\t\tsrc.image + '/**/*.gif'\n\t\tsrc.image + '/**/**/*.gif'\n\t])\n\t.pipe(gulp.dest(build.image))\n\ngulp.task 'img', [\n\t'pngmin'\n\t'jpgmin'\n\t'copy-img'\n]\n\ngulp.task 'browser', ->\n\tbrowserSync server :\n\t\tbaseDir : 'build'\n\t\tdirectory : true\n\treturn\n\ngulp.task 'clean', (cb) ->\n\tdel([\n\t\t'deploy/'\n\t], cb)\n\ngulp.task 'watch', ->\n\tgulp.watch([\n\t\t\tsrc.js + '/*.coffee'\n\t\t\tsrc.js + '/**/*.coffee'\n\t\t], [\n\t\t\t'js'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.html + '/*.jade'\n\t\t\tsrc.html + '/**/*.jade'\n\t\t], [\n\t\t\t'html'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.css + '/*.sass'\n\t\t\tsrc.css + '/**/*.sass'\n\t\t], [\n\t\t\t'css'\n\t\t\treload\n\t])\n\tgulp.watch([\n\t\t\tsrc.image + '/*'\n\t\t\tsrc.image + '/**/*'\n\t\t], [\n\t\t\t'img'\n\t\t\treload\n\t])\n\treturn\n\ngulp.task 'default', [\n\t'css'\n\t'js'\n\t'html'\n\t'img'\n\t'copy-dir'\n]\n\ngulp.task 'server', [\n\t'default'\n\t'browser'\n\t'watch'\n]\n\ngulp.task 'build', [\n\t'clean'\n\t'changeEnv'\n], ->\n\tgulp.run 'default'\n\ngulp.task 'staging', [\n\t'deploy'\n]\n\ngulp.task 'production', [\n\t'changeDeployEnv'\n\t'deploy'\n]\n\n```\n","slug":"2015-05-13-why-use-task-runner","published":1,"updated":"2016-08-11T00:46:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgkb000og3kqathyjoj5","content":"<p>近年のフロントエンド制作現場では<code>grunt</code>, <code>gulp</code> などのタスクランナーや、<br><code>browserify</code>, <code>webpack</code>などのビルドツールを使用するのが半ば常識となっています。<br>なぜこういったツールを使うのか、社内のデザイナーに伝えるためにまとめてみました。</p>\n<p>##タスクランナーとは?<br>現在要求されるレベルで成果物のクオリティを担保するためには、以下のような多岐にわたる処理が必要になります。</p>\n<p><em>必要になる処理の例</em></p>\n<ul>\n<li>テンプレートエンジンによるHTMLファイルの生成</li>\n<li>CSSプリプロセッサによるCSSの生成&amp;圧縮</li>\n<li>CSSスプライトの作成</li>\n<li>JavaScriptファイルの依存関係解決&amp;圧縮</li>\n<li>Alt-JSファイルの変換</li>\n<li>各種画像の最適化</li>\n<li>他多数…</li>\n</ul>\n<p>これら全てを手作業で行うのは、非現実的な選択肢と言えます。<br>そこで、こういったタスクを全て自動化するためのツールが<code>grunt</code>/<code>gulp</code>に代表される、タスクランナーと呼ばれるツールです。</p>\n<p>###ビルドツール<br>極々小規模なプロジェクト(数十行で完結する程度のもの)を除いて、<code>browserify</code>, <code>webpack</code>などのビルドツールを用いて<br><code>JavaScript</code>ファイルを生成する事が、スタンダードになってきています。</p>\n<p>これには以下のような理由があります。</p>\n<ul>\n<li><code>CoffeeScript</code>や<code>TypeScript</code>など、<code>AltJS</code>の普及によって、実行用の<code>JavaScript</code>ファイルへの変換が必要になった</li>\n<li>既存の<code>JavaScript</code>にはモジュール機構が存在しないため、全ての関数がグローバルになってしまう問題があった(※2015年夏頃より勧告されるES6では<code>import</code>文によるモジュール機構が実装される)</li>\n<li>モジュール機構が存在しないため、サードパーティ製ライブラリに対する依存状態が管理できず、運用が進むにつれてライブラリの要・不要が判別できなくなることが多かった</li>\n<li>モジュール機構が存在しないため、手作業によるライブラリの読み込みの設定を余儀なくされた。そのため読み込み順によっては動作しないコードが出てくる問題があった</li>\n</ul>\n<p>こういった問題を解決するために、<code>browserify</code>, <code>webpack</code>に代表される、ビルドツールが用いられるようになりました。<br>ビルドツールによるビルド処理も、タスクランナーを用いて行われます。</p>\n<p>##導入<br><code>grunt</code>, <code>gulp</code>は共に、<code>node.js</code>というサーバーサイド<code>JavaScript</code>実行環境(PCで直接<code>JavaScript</code>を実行出来るようになるソフトウェア、と考えれば大体正しいです)を用いて実装されています。<br><code>grunt</code>, <code>gulp</code>のどちらも、使い方や導入方法、出来ることに大きな差はありません。<br>各タスクの処理の仕方の差で、<code>gulp</code>の方が動作が速いので、新規のプロジェクトであれば<code>gulp</code>を使うのをお勧めします。</p>\n<p>詳しい導入方法を説明した記事は無数にあるので、<code>grunt 導入</code>とか<code>grunt how to use</code>などでググって下さい。</p>\n<p>以下なんかはわりと詳しく載っていてお勧めです。<br><a href=\"http://hyper-text.org/archives/2014/01/grunt_quick_start_for_web_designer.shtml\" target=\"_blank\" rel=\"external\">Web デザイナーさん向け Grunt を使った コーディング作業の効率化、はじめの一歩</a></p>\n<p>###大体の手順</p>\n<ol>\n<li><code>node.js</code>をインストール  </li>\n<li><code>grunt-cli</code>(Gruntコマンドラインクライアント)をインストール</li>\n<li>各プロジェクトでGruntタスクを実行可能に</li>\n</ol>\n<p>一応これで伝わるかな。。。<br>ついでに普段使ってる<code>gulpfile.js</code>の雛形も置いておきます</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp = <span class=\"built_in\">require</span> <span class=\"string\">'gulp'</span></div><div class=\"line\">browserSync = <span class=\"built_in\">require</span> <span class=\"string\">'browser-sync'</span></div><div class=\"line\">reload = browserSync.reload</div><div class=\"line\">data = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-data'</span></div><div class=\"line\">util = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</div><div class=\"line\">debug = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-debug'</span></div><div class=\"line\">newer = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-newer'</span></div><div class=\"line\">compass = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-compass'</span></div><div class=\"line\">sourcemaps = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-sourcemaps'</span></div><div class=\"line\">minify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-minify-css'</span></div><div class=\"line\">del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># browserify</span></div><div class=\"line\">browserify = <span class=\"built_in\">require</span> <span class=\"string\">'browserify'</span></div><div class=\"line\">debowerify = <span class=\"built_in\">require</span> <span class=\"string\">'debowerify'</span></div><div class=\"line\">licensify = <span class=\"built_in\">require</span> <span class=\"string\">'licensify'</span></div><div class=\"line\">source = <span class=\"built_in\">require</span> <span class=\"string\">'vinyl-source-stream'</span></div><div class=\"line\">streamify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-streamify'</span></div><div class=\"line\">uglify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-uglify'</span></div><div class=\"line\">buffer = <span class=\"built_in\">require</span> <span class=\"string\">'vinyl-buffer'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># jade</span></div><div class=\"line\">jade = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-jade'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># images</span></div><div class=\"line\">pngmin = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-pngmin'</span></div><div class=\"line\">imagemin = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-imagemin'</span></div><div class=\"line\">jpegtran = <span class=\"built_in\">require</span> <span class=\"string\">'imagemin-jpegtran'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># watch</span></div><div class=\"line\">watch = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-watch'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># deploy</span></div><div class=\"line\">scp = <span class=\"built_in\">require</span> <span class=\"string\">'scp'</span></div><div class=\"line\"></div><div class=\"line\">src =</div><div class=\"line\">\tjs : <span class=\"string\">'./src/javascript'</span></div><div class=\"line\">\tcss : <span class=\"string\">'./src/sass'</span></div><div class=\"line\">\thtml : <span class=\"string\">'./src/jade'</span></div><div class=\"line\">\timage : <span class=\"string\">'./src/image'</span></div><div class=\"line\">\tcopy : <span class=\"string\">'./src/copy'</span></div><div class=\"line\"></div><div class=\"line\">build =</div><div class=\"line\">\tjs : <span class=\"string\">'./build/public'</span></div><div class=\"line\">\tcss : <span class=\"string\">'./build/public'</span></div><div class=\"line\">\thtml : <span class=\"string\">'./build'</span></div><div class=\"line\">\timage : <span class=\"string\">'./build/public/image'</span></div><div class=\"line\"></div><div class=\"line\">env =</div><div class=\"line\">\tisProduct : <span class=\"literal\">false</span></div><div class=\"line\">\tdeployToProduct : <span class=\"literal\">false</span></div><div class=\"line\">\trootDev: <span class=\"string\">'/path/to/staging'</span></div><div class=\"line\">\trootPro: <span class=\"string\">'/path/to/production'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'deploy'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tdest = env.rootDev</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.deployToProduct</div><div class=\"line\">\t\tdest = env.rootPro</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tdest = env.rootDev</div><div class=\"line\"></div><div class=\"line\">\tscp.send(</div><div class=\"line\">\t\tfile : <span class=\"string\">'./deploy/*'</span></div><div class=\"line\">\t\thost : <span class=\"string\">'hostname'</span></div><div class=\"line\">\t\tuser : <span class=\"string\">'username'</span></div><div class=\"line\">\t\tpath : dest</div><div class=\"line\">\t, <span class=\"function\"><span class=\"params\">(e)</span> -&gt;</span></div><div class=\"line\">\t\tutil.beep()</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log e</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'changeEnv'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tenv.isProduct = <span class=\"literal\">true</span></div><div class=\"line\">\tbuild =</div><div class=\"line\">\t\tjs : <span class=\"string\">'./deploy/public'</span></div><div class=\"line\">\t\tcss : <span class=\"string\">'./deploy/public'</span></div><div class=\"line\">\t\thtml : <span class=\"string\">'./deploy'</span></div><div class=\"line\">\t\timage : <span class=\"string\">'./deploy/public/image'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'changeDeployEnv'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tenv.deployToProduct = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'css'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\tgulp.src(src.css + <span class=\"string\">'/*.sass'</span>)</div><div class=\"line\">\t\t.pipe compass(</div><div class=\"line\">\t\t\tcss : build.css</div><div class=\"line\">\t\t\tsass : src.css</div><div class=\"line\">\t\t)</div><div class=\"line\">\t\t.pipe minify()</div><div class=\"line\">\t\t.pipe gulp.dest(build.css)</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tgulp.src(src.css + <span class=\"string\">'/*.sass'</span>)</div><div class=\"line\">\t\t.pipe sourcemaps.init()</div><div class=\"line\">\t\t.pipe compass(</div><div class=\"line\">\t\t\tcss : build.css</div><div class=\"line\">\t\t\tsass : src.css</div><div class=\"line\">\t\t)</div><div class=\"line\">\t\t.pipe sourcemaps.write(<span class=\"string\">'./'</span>)</div><div class=\"line\">\t\t.pipe gulp.dest(build.css)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'html'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\topt = pretty : <span class=\"literal\">false</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\topt = pretty : <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src(src.html + <span class=\"string\">'/*.jade'</span>)</div><div class=\"line\">\t.pipe data (file) -&gt;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">require</span> src.html + <span class=\"string\">'/index.json'</span></div><div class=\"line\">\t.pipe(jade(opt))</div><div class=\"line\">\t.pipe gulp.dest(build.html)</div><div class=\"line\">\t.<span class=\"literal\">on</span> <span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"params\">(e)</span> -&gt;</span></div><div class=\"line\">\t\tutil.beep();</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log e</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'js'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\tbrowserify</div><div class=\"line\">\t\t\tentries : [src.js + <span class=\"string\">'/index.coffee'</span>]</div><div class=\"line\">\t\t\textensions : [<span class=\"string\">'.coffee'</span>, <span class=\"string\">'.js'</span>]</div><div class=\"line\">\t\t.plugin licensify</div><div class=\"line\">\t\t.transform <span class=\"string\">'coffeeify'</span></div><div class=\"line\">\t\t.transform <span class=\"string\">'debowerify'</span></div><div class=\"line\">\t\t.bundle()</div><div class=\"line\">\t\t.pipe source(<span class=\"string\">'bundle.min.js'</span>)</div><div class=\"line\">\t\t.pipe buffer()</div><div class=\"line\">\t\t.pipe streamify uglify()</div><div class=\"line\">\t\t.pipe gulp.dest(build.js)</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tbrowserify</div><div class=\"line\">\t\t\tentries : [src.js + <span class=\"string\">'/index.coffee'</span>]</div><div class=\"line\">\t\t\textensions : [<span class=\"string\">'.coffee'</span>, <span class=\"string\">'.js'</span>]</div><div class=\"line\">\t\t.plugin licensify</div><div class=\"line\">\t\t.transform <span class=\"string\">'coffeeify'</span></div><div class=\"line\">\t\t.transform <span class=\"string\">'debowerify'</span></div><div class=\"line\">\t\t.bundle()</div><div class=\"line\">\t\t.pipe source(<span class=\"string\">'bundle.min.js'</span>)</div><div class=\"line\">\t\t.pipe buffer()</div><div class=\"line\">\t\t.pipe sourcemaps.init</div><div class=\"line\">\t\t\tloadMaps : <span class=\"literal\">true</span></div><div class=\"line\">\t\t.pipe streamify uglify()</div><div class=\"line\">\t\t.pipe sourcemaps.write(<span class=\"string\">'./'</span>)</div><div class=\"line\">\t\t.pipe gulp.dest(build.js)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'pngmin'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.png'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.png'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe newer build.image</div><div class=\"line\">\t.pipe pngmin()</div><div class=\"line\">\t.pipe gulp.dest build.image</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'jpgmin'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.jpg'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.jpg'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe imagemin(</div><div class=\"line\">\t\tprpgressive : <span class=\"literal\">true</span></div><div class=\"line\">\t\tsvgoPlugins : [&#123;removeViewBox : <span class=\"literal\">false</span>&#125;]</div><div class=\"line\">\t\tuse : [jpegtran()]</div><div class=\"line\">\t)</div><div class=\"line\">\t.pipe gulp.dest build.image</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'copy-dir'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/*\"</span></div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/**/*\"</span></div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/**/**/*\"</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(gulp.dest(build.html))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'copy-img'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.gif'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.gif'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/**/*.gif'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(gulp.dest(build.image))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'img'</span>, [</div><div class=\"line\">\t<span class=\"string\">'pngmin'</span></div><div class=\"line\">\t<span class=\"string\">'jpgmin'</span></div><div class=\"line\">\t<span class=\"string\">'copy-img'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'browser'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tbrowserSync server :</div><div class=\"line\">\t\tbaseDir : <span class=\"string\">'build'</span></div><div class=\"line\">\t\tdirectory : <span class=\"literal\">true</span></div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"params\">(cb)</span> -&gt;</span></div><div class=\"line\">\tdel([</div><div class=\"line\">\t\t<span class=\"string\">'deploy/'</span></div><div class=\"line\">\t], cb)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'watch'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.js + <span class=\"string\">'/*.coffee'</span></div><div class=\"line\">\t\t\tsrc.js + <span class=\"string\">'/**/*.coffee'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'js'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.html + <span class=\"string\">'/*.jade'</span></div><div class=\"line\">\t\t\tsrc.html + <span class=\"string\">'/**/*.jade'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'html'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.css + <span class=\"string\">'/*.sass'</span></div><div class=\"line\">\t\t\tsrc.css + <span class=\"string\">'/**/*.sass'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'css'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.image + <span class=\"string\">'/*'</span></div><div class=\"line\">\t\t\tsrc.image + <span class=\"string\">'/**/*'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'img'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">\t<span class=\"string\">'css'</span></div><div class=\"line\">\t<span class=\"string\">'js'</span></div><div class=\"line\">\t<span class=\"string\">'html'</span></div><div class=\"line\">\t<span class=\"string\">'img'</span></div><div class=\"line\">\t<span class=\"string\">'copy-dir'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'server'</span>, [</div><div class=\"line\">\t<span class=\"string\">'default'</span></div><div class=\"line\">\t<span class=\"string\">'browser'</span></div><div class=\"line\">\t<span class=\"string\">'watch'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'build'</span>, [</div><div class=\"line\">\t<span class=\"string\">'clean'</span></div><div class=\"line\">\t<span class=\"string\">'changeEnv'</span></div><div class=\"line\">], <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.run <span class=\"string\">'default'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'staging'</span>, [</div><div class=\"line\">\t<span class=\"string\">'deploy'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'production'</span>, [</div><div class=\"line\">\t<span class=\"string\">'changeDeployEnv'</span></div><div class=\"line\">\t<span class=\"string\">'deploy'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>近年のフロントエンド制作現場では<code>grunt</code>, <code>gulp</code> などのタスクランナーや、<br><code>browserify</code>, <code>webpack</code>などのビルドツールを使用するのが半ば常識となっています。<br>なぜこういったツールを使うのか、社内のデザイナーに伝えるためにまとめてみました。</p>\n<p>##タスクランナーとは?<br>現在要求されるレベルで成果物のクオリティを担保するためには、以下のような多岐にわたる処理が必要になります。</p>\n<p><em>必要になる処理の例</em></p>\n<ul>\n<li>テンプレートエンジンによるHTMLファイルの生成</li>\n<li>CSSプリプロセッサによるCSSの生成&amp;圧縮</li>\n<li>CSSスプライトの作成</li>\n<li>JavaScriptファイルの依存関係解決&amp;圧縮</li>\n<li>Alt-JSファイルの変換</li>\n<li>各種画像の最適化</li>\n<li>他多数…</li>\n</ul>\n<p>これら全てを手作業で行うのは、非現実的な選択肢と言えます。<br>そこで、こういったタスクを全て自動化するためのツールが<code>grunt</code>/<code>gulp</code>に代表される、タスクランナーと呼ばれるツールです。</p>\n<p>###ビルドツール<br>極々小規模なプロジェクト(数十行で完結する程度のもの)を除いて、<code>browserify</code>, <code>webpack</code>などのビルドツールを用いて<br><code>JavaScript</code>ファイルを生成する事が、スタンダードになってきています。</p>\n<p>これには以下のような理由があります。</p>\n<ul>\n<li><code>CoffeeScript</code>や<code>TypeScript</code>など、<code>AltJS</code>の普及によって、実行用の<code>JavaScript</code>ファイルへの変換が必要になった</li>\n<li>既存の<code>JavaScript</code>にはモジュール機構が存在しないため、全ての関数がグローバルになってしまう問題があった(※2015年夏頃より勧告されるES6では<code>import</code>文によるモジュール機構が実装される)</li>\n<li>モジュール機構が存在しないため、サードパーティ製ライブラリに対する依存状態が管理できず、運用が進むにつれてライブラリの要・不要が判別できなくなることが多かった</li>\n<li>モジュール機構が存在しないため、手作業によるライブラリの読み込みの設定を余儀なくされた。そのため読み込み順によっては動作しないコードが出てくる問題があった</li>\n</ul>\n<p>こういった問題を解決するために、<code>browserify</code>, <code>webpack</code>に代表される、ビルドツールが用いられるようになりました。<br>ビルドツールによるビルド処理も、タスクランナーを用いて行われます。</p>\n<p>##導入<br><code>grunt</code>, <code>gulp</code>は共に、<code>node.js</code>というサーバーサイド<code>JavaScript</code>実行環境(PCで直接<code>JavaScript</code>を実行出来るようになるソフトウェア、と考えれば大体正しいです)を用いて実装されています。<br><code>grunt</code>, <code>gulp</code>のどちらも、使い方や導入方法、出来ることに大きな差はありません。<br>各タスクの処理の仕方の差で、<code>gulp</code>の方が動作が速いので、新規のプロジェクトであれば<code>gulp</code>を使うのをお勧めします。</p>\n<p>詳しい導入方法を説明した記事は無数にあるので、<code>grunt 導入</code>とか<code>grunt how to use</code>などでググって下さい。</p>\n<p>以下なんかはわりと詳しく載っていてお勧めです。<br><a href=\"http://hyper-text.org/archives/2014/01/grunt_quick_start_for_web_designer.shtml\">Web デザイナーさん向け Grunt を使った コーディング作業の効率化、はじめの一歩</a></p>\n<p>###大体の手順</p>\n<ol>\n<li><code>node.js</code>をインストール  </li>\n<li><code>grunt-cli</code>(Gruntコマンドラインクライアント)をインストール</li>\n<li>各プロジェクトでGruntタスクを実行可能に</li>\n</ol>\n<p>一応これで伝わるかな。。。<br>ついでに普段使ってる<code>gulpfile.js</code>の雛形も置いておきます</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp = <span class=\"built_in\">require</span> <span class=\"string\">'gulp'</span></div><div class=\"line\">browserSync = <span class=\"built_in\">require</span> <span class=\"string\">'browser-sync'</span></div><div class=\"line\">reload = browserSync.reload</div><div class=\"line\">data = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-data'</span></div><div class=\"line\">util = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</div><div class=\"line\">debug = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-debug'</span></div><div class=\"line\">newer = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-newer'</span></div><div class=\"line\">compass = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-compass'</span></div><div class=\"line\">sourcemaps = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-sourcemaps'</span></div><div class=\"line\">minify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-minify-css'</span></div><div class=\"line\">del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># browserify</span></div><div class=\"line\">browserify = <span class=\"built_in\">require</span> <span class=\"string\">'browserify'</span></div><div class=\"line\">debowerify = <span class=\"built_in\">require</span> <span class=\"string\">'debowerify'</span></div><div class=\"line\">licensify = <span class=\"built_in\">require</span> <span class=\"string\">'licensify'</span></div><div class=\"line\">source = <span class=\"built_in\">require</span> <span class=\"string\">'vinyl-source-stream'</span></div><div class=\"line\">streamify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-streamify'</span></div><div class=\"line\">uglify = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-uglify'</span></div><div class=\"line\">buffer = <span class=\"built_in\">require</span> <span class=\"string\">'vinyl-buffer'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># jade</span></div><div class=\"line\">jade = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-jade'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># images</span></div><div class=\"line\">pngmin = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-pngmin'</span></div><div class=\"line\">imagemin = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-imagemin'</span></div><div class=\"line\">jpegtran = <span class=\"built_in\">require</span> <span class=\"string\">'imagemin-jpegtran'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># watch</span></div><div class=\"line\">watch = <span class=\"built_in\">require</span> <span class=\"string\">'gulp-watch'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># deploy</span></div><div class=\"line\">scp = <span class=\"built_in\">require</span> <span class=\"string\">'scp'</span></div><div class=\"line\"></div><div class=\"line\">src =</div><div class=\"line\">\tjs : <span class=\"string\">'./src/javascript'</span></div><div class=\"line\">\tcss : <span class=\"string\">'./src/sass'</span></div><div class=\"line\">\thtml : <span class=\"string\">'./src/jade'</span></div><div class=\"line\">\timage : <span class=\"string\">'./src/image'</span></div><div class=\"line\">\tcopy : <span class=\"string\">'./src/copy'</span></div><div class=\"line\"></div><div class=\"line\">build =</div><div class=\"line\">\tjs : <span class=\"string\">'./build/public'</span></div><div class=\"line\">\tcss : <span class=\"string\">'./build/public'</span></div><div class=\"line\">\thtml : <span class=\"string\">'./build'</span></div><div class=\"line\">\timage : <span class=\"string\">'./build/public/image'</span></div><div class=\"line\"></div><div class=\"line\">env =</div><div class=\"line\">\tisProduct : <span class=\"literal\">false</span></div><div class=\"line\">\tdeployToProduct : <span class=\"literal\">false</span></div><div class=\"line\">\trootDev: <span class=\"string\">'/path/to/staging'</span></div><div class=\"line\">\trootPro: <span class=\"string\">'/path/to/production'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'deploy'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tdest = env.rootDev</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.deployToProduct</div><div class=\"line\">\t\tdest = env.rootPro</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tdest = env.rootDev</div><div class=\"line\"></div><div class=\"line\">\tscp.send(</div><div class=\"line\">\t\tfile : <span class=\"string\">'./deploy/*'</span></div><div class=\"line\">\t\thost : <span class=\"string\">'hostname'</span></div><div class=\"line\">\t\tuser : <span class=\"string\">'username'</span></div><div class=\"line\">\t\tpath : dest</div><div class=\"line\">\t, <span class=\"function\"><span class=\"params\">(e)</span> -&gt;</span></div><div class=\"line\">\t\tutil.beep()</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log e</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'changeEnv'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tenv.isProduct = <span class=\"literal\">true</span></div><div class=\"line\">\tbuild =</div><div class=\"line\">\t\tjs : <span class=\"string\">'./deploy/public'</span></div><div class=\"line\">\t\tcss : <span class=\"string\">'./deploy/public'</span></div><div class=\"line\">\t\thtml : <span class=\"string\">'./deploy'</span></div><div class=\"line\">\t\timage : <span class=\"string\">'./deploy/public/image'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'changeDeployEnv'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tenv.deployToProduct = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'css'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\tgulp.src(src.css + <span class=\"string\">'/*.sass'</span>)</div><div class=\"line\">\t\t.pipe compass(</div><div class=\"line\">\t\t\tcss : build.css</div><div class=\"line\">\t\t\tsass : src.css</div><div class=\"line\">\t\t)</div><div class=\"line\">\t\t.pipe minify()</div><div class=\"line\">\t\t.pipe gulp.dest(build.css)</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tgulp.src(src.css + <span class=\"string\">'/*.sass'</span>)</div><div class=\"line\">\t\t.pipe sourcemaps.init()</div><div class=\"line\">\t\t.pipe compass(</div><div class=\"line\">\t\t\tcss : build.css</div><div class=\"line\">\t\t\tsass : src.css</div><div class=\"line\">\t\t)</div><div class=\"line\">\t\t.pipe sourcemaps.write(<span class=\"string\">'./'</span>)</div><div class=\"line\">\t\t.pipe gulp.dest(build.css)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'html'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\topt = pretty : <span class=\"literal\">false</span></div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\topt = pretty : <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">\tgulp.src(src.html + <span class=\"string\">'/*.jade'</span>)</div><div class=\"line\">\t.pipe data (file) -&gt;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">require</span> src.html + <span class=\"string\">'/index.json'</span></div><div class=\"line\">\t.pipe(jade(opt))</div><div class=\"line\">\t.pipe gulp.dest(build.html)</div><div class=\"line\">\t.<span class=\"literal\">on</span> <span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"params\">(e)</span> -&gt;</span></div><div class=\"line\">\t\tutil.beep();</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log e</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'js'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> env.isProduct</div><div class=\"line\">\t\tbrowserify</div><div class=\"line\">\t\t\tentries : [src.js + <span class=\"string\">'/index.coffee'</span>]</div><div class=\"line\">\t\t\textensions : [<span class=\"string\">'.coffee'</span>, <span class=\"string\">'.js'</span>]</div><div class=\"line\">\t\t.plugin licensify</div><div class=\"line\">\t\t.transform <span class=\"string\">'coffeeify'</span></div><div class=\"line\">\t\t.transform <span class=\"string\">'debowerify'</span></div><div class=\"line\">\t\t.bundle()</div><div class=\"line\">\t\t.pipe source(<span class=\"string\">'bundle.min.js'</span>)</div><div class=\"line\">\t\t.pipe buffer()</div><div class=\"line\">\t\t.pipe streamify uglify()</div><div class=\"line\">\t\t.pipe gulp.dest(build.js)</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tbrowserify</div><div class=\"line\">\t\t\tentries : [src.js + <span class=\"string\">'/index.coffee'</span>]</div><div class=\"line\">\t\t\textensions : [<span class=\"string\">'.coffee'</span>, <span class=\"string\">'.js'</span>]</div><div class=\"line\">\t\t.plugin licensify</div><div class=\"line\">\t\t.transform <span class=\"string\">'coffeeify'</span></div><div class=\"line\">\t\t.transform <span class=\"string\">'debowerify'</span></div><div class=\"line\">\t\t.bundle()</div><div class=\"line\">\t\t.pipe source(<span class=\"string\">'bundle.min.js'</span>)</div><div class=\"line\">\t\t.pipe buffer()</div><div class=\"line\">\t\t.pipe sourcemaps.init</div><div class=\"line\">\t\t\tloadMaps : <span class=\"literal\">true</span></div><div class=\"line\">\t\t.pipe streamify uglify()</div><div class=\"line\">\t\t.pipe sourcemaps.write(<span class=\"string\">'./'</span>)</div><div class=\"line\">\t\t.pipe gulp.dest(build.js)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'pngmin'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.png'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.png'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe newer build.image</div><div class=\"line\">\t.pipe pngmin()</div><div class=\"line\">\t.pipe gulp.dest build.image</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'jpgmin'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.jpg'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.jpg'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe imagemin(</div><div class=\"line\">\t\tprpgressive : <span class=\"literal\">true</span></div><div class=\"line\">\t\tsvgoPlugins : [&#123;removeViewBox : <span class=\"literal\">false</span>&#125;]</div><div class=\"line\">\t\tuse : [jpegtran()]</div><div class=\"line\">\t)</div><div class=\"line\">\t.pipe gulp.dest build.image</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'copy-dir'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/*\"</span></div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/**/*\"</span></div><div class=\"line\">\t\tsrc.copy + <span class=\"string\">\"/**/**/*\"</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(gulp.dest(build.html))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'copy-img'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.src([</div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/*.gif'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/*.gif'</span></div><div class=\"line\">\t\tsrc.image + <span class=\"string\">'/**/**/*.gif'</span></div><div class=\"line\">\t])</div><div class=\"line\">\t.pipe(gulp.dest(build.image))</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'img'</span>, [</div><div class=\"line\">\t<span class=\"string\">'pngmin'</span></div><div class=\"line\">\t<span class=\"string\">'jpgmin'</span></div><div class=\"line\">\t<span class=\"string\">'copy-img'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'browser'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tbrowserSync server :</div><div class=\"line\">\t\tbaseDir : <span class=\"string\">'build'</span></div><div class=\"line\">\t\tdirectory : <span class=\"literal\">true</span></div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"params\">(cb)</span> -&gt;</span></div><div class=\"line\">\tdel([</div><div class=\"line\">\t\t<span class=\"string\">'deploy/'</span></div><div class=\"line\">\t], cb)</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'watch'</span>, <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.js + <span class=\"string\">'/*.coffee'</span></div><div class=\"line\">\t\t\tsrc.js + <span class=\"string\">'/**/*.coffee'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'js'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.html + <span class=\"string\">'/*.jade'</span></div><div class=\"line\">\t\t\tsrc.html + <span class=\"string\">'/**/*.jade'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'html'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.css + <span class=\"string\">'/*.sass'</span></div><div class=\"line\">\t\t\tsrc.css + <span class=\"string\">'/**/*.sass'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'css'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\tgulp.watch([</div><div class=\"line\">\t\t\tsrc.image + <span class=\"string\">'/*'</span></div><div class=\"line\">\t\t\tsrc.image + <span class=\"string\">'/**/*'</span></div><div class=\"line\">\t\t], [</div><div class=\"line\">\t\t\t<span class=\"string\">'img'</span></div><div class=\"line\">\t\t\treload</div><div class=\"line\">\t])</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'default'</span>, [</div><div class=\"line\">\t<span class=\"string\">'css'</span></div><div class=\"line\">\t<span class=\"string\">'js'</span></div><div class=\"line\">\t<span class=\"string\">'html'</span></div><div class=\"line\">\t<span class=\"string\">'img'</span></div><div class=\"line\">\t<span class=\"string\">'copy-dir'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'server'</span>, [</div><div class=\"line\">\t<span class=\"string\">'default'</span></div><div class=\"line\">\t<span class=\"string\">'browser'</span></div><div class=\"line\">\t<span class=\"string\">'watch'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'build'</span>, [</div><div class=\"line\">\t<span class=\"string\">'clean'</span></div><div class=\"line\">\t<span class=\"string\">'changeEnv'</span></div><div class=\"line\">], <span class=\"function\">-&gt;</span></div><div class=\"line\">\tgulp.run <span class=\"string\">'default'</span></div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'staging'</span>, [</div><div class=\"line\">\t<span class=\"string\">'deploy'</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">gulp.task <span class=\"string\">'production'</span>, [</div><div class=\"line\">\t<span class=\"string\">'changeDeployEnv'</span></div><div class=\"line\">\t<span class=\"string\">'deploy'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n"},{"title":"object-assignの挙動について勘違いしていたこと","id":"behavior-of-object-assign","date":"2015-06-04T10:48:55.000Z","_content":"\n\n仕様をきちんと理解していれば自明のことですが、ハマりかけたのでメモしておきます。\n\n##この記事の概要\n複数のオブジェクトを合成して新しいオブジェクトを返してくれる便利機能`Object.assign`。\n現在は`harmony`オプション付きのNode.jsでも使えないので、`object-assign`などのモジュールを経由して使っていると思います。\n\n私が勘違いしていたのですが、これは\n>引数として渡したオブジェクトを合成したオブジェクトを返す\n\nという機能ではなく、\n>第二引数以降に渡したオブジェクトを、第一引数に渡したオブジェクトに合成して返す\n\nものなのですね。\n\nMDNに記載されているリファレンスにも\n>１つ以上のソースオブジェクトの保有する全ての列挙プロパティの値を、ターゲットのオブジェクトへコピーします。\n>戻り値はターゲットオブジェクトになります。\n\nと、明記されています。 [Object.assign()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\nコードで表すと\n```javascript\n\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nvar obj = {\n  foo: \"bar\"\n};\n\nvar obj2 = {\n  baz: \"foobar\"\n};\n\nconsole.log(obj); // { foo: 'bar' }\nconsole.log(obj2); // { baz: 'foobar' }\n\nvar obj3 = objectAssign(obj, obj2);\n\nconsole.log(obj3); // { foo: 'bar', baz: 'foobar' }\nconsole.log(obj); // { foo: 'bar', baz: 'foobar' } objの中身も変わっている\n```\n`obj3`に返されているのは`obj2`を合成した`obj`ですので、当然の挙動です。\n`obj`の中身を変更したくないのであれば、次のような書き方をする必要があります。\n\n```javascript\nvar target = {};\nvar obj4 = objectAssign(target, obj, obj2);\n\nconsole.log(obj4); // { foo: 'bar', baz: 'foobar' }\nconsole.log(obj); // { foo: 'bar' } objの中身は変わっていない\n```\n\n`React.js`で作っているサイトで、`Inline Styles`を導入してみて、初めてこの挙動を知った次第です。\nきちんと仕様を理解するのが大事、というお話でした。\n","source":"_posts/2015-06-04-behavior-of-object-assign.md","raw":"---\ntitle: \"object-assignの挙動について勘違いしていたこと\"\nid: behavior-of-object-assign\ndate: 2015-06-04 19:48:55\ncategories:\ntags:\n  - node.js\n  - javascript\n  - npm\n---\n\n\n仕様をきちんと理解していれば自明のことですが、ハマりかけたのでメモしておきます。\n\n##この記事の概要\n複数のオブジェクトを合成して新しいオブジェクトを返してくれる便利機能`Object.assign`。\n現在は`harmony`オプション付きのNode.jsでも使えないので、`object-assign`などのモジュールを経由して使っていると思います。\n\n私が勘違いしていたのですが、これは\n>引数として渡したオブジェクトを合成したオブジェクトを返す\n\nという機能ではなく、\n>第二引数以降に渡したオブジェクトを、第一引数に渡したオブジェクトに合成して返す\n\nものなのですね。\n\nMDNに記載されているリファレンスにも\n>１つ以上のソースオブジェクトの保有する全ての列挙プロパティの値を、ターゲットのオブジェクトへコピーします。\n>戻り値はターゲットオブジェクトになります。\n\nと、明記されています。 [Object.assign()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\nコードで表すと\n```javascript\n\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nvar obj = {\n  foo: \"bar\"\n};\n\nvar obj2 = {\n  baz: \"foobar\"\n};\n\nconsole.log(obj); // { foo: 'bar' }\nconsole.log(obj2); // { baz: 'foobar' }\n\nvar obj3 = objectAssign(obj, obj2);\n\nconsole.log(obj3); // { foo: 'bar', baz: 'foobar' }\nconsole.log(obj); // { foo: 'bar', baz: 'foobar' } objの中身も変わっている\n```\n`obj3`に返されているのは`obj2`を合成した`obj`ですので、当然の挙動です。\n`obj`の中身を変更したくないのであれば、次のような書き方をする必要があります。\n\n```javascript\nvar target = {};\nvar obj4 = objectAssign(target, obj, obj2);\n\nconsole.log(obj4); // { foo: 'bar', baz: 'foobar' }\nconsole.log(obj); // { foo: 'bar' } objの中身は変わっていない\n```\n\n`React.js`で作っているサイトで、`Inline Styles`を導入してみて、初めてこの挙動を知った次第です。\nきちんと仕様を理解するのが大事、というお話でした。\n","slug":"2015-06-04-behavior-of-object-assign","published":1,"updated":"2016-08-11T00:46:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgkc000qg3kq5u25vokz","content":"<p>仕様をきちんと理解していれば自明のことですが、ハマりかけたのでメモしておきます。</p>\n<p>##この記事の概要<br>複数のオブジェクトを合成して新しいオブジェクトを返してくれる便利機能<code>Object.assign</code>。<br>現在は<code>harmony</code>オプション付きのNode.jsでも使えないので、<code>object-assign</code>などのモジュールを経由して使っていると思います。</p>\n<p>私が勘違いしていたのですが、これは</p>\n<blockquote>\n<p>引数として渡したオブジェクトを合成したオブジェクトを返す</p>\n</blockquote>\n<p>という機能ではなく、</p>\n<blockquote>\n<p>第二引数以降に渡したオブジェクトを、第一引数に渡したオブジェクトに合成して返す</p>\n</blockquote>\n<p>ものなのですね。</p>\n<p>MDNに記載されているリファレンスにも</p>\n<blockquote>\n<p>１つ以上のソースオブジェクトの保有する全ての列挙プロパティの値を、ターゲットのオブジェクトへコピーします。<br>戻り値はターゲットオブジェクトになります。</p>\n</blockquote>\n<p>と、明記されています。 <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"external\">Object.assign()</a></p>\n<p>コードで表すと<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> objectAssign = <span class=\"built_in\">require</span>(<span class=\"string\">'object-assign'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  foo: <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">  baz: <span class=\"string\">\"foobar\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">// &#123; baz: 'foobar' &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = objectAssign(obj, obj2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj3); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125; objの中身も変わっている</span></div></pre></td></tr></table></figure></p>\n<p><code>obj3</code>に返されているのは<code>obj2</code>を合成した<code>obj</code>ですので、当然の挙動です。<br><code>obj</code>の中身を変更したくないのであれば、次のような書き方をする必要があります。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj4 = objectAssign(target, obj, obj2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj4); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar' &#125; objの中身は変わっていない</span></div></pre></td></tr></table></figure>\n<p><code>React.js</code>で作っているサイトで、<code>Inline Styles</code>を導入してみて、初めてこの挙動を知った次第です。<br>きちんと仕様を理解するのが大事、というお話でした。</p>\n","excerpt":"","more":"<p>仕様をきちんと理解していれば自明のことですが、ハマりかけたのでメモしておきます。</p>\n<p>##この記事の概要<br>複数のオブジェクトを合成して新しいオブジェクトを返してくれる便利機能<code>Object.assign</code>。<br>現在は<code>harmony</code>オプション付きのNode.jsでも使えないので、<code>object-assign</code>などのモジュールを経由して使っていると思います。</p>\n<p>私が勘違いしていたのですが、これは</p>\n<blockquote>\n<p>引数として渡したオブジェクトを合成したオブジェクトを返す</p>\n</blockquote>\n<p>という機能ではなく、</p>\n<blockquote>\n<p>第二引数以降に渡したオブジェクトを、第一引数に渡したオブジェクトに合成して返す</p>\n</blockquote>\n<p>ものなのですね。</p>\n<p>MDNに記載されているリファレンスにも</p>\n<blockquote>\n<p>１つ以上のソースオブジェクトの保有する全ての列挙プロパティの値を、ターゲットのオブジェクトへコピーします。<br>戻り値はターゲットオブジェクトになります。</p>\n</blockquote>\n<p>と、明記されています。 <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign()</a></p>\n<p>コードで表すと<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> objectAssign = <span class=\"built_in\">require</span>(<span class=\"string\">'object-assign'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  foo: <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</div><div class=\"line\">  baz: <span class=\"string\">\"foobar\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">// &#123; baz: 'foobar' &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = objectAssign(obj, obj2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj3); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125; objの中身も変わっている</span></div></pre></td></tr></table></figure></p>\n<p><code>obj3</code>に返されているのは<code>obj2</code>を合成した<code>obj</code>ですので、当然の挙動です。<br><code>obj</code>の中身を変更したくないのであれば、次のような書き方をする必要があります。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj4 = objectAssign(target, obj, obj2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj4); <span class=\"comment\">// &#123; foo: 'bar', baz: 'foobar' &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; foo: 'bar' &#125; objの中身は変わっていない</span></div></pre></td></tr></table></figure>\n<p><code>React.js</code>で作っているサイトで、<code>Inline Styles</code>を導入してみて、初めてこの挙動を知った次第です。<br>きちんと仕様を理解するのが大事、というお話でした。</p>\n"},{"title":"TypeScript✕ReactJSで型安全なComponentを手に入れる","id":"type-safe-react-component-with-typescript","date":"2016-08-10T14:23:35.000Z","_content":"\nこの1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。\n\nReact.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。\nまた、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。\nさらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)\n型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。\n\nそこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。\n※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している\n\n## 導入方法\n\nまず、TypeScriptとReactをインストールする。\n※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。\n\n```bash\nnpm i -S typescript react typings\n```\n\n次にReactの型定義ファイルを取得します\n\n```bash\n$(npm bin)/typings install -S react\n# TypeScript@2の場合は npm install -D @types/react\n```\n\nこれで準備は完了。\n\n## コンポーネントの定義\n\nそれでは実際にコンポーネントを定義する。\nReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。\n\nReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。\nStatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。\nViewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。\n\nさて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。\n\n```typescript\n// ReactComponent\nclass Component<P, S> implements ComponentLifecycle<P, S> {\n  constructor(props?: P, context?: any);\n  setState(f: (prevState: S, props: P) => S, callback?: () => any): void;\n  setState(state: S, callback?: () => any): void;\n  forceUpdate(callBack?: () => any): void;\n  render(): ReactElement<any>;\n\n  props: P & { children?: ReactNode };\n  state: S;\n  context: {};\n  refs: {\n    [key: string]: ReactInstance\n  };\n}\n\n// StatelessComponent\ninterface StatelessComponent<P> {\n  (props?: P, context?: any): ReactElement<any>;\n  propTypes?: ValidationMap<P>;\n  contextTypes?: ValidationMap<any>;\n  defaultProps?: P;\n  displayName?: string;\n}\n```\n\nReactComponentは`P`,`S`、StatelessComponentは`P`という型変数を受け取ることに注目したい。\nこれはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。\n※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。\n\nつまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。\nこれによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。\n\n## 作例\n\nでは実際にコンポーネントの作例を書いてみたい。\n例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。\n\n```typescript\nimport { StatelessComponent, Component } from \"react\";\n\n// Propsの型を定義する\ninterface ITodo {\n  label: string;\n  isCompleted: boolean;\n}\n\ninterface ITodos {\n  todos: ITodo[];\n}\n\n// StatelessComponentの型引数に上で定義した型を渡す\nconst Todo: StatelessComponent<ITodos> = ({ label, isCompleted }) => (\n  <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n);\n\nconst Todos: StatelessComponent<ITodoProps> = ({ todos }) => (\n  <ul>\n    {todos.map(todo => <Todo { ...todo }/>)}\n  </ul>\n);\n\n// ReactComponentとして定義するなら...\nclass Todo extends Component<ITodos, void> {\n  render() {\n    const { label, isCompleted } = this.props;\n    return <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n  }\n}\n\nclass Todos extends Component<ITodos, void> {\n  render() {\n    const { todos } = this.props;\n    return (\n      <ul>\n        {todos.map(todo => <Todo { ...todo }/>)}\n      </ul>\n    )\n  }\n}\n```\n\nこの作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。\n※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう\n\n以上で型安全な子コンポーネントが作成できた。\nこれらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。\n\n```typescript\nexport class RootComponent extends Component<void, ITodos> {\n  componentWillMount() {\n    rootModel.subscribe(state => this.setState(state));\n  }\n\n  render() {\n    return <Todos { ...this.state } />;\n  }\n}\n```\n\n## まとめ\n\n以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。\n参考になればうれしい。","source":"_posts/2016-08-10-type-safe-react-component-with-typescript.md","raw":"---\ntitle: TypeScript✕ReactJSで型安全なComponentを手に入れる\nid: type-safe-react-component-with-typescript\ndate: 2016-08-10 23:23:35\ntags:\n- javascript\n- typescript\n- reactjs\n---\n\nこの1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。\n\nReact.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。\nまた、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。\nさらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)\n型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。\n\nそこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。\n※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している\n\n## 導入方法\n\nまず、TypeScriptとReactをインストールする。\n※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。\n\n```bash\nnpm i -S typescript react typings\n```\n\n次にReactの型定義ファイルを取得します\n\n```bash\n$(npm bin)/typings install -S react\n# TypeScript@2の場合は npm install -D @types/react\n```\n\nこれで準備は完了。\n\n## コンポーネントの定義\n\nそれでは実際にコンポーネントを定義する。\nReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。\n\nReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。\nStatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。\nViewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。\n\nさて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。\n\n```typescript\n// ReactComponent\nclass Component<P, S> implements ComponentLifecycle<P, S> {\n  constructor(props?: P, context?: any);\n  setState(f: (prevState: S, props: P) => S, callback?: () => any): void;\n  setState(state: S, callback?: () => any): void;\n  forceUpdate(callBack?: () => any): void;\n  render(): ReactElement<any>;\n\n  props: P & { children?: ReactNode };\n  state: S;\n  context: {};\n  refs: {\n    [key: string]: ReactInstance\n  };\n}\n\n// StatelessComponent\ninterface StatelessComponent<P> {\n  (props?: P, context?: any): ReactElement<any>;\n  propTypes?: ValidationMap<P>;\n  contextTypes?: ValidationMap<any>;\n  defaultProps?: P;\n  displayName?: string;\n}\n```\n\nReactComponentは`P`,`S`、StatelessComponentは`P`という型変数を受け取ることに注目したい。\nこれはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。\n※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。\n\nつまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。\nこれによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。\n\n## 作例\n\nでは実際にコンポーネントの作例を書いてみたい。\n例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。\n\n```typescript\nimport { StatelessComponent, Component } from \"react\";\n\n// Propsの型を定義する\ninterface ITodo {\n  label: string;\n  isCompleted: boolean;\n}\n\ninterface ITodos {\n  todos: ITodo[];\n}\n\n// StatelessComponentの型引数に上で定義した型を渡す\nconst Todo: StatelessComponent<ITodos> = ({ label, isCompleted }) => (\n  <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n);\n\nconst Todos: StatelessComponent<ITodoProps> = ({ todos }) => (\n  <ul>\n    {todos.map(todo => <Todo { ...todo }/>)}\n  </ul>\n);\n\n// ReactComponentとして定義するなら...\nclass Todo extends Component<ITodos, void> {\n  render() {\n    const { label, isCompleted } = this.props;\n    return <li className={ isCompleted ? \"Todo--is-complete\" : \"Todo\" }>{ label }</li>\n  }\n}\n\nclass Todos extends Component<ITodos, void> {\n  render() {\n    const { todos } = this.props;\n    return (\n      <ul>\n        {todos.map(todo => <Todo { ...todo }/>)}\n      </ul>\n    )\n  }\n}\n```\n\nこの作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。\n※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう\n\n以上で型安全な子コンポーネントが作成できた。\nこれらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。\n\n```typescript\nexport class RootComponent extends Component<void, ITodos> {\n  componentWillMount() {\n    rootModel.subscribe(state => this.setState(state));\n  }\n\n  render() {\n    return <Todos { ...this.state } />;\n  }\n}\n```\n\n## まとめ\n\n以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。\n参考になればうれしい。","slug":"2016-08-10-type-safe-react-component-with-typescript","published":1,"updated":"2016-08-11T00:23:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirpmdgkp000tg3kq78czkiwa","content":"<p>この1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。</p>\n<p>React.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。<br>また、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。<br>さらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)<br>型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。</p>\n<p>そこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。<br>※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している</p>\n<h2 id=\"導入方法\"><a href=\"#導入方法\" class=\"headerlink\" title=\"導入方法\"></a>導入方法</h2><p>まず、TypeScriptとReactをインストールする。<br>※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S typescript react typings</div></pre></td></tr></table></figure>\n<p>次にReactの型定義ファイルを取得します</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(npm bin)/typings install -S react</div><div class=\"line\"><span class=\"comment\"># TypeScript@2の場合は npm install -D @types/react</span></div></pre></td></tr></table></figure>\n<p>これで準備は完了。</p>\n<h2 id=\"コンポーネントの定義\"><a href=\"#コンポーネントの定義\" class=\"headerlink\" title=\"コンポーネントの定義\"></a>コンポーネントの定義</h2><p>それでは実際にコンポーネントを定義する。<br>ReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。</p>\n<p>ReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。<br>StatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。<br>Viewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。</p>\n<p>さて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ReactComponent</span></div><div class=\"line\"><span class=\"keyword\">class</span> Component&lt;P, S&gt; <span class=\"keyword\">implements</span> ComponentLifecycle&lt;P, S&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props?: P, context?: any);</div><div class=\"line\">  setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): void;</div><div class=\"line\">  setState(state: S, callback?: () =&gt; any): void;</div><div class=\"line\">  forceUpdate(callBack?: () =&gt; any): void;</div><div class=\"line\">  render(): ReactElement&lt;any&gt;;</div><div class=\"line\"></div><div class=\"line\">  props: P &amp; &#123; children?: ReactNode &#125;;</div><div class=\"line\">  state: S;</div><div class=\"line\">  context: &#123;&#125;;</div><div class=\"line\">  refs: &#123;</div><div class=\"line\">    [key: <span class=\"built_in\">string</span>]: ReactInstance</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// StatelessComponent</span></div><div class=\"line\"><span class=\"keyword\">interface</span> StatelessComponent&lt;P&gt; &#123;</div><div class=\"line\">  (props?: P, context?: <span class=\"built_in\">any</span>): ReactElement&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  propTypes?: ValidationMap&lt;P&gt;;</div><div class=\"line\">  contextTypes?: ValidationMap&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  defaultProps?: P;</div><div class=\"line\">  displayName?: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReactComponentは<code>P</code>,<code>S</code>、StatelessComponentは<code>P</code>という型変数を受け取ることに注目したい。<br>これはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。<br>※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。</p>\n<p>つまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。<br>これによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。</p>\n<h2 id=\"作例\"><a href=\"#作例\" class=\"headerlink\" title=\"作例\"></a>作例</h2><p>では実際にコンポーネントの作例を書いてみたい。<br>例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; StatelessComponent, Component &#125; from \"react\";</div><div class=\"line\"></div><div class=\"line\">// Propsの型を定義する</div><div class=\"line\">interface ITodo &#123;</div><div class=\"line\">  label: string;</div><div class=\"line\">  isCompleted: boolean;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface ITodos &#123;</div><div class=\"line\">  todos: ITodo[];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// StatelessComponentの型引数に上で定義した型を渡す</div><div class=\"line\">const Todo: StatelessComponent&lt;ITodos&gt; = (&#123; label, isCompleted &#125;) =&gt; (</div><div class=\"line\">  &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">const Todos: StatelessComponent&lt;ITodoProps&gt; = (&#123; todos &#125;) =&gt; (</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// ReactComponentとして定義するなら...</div><div class=\"line\">class Todo extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; label, isCompleted &#125; = this.props;</div><div class=\"line\">    return &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Todos extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; todos &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>この作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。<br>※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう</p>\n<p>以上で型安全な子コンポーネントが作成できた。<br>これらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RootComponent extends Component&lt;<span class=\"built_in\">void</span>, ITodos&gt; &#123;</div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">    rootModel.subscribe(state =&gt; <span class=\"keyword\">this</span>.setState(state));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;Todos &#123; ...this.state &#125; /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。<br>参考になればうれしい。</p>\n","excerpt":"","more":"<p>この1~2年ほどで、Reactを使って公私に渡ってアプリケーションをいくつか作成する機会があった。</p>\n<p>React.Proptypesに感じている不満 React組み込みのProptypesによる型検査は、実行時検証であり、アプリケーションを起動して、実際にコンポーネントを描画してみるまでエラーに気づけない。<br>また、React独自の機能であるので、他の下層DOMライブラリでも同様の型検査をできるわけではない。<br>さらに、Proptypesはコンポーネントに定義するので、型定義がViewに紐付いてしまう(ドメイン知識がViewに紐付いてしまう)<br>型定義の多くはドメイン知識に紐付いており、ViewではなくModel(State)レイヤーで定義したい。</p>\n<p>そこで本稿ではTypeScriptの静的解析の支援を受けて、型安全なコンポーネントを定義することでこの問題を解決したい。<br>※なお、ReactにはFacebook謹製のFlowTypeがあるが、あくまでアプリケーションの主体はModel層にあり、Model層はRxJSによるState川を作る設計にしたいという理由でTypeScriptを選択している</p>\n<h2 id=\"導入方法\"><a href=\"#導入方法\" class=\"headerlink\" title=\"導入方法\"></a>導入方法</h2><p>まず、TypeScriptとReactをインストールする。<br>※TypeScriptは2.x系のバージョンがベータ版としてリリースされているので、そちらを使うのであればtypingsは不要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S typescript react typings</div></pre></td></tr></table></figure>\n<p>次にReactの型定義ファイルを取得します</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(npm bin)/typings install -S react</div><div class=\"line\"><span class=\"comment\"># TypeScript@2の場合は npm install -D @types/react</span></div></pre></td></tr></table></figure>\n<p>これで準備は完了。</p>\n<h2 id=\"コンポーネントの定義\"><a href=\"#コンポーネントの定義\" class=\"headerlink\" title=\"コンポーネントの定義\"></a>コンポーネントの定義</h2><p>それでは実際にコンポーネントを定義する。<br>ReactにはReactComponentと、StatelessComponentという2種のコンポーネント型がある。</p>\n<p>ReactComponentは、一般的なReactのコンポーネントで、React.Componentを継承して定義するコンポーネント。<br>StatelessComponentは、関数として定義できるコンポーネントで、(当然だが)ライフサイクルメソッド、Stateを持たない。<br>Viewにロジックが入り込む余地をなくすことができるので、私は特に理由がない限りこちらのコンポーネントを使うようにしている。</p>\n<p>さて、ReactComponentとStatelessComponentのコンポーネント定義例を作成する前に、それぞれの型定義を確認したい。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ReactComponent</span></div><div class=\"line\"><span class=\"keyword\">class</span> Component&lt;P, S&gt; <span class=\"keyword\">implements</span> ComponentLifecycle&lt;P, S&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props?: P, context?: any);</div><div class=\"line\">  setState(f: (prevState: S, props: P) =&gt; S, callback?: () =&gt; any): void;</div><div class=\"line\">  setState(state: S, callback?: () =&gt; any): void;</div><div class=\"line\">  forceUpdate(callBack?: () =&gt; any): void;</div><div class=\"line\">  render(): ReactElement&lt;any&gt;;</div><div class=\"line\"></div><div class=\"line\">  props: P &amp; &#123; children?: ReactNode &#125;;</div><div class=\"line\">  state: S;</div><div class=\"line\">  context: &#123;&#125;;</div><div class=\"line\">  refs: &#123;</div><div class=\"line\">    [key: <span class=\"built_in\">string</span>]: ReactInstance</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// StatelessComponent</span></div><div class=\"line\"><span class=\"keyword\">interface</span> StatelessComponent&lt;P&gt; &#123;</div><div class=\"line\">  (props?: P, context?: <span class=\"built_in\">any</span>): ReactElement&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  propTypes?: ValidationMap&lt;P&gt;;</div><div class=\"line\">  contextTypes?: ValidationMap&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">  defaultProps?: P;</div><div class=\"line\">  displayName?: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReactComponentは<code>P</code>,<code>S</code>、StatelessComponentは<code>P</code>という型変数を受け取ることに注目したい。<br>これはPropsとStateを表す型変数で、それぞれコンポーネントのPropsとStateに受け取れる型を定義できる。<br>※余談だが、コンポーネント階層に暗黙に流れていくcontextというオブジェクトもあるが、こちらはany型になっている。</p>\n<p>つまり、PropTypesで実行時に検証していたPropsの型を、TypeScriptのジェネリクス機能によって、静的に解析・検証ができるというだ。<br>これによって、Model(Store)レイヤーで定義したインターフェースに変更があった場合でも、アプリケーションを実行することなく変更を検出・コンポーネントの定義を変更でき、非常に快適なコンポーネント作成を行うことができる。</p>\n<h2 id=\"作例\"><a href=\"#作例\" class=\"headerlink\" title=\"作例\"></a>作例</h2><p>では実際にコンポーネントの作例を書いてみたい。<br>例によってTodoアプリケーションを想定して、ごく簡単なTodoリストを描画したいとする。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; StatelessComponent, Component &#125; from \"react\";</div><div class=\"line\"></div><div class=\"line\">// Propsの型を定義する</div><div class=\"line\">interface ITodo &#123;</div><div class=\"line\">  label: string;</div><div class=\"line\">  isCompleted: boolean;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface ITodos &#123;</div><div class=\"line\">  todos: ITodo[];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// StatelessComponentの型引数に上で定義した型を渡す</div><div class=\"line\">const Todo: StatelessComponent&lt;ITodos&gt; = (&#123; label, isCompleted &#125;) =&gt; (</div><div class=\"line\">  &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">const Todos: StatelessComponent&lt;ITodoProps&gt; = (&#123; todos &#125;) =&gt; (</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// ReactComponentとして定義するなら...</div><div class=\"line\">class Todo extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; label, isCompleted &#125; = this.props;</div><div class=\"line\">    return &lt;li className=&#123; isCompleted ? \"Todo--is-complete\" : \"Todo\" &#125;&gt;&#123; label &#125;&lt;/li&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Todos extends Component&lt;ITodos, void&gt; &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; todos &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">        &#123;todos.map(todo =&gt; &lt;Todo &#123; ...todo &#125;/&gt;)&#125;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>この作例では必要なかったが、React.Componentの第二型引数に渡した型で、this.stateの型も定義できる。<br>※個人的にはそもそもコンポーネント内部でStateを操作しないケースの方が多いと感じているが、アプリケーションのサイズに依存するだろう</p>\n<p>以上で型安全な子コンポーネントが作成できた。<br>これらのコンポーネントの親となるルートコンポーネントでルートStateを購読し、下層のコンポーネントに流してあげることで、アプリケーションのViewとしての定義が完成する。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RootComponent extends Component&lt;<span class=\"built_in\">void</span>, ITodos&gt; &#123;</div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">    rootModel.subscribe(state =&gt; <span class=\"keyword\">this</span>.setState(state));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;Todos &#123; ...this.state &#125; /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>以上、TypeScriptでReactコンポーネントを作成することで型安全なコンポーネントを定義する方法を紹介してみた。<br>参考になればうれしい。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cirpmdgj5000ag3kqil1wjkzz","tag_id":"cirpmdgj40009g3kqflah2awg","_id":"cirpmdgjc000dg3kqa05ixisg"},{"post_id":"cirpmdgib0000g3kqf06llxoz","tag_id":"cirpmdgij0002g3kq11e6887e","_id":"cirpmdgjv000ig3kqjgtq73p2"},{"post_id":"cirpmdgib0000g3kqf06llxoz","tag_id":"cirpmdgix0005g3kqkouq7bg3","_id":"cirpmdgk8000kg3kqqfdutjno"},{"post_id":"cirpmdgib0000g3kqf06llxoz","tag_id":"cirpmdgj40009g3kqflah2awg","_id":"cirpmdgka000ng3kq4jewonr8"},{"post_id":"cirpmdgib0000g3kqf06llxoz","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgkc000pg3kq590ksp7j"},{"post_id":"cirpmdgig0001g3kqupsvqr53","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgko000sg3kqb321jvqn"},{"post_id":"cirpmdgig0001g3kqupsvqr53","tag_id":"cirpmdgjl000gg3kqy3l7e849","_id":"cirpmdgkq000ug3kqmuxxmfb2"},{"post_id":"cirpmdgkp000tg3kq78czkiwa","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgkw000wg3kq5hyjbncd"},{"post_id":"cirpmdgkp000tg3kq78czkiwa","tag_id":"cirozm36k0002bjkq496i5rla","_id":"cirpmdgkw000xg3kqks10kgzy"},{"post_id":"cirpmdgkp000tg3kq78czkiwa","tag_id":"cirozm36m0003bjkq1trb8w6x","_id":"cirpmdgkx000zg3kqqprpzlor"},{"post_id":"cirpmdgiq0003g3kqysi4r9sz","tag_id":"cirpmdgk8000lg3kqgn36x6s4","_id":"cirpmdgkx0010g3kqstqctobv"},{"post_id":"cirpmdgiq0003g3kqysi4r9sz","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgky0012g3kqhew2zmei"},{"post_id":"cirpmdgiq0003g3kqysi4r9sz","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgkz0013g3kq0otjqypx"},{"post_id":"cirpmdgiu0004g3kqfa8kqefw","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgl10015g3kqp8ckgeyd"},{"post_id":"cirpmdgiu0004g3kqfa8kqefw","tag_id":"cirpmdgkx000yg3kq6n0pqsqd","_id":"cirpmdgl10016g3kqqcptmhs8"},{"post_id":"cirpmdgiu0004g3kqfa8kqefw","tag_id":"cirpmdgky0011g3kqzrqyxdhn","_id":"cirpmdgl30018g3kqvxp6tvu7"},{"post_id":"cirpmdgix0006g3kqx672a5em","tag_id":"cirpmdgl00014g3kq852vo50e","_id":"cirpmdgl4001ag3kqz45tdjx8"},{"post_id":"cirpmdgix0006g3kqx672a5em","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgl5001bg3kq3yhpmj8c"},{"post_id":"cirpmdgix0006g3kqx672a5em","tag_id":"cirpmdgl20017g3kqblrj9vlx","_id":"cirpmdgl5001dg3kq7tzvb94i"},{"post_id":"cirpmdgiz0007g3kqj5uvcmst","tag_id":"cirpmdgl40019g3kq85b5pzxf","_id":"cirpmdglb001gg3kqbo91rofh"},{"post_id":"cirpmdgiz0007g3kqj5uvcmst","tag_id":"cirpmdgl5001cg3kqrl0m0daf","_id":"cirpmdglb001hg3kqrn92t66s"},{"post_id":"cirpmdgiz0007g3kqj5uvcmst","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdglf001jg3kqkbg9imj8"},{"post_id":"cirpmdgiz0007g3kqj5uvcmst","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdglf001kg3kqgocbzq6h"},{"post_id":"cirpmdgj7000bg3kqvsv9ymd3","tag_id":"cirpmdgl9001fg3kqdq1508yy","_id":"cirpmdglj001ng3kq406h2a75"},{"post_id":"cirpmdgj7000bg3kqvsv9ymd3","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdglk001og3kqfm8sp56c"},{"post_id":"cirpmdgj7000bg3kqvsv9ymd3","tag_id":"cirpmdgky0011g3kqzrqyxdhn","_id":"cirpmdglk001qg3kqdyov1vnf"},{"post_id":"cirpmdgjd000eg3kqc2iu9hi2","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdglo001ug3kqchm6bepm"},{"post_id":"cirpmdgjd000eg3kqc2iu9hi2","tag_id":"cirpmdglh001mg3kqt2c0uvbk","_id":"cirpmdglo001vg3kqf70251iz"},{"post_id":"cirpmdgjd000eg3kqc2iu9hi2","tag_id":"cirpmdglk001pg3kqwn5h9nrn","_id":"cirpmdglp001xg3kqb3ifwem9"},{"post_id":"cirpmdgjd000eg3kqc2iu9hi2","tag_id":"cirpmdgll001rg3kqz1var0vd","_id":"cirpmdglp001yg3kqati67pwp"},{"post_id":"cirpmdgjd000eg3kqc2iu9hi2","tag_id":"cirpmdglm001sg3kqmzinne6b","_id":"cirpmdglq0020g3kqbxi4vyk8"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirpmdglm001tg3kq5gcpjswb","_id":"cirpmdgly0023g3kq4tgji6v8"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirpmdglo001wg3kqq7026p0h","_id":"cirpmdglz0024g3kq39counl2"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdglz0026g3kq1vxkumkg"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirpmdglq001zg3kqvyvcfkck","_id":"cirpmdgm00027g3kqlx2tu880"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirpmdgky0011g3kqzrqyxdhn","_id":"cirpmdgm20029g3kq2y3puxa6"},{"post_id":"cirpmdgjg000fg3kqao9gww6y","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgm2002ag3kqfub0kdot"},{"post_id":"cirpmdgjm000hg3kqiypilnzj","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgm2002cg3kqn3fbsrrq"},{"post_id":"cirpmdgjm000hg3kqiypilnzj","tag_id":"cirpmdgij0002g3kq11e6887e","_id":"cirpmdgm3002dg3kqlu00rz2h"},{"post_id":"cirpmdgjm000hg3kqiypilnzj","tag_id":"cirpmdglo001wg3kqq7026p0h","_id":"cirpmdgm4002fg3kqayeh6xq7"},{"post_id":"cirpmdgjm000hg3kqiypilnzj","tag_id":"cirpmdglz0025g3kq18rta2kd","_id":"cirpmdgm7002gg3kqrx7nsqwd"},{"post_id":"cirpmdgjm000hg3kqiypilnzj","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgm8002ig3kq1ufiq3oa"},{"post_id":"cirpmdgjv000jg3kqjrayl9y9","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgm8002jg3kql80ssecb"},{"post_id":"cirpmdgjv000jg3kqjrayl9y9","tag_id":"cirpmdgm00028g3kq8purbxez","_id":"cirpmdgm9002kg3kqtmb2cueo"},{"post_id":"cirpmdgjv000jg3kqjrayl9y9","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgm9002mg3kqwvi3puji"},{"post_id":"cirpmdgjv000jg3kqjrayl9y9","tag_id":"cirpmdgm2002bg3kq2x5x2kj9","_id":"cirpmdgm9002ng3kqqzoyxcar"},{"post_id":"cirpmdgk9000mg3kqafmzx573","tag_id":"cirpmdgky0011g3kqzrqyxdhn","_id":"cirpmdgma002pg3kqt1g6yitj"},{"post_id":"cirpmdgk9000mg3kqafmzx573","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgma002qg3kql04dlphx"},{"post_id":"cirpmdgkb000og3kqathyjoj5","tag_id":"cirpmdgm7002hg3kq94qjb7m7","_id":"cirpmdgmh002tg3kqjt5zmttn"},{"post_id":"cirpmdgkb000og3kqathyjoj5","tag_id":"cirpmdgm9002lg3kqhds2j2xm","_id":"cirpmdgmi002ug3kqzxayzdnu"},{"post_id":"cirpmdgkb000og3kqathyjoj5","tag_id":"cirpmdgm9002og3kqfoyv1w0r","_id":"cirpmdgml002vg3kq8x0j1e0u"},{"post_id":"cirpmdgkb000og3kqathyjoj5","tag_id":"cirpmdgmb002rg3kq8wba3h86","_id":"cirpmdgmm002wg3kqxmq1gybw"},{"post_id":"cirpmdgkb000og3kqathyjoj5","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgmm002xg3kqi8hi7byc"},{"post_id":"cirpmdgkc000qg3kq5u25vokz","tag_id":"cirpmdgjb000cg3kqzij5okuz","_id":"cirpmdgmm002yg3kqu4egd5dv"},{"post_id":"cirpmdgkc000qg3kq5u25vokz","tag_id":"cirozm36g0001bjkqjyuzov74","_id":"cirpmdgmm002zg3kqfchxqgbt"},{"post_id":"cirpmdgkc000qg3kq5u25vokz","tag_id":"cirpmdgky0011g3kqzrqyxdhn","_id":"cirpmdgmm0030g3kq2hvvr1sa"}],"Tag":[{"name":"javascript","_id":"cirozm36g0001bjkqjyuzov74"},{"name":"typescript","_id":"cirozm36k0002bjkq496i5rla"},{"name":"reactjs","_id":"cirozm36m0003bjkq1trb8w6x"},{"name":"server","_id":"cirpmdgij0002g3kq11e6887e"},{"name":"digitalocean","_id":"cirpmdgix0005g3kqkouq7bg3"},{"name":"git","_id":"cirpmdgj40009g3kqflah2awg"},{"name":"node.js","_id":"cirpmdgjb000cg3kqzij5okuz"},{"name":"openlayers","_id":"cirpmdgjl000gg3kqy3l7e849"},{"name":"irkit","_id":"cirpmdgk8000lg3kqgn36x6s4"},{"name":"grunt","_id":"cirpmdgkx000yg3kq6n0pqsqd"},{"name":"npm","_id":"cirpmdgky0011g3kqzrqyxdhn"},{"name":"vue.js","_id":"cirpmdgl00014g3kq852vo50e"},{"name":"jQuery","_id":"cirpmdgl20017g3kqblrj9vlx"},{"name":"pebble","_id":"cirpmdgl40019g3kq85b5pzxf"},{"name":"pebble.js","_id":"cirpmdgl5001cg3kqrl0m0daf"},{"name":"circleCI","_id":"cirpmdgl9001fg3kqdq1508yy"},{"name":"mongoDB","_id":"cirpmdglh001mg3kqt2c0uvbk"},{"name":"angular.js","_id":"cirpmdglk001pg3kqwn5h9nrn"},{"name":"express","_id":"cirpmdgll001rg3kqz1var0vd"},{"name":"kindle","_id":"cirpmdglm001sg3kqmzinne6b"},{"name":"gulp","_id":"cirpmdglm001tg3kq5gcpjswb"},{"name":"browser","_id":"cirpmdglo001wg3kqq7026p0h"},{"name":"coffeescript","_id":"cirpmdglq001zg3kqvyvcfkck"},{"name":"react.js","_id":"cirpmdglz0025g3kq18rta2kd"},{"name":"promise","_id":"cirpmdgm00028g3kq8purbxez"},{"name":"es6","_id":"cirpmdgm2002bg3kq2x5x2kj9"},{"name":"gulp.js","_id":"cirpmdgm7002hg3kq94qjb7m7"},{"name":"grunt.js","_id":"cirpmdgm9002lg3kqhds2j2xm"},{"name":"sass","_id":"cirpmdgm9002og3kqfoyv1w0r"},{"name":"jade","_id":"cirpmdgmb002rg3kq8wba3h86"}]}}